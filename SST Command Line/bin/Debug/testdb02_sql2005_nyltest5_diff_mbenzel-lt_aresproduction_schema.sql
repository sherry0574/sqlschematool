
-- Diff Name: Compare results for Source DB XML snapshot: c:\dev\nyl\TestDB02_sql2005_NYLTest5_SCHEMA.xml,
-- with Target DB XML snapshot: c:\dev\nyl\mbenzel-lt_AresProduction_SCHEMA.xml.
-- Results are the SQL changes necessary to match
-- the Target DB schema to the Source DB schema.
-- Output Date: 2/12/2009
-- Output Time: 1:21 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Diffgram SQL'
	
-- drop original table check constraints
IF (SELECT OBJECT_ID(N'DF__tl_code__languag__6D0D32F4')) IS NOT NULL AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_code]
	DROP CONSTRAINT [DF__tl_code__languag__6D0D32F4]
END
ELSE
	PRINT 'Check Constraint DF__tl_code__languag__6D0D32F4 or the table does not exist, so it cannot be removed'
GO
	
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_code] 
	DROP CONSTRAINT [pk_code_valuelist]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_code]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_code]
  
  ALTER COLUMN [language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_code] ADD 
	CONSTRAINT [pk_code_valuelist] PRIMARY KEY CLUSTERED 
	(
		[language_code], [code_type], [code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, code_type, code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- drop original table check constraints
IF (SELECT OBJECT_ID(N'DF__tpa__tpa_short_n__76619304')) IS NOT NULL AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tpa]
	DROP CONSTRAINT [DF__tpa__tpa_short_n__76619304]
END
ELSE
	PRINT 'Check Constraint DF__tpa__tpa_short_n__76619304 or the table does not exist, so it cannot be removed'
GO
	
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [tpa].[IX_tpa_acronym] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tpa]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tpa]
		ALTER COLUMN  [tpa_short_name]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tpa]
  
  ALTER COLUMN [tpa_short_name] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tpa does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_tpa_acronym] ON [dbo].[tpa]([tpa_short_name]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[agency_proxy_view] as
select
	person.*,
	agency.agency_number,
	agency.routing_number,
	agency.update_date
from
	person,
	agency
where
	person.person_id = agency.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[agency_view] as
select
policy_person.policy_person_id,
policy_person.policy_id,
policy_person.role_id,
policy_person.sub_role_id,
agency.agency_number,
agency.routing_number,
agency.update_date,
person.*
from
agency,
person,
policy_person
WHERE
policy_person.role_id = 'agency' and
policy_person.person_id = person.person_id and
person.person_id = agency.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[agent_policy_proxy_view] as
select
	pa.agent_number,
	p.policy_id,
	p.team_id,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	p.company_code,
	p.priority,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.case_group_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.alternate_case_id,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.policy_person_id,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	ppi.underwriting_amount as insured_underwriting_amount,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.tax_id as insured_tax_id,
	i.client_id as insured_client_id,
	ppi.primary_insured_flag,
	p.receive_date,
	p.added_date,
	p.application_number,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	policy_person_agent pa,
	policy_person ppa,
	person i
where
	pa.policy_person_id = ppa.policy_person_id and
	ppa.policy_id = p.policy_id and
	p.policy_id = pp.policy_id and
	pp.policy_person_id = ppi.policy_person_id and
	pp.person_id = i.person_id and 
	pa.agent_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[agent_proxy_view] as
select
	person.*,
	agent.agent_number,
	agent.routing_number,
	agent.company_code,
	agent.descriptor
from
	person,
	agent
where
	person.person_id = agent.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[agent_view] as
select
person.*,
agent.agent_number,
agent.routing_number,
agent.company_code,
policy_person_agent.policy_person_id,
policy_person_agent.agency_id,
policy_person_agent.commission_split,
policy_person_agent.commission_option,
policy_person_agent.market_code,
policy_person_agent.firm_name,
policy_person_agent.level5_code,
policy_person.policy_id,
policy_person.role_id,
policy_person.sub_role_id
from
person,
agent,
policy_person_agent,
policy_person
where
policy_person_agent.policy_person_id = policy_person.policy_person_id and
(policy_person.role_id like 'agent%' or policy_person.role_id like 'Agent%') and
policy_person.person_id = person.person_id and
policy_person.person_id = agent.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[application_info_view] as
select
ri.create_date,
ri.match_method,
ri.status,
ri.vendor_id,
ri.manual_or_electronic_entry,
ri.expiration_date,
ri.requirement_type_id,
ri.requirement_request_id,
ri.lifespan_days,
ri.insured_requirement_id,
ai.*,
'' as last_name,
'' as middle_name,
'' as first_name
from
requirement_information ri, insured_application_info ai
where
ri.requirement_information_id = ai.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW ares_access_rights_lob_view as
select
	auv.user_id,
	auv.login_id,
	auv.last_name,
	auv.first_name,
	asr.name as role,
	auv.is_underwriter,
	lob.line_of_business_code as lob_code,
	lob.name as lob_name,
	aul.authorization_limit
from
	aus_user_view auv,
	aus_security_roles asr,
	aus_user_limits aul,
	line_of_business lob
where
	asr.role_id = auv.role_id and
	aul.user_id = auv.user_id and
	auv.user_id > 0 and
	lob.line_of_business_code = aul.line_of_business_code and
	auv.is_active is not null and
	auv.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ares_access_rights_team_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[ares_access_rights_team_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view ares_access_rights_team_view as
select
	auv.user_id,
	auv.restrict_to_teams,
	utv.auto_assign,
	utv.team_name
from
	aus_user_view auv,
	user_teams_view utv
where
	utv.user_id = auv.user_id and
	auv.user_id > 0 and
	auv.is_active is not null and
	auv.is_active <> 0
union
select
	auv.user_id,
	auv.restrict_to_teams,
	0 as auto_assign,
	null as team_name
from
	aus_user_view auv
where
	auv.user_id not in (select user_id from user_teams_view) and
	auv.user_id > 0 and
	auv.is_active is not null and
	auv.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW association_codes_view as
select 'association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as varchar(30)) as external_code, 1 as active_flag from association
	where expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL
union
select 'association' as code_type, association_code as code_id, rtrim(name) + ' (Inactive)' as code_value, cast(expiration_date as varchar(30)) as external_code, 0 as active_flag from association
	where expiration_date <= CURRENT_TIMESTAMP and expiration_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[association_plan_proxy_view] as
select
	ap.association_code,
	ap.plan_code_id,
	tpa_code,
	g_number,
	pc.line_of_business_code,
	mortality_max,
	billing_code,
	expiration_date
from
	association_plan ap,
	tl_plan_code pc
where
	pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW association_tpa_codes_view as
select distinct 'association_' + ap.tpa_code as code_type, a.association_code as code_id, a.name as code_value, a.association_code as external_code, 1 as active_flag
	from association a, association_plan ap where (a.expiration_date > CURRENT_TIMESTAMP or a.expiration_date is NULL) and
	a.association_code = ap.association_code
union
	select distinct 'association_' + ap.tpa_code as code_type, a.association_code as code_id, rtrim(a.name) + ' (Inactive)' as code_value, a.association_code as external_code, 0 as active_flag
	from association a, association_plan ap where (a.expiration_date <= CURRENT_TIMESTAMP and a.expiration_date is not NULL) and
	a.association_code = ap.association_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[aus_user_view] as
select
	person.*,
	au.user_id,
	au.login_id,
	au.password,
	au.is_active,
	au.level_of_authority,
	au.is_underwriter,
	au.restrict_to_teams,
	au.role_id,
	au.is_service_associate,
	au.job_title,
	au.account_locked,
	au.account_locked_date,
	au.bad_login_attempt_count,
	au.last_bad_login_attempt_date,
	au.must_change_password,
	au.last_password_change_date,
	au.is_agent,
	au.agent_number,
	au.is_agency,
	au.agency_number,
	au.deleted,
	au.use_single_sign_on
from
	person,
	aus_user au
where
	au.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[automation_event_view] as
select
	*
from
	aus_event
where
	aus_cmd >= 1100 and aus_cmd < 1200

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_amount_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[benefit_amount_operand_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view [dbo].[benefit_amount_operand_view] as
select
	'getBenefitAmount(' + rtrim(code_value) + ')' as name,
	'dec' as type,
	'Benefit ' + rtrim(code_value) + ' Amount' as display,
	'The amount of the ' + rtrim(code_value) + ' Benefit on the coverage.'  as description,
	'' as value_list
from
	codes_view
where
	code_type = 'benefit_type' and
	language_code = 'en-us'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_exists_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[benefit_exists_operand_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view [dbo].[benefit_exists_operand_view] as
select
	'getBenefitExists(' + rtrim(code_value) + ')' as name,
	'bool' as type,
	'Benefit ' + rtrim(code_value) + ' Exists' as display,
	'Determines if ' + rtrim(code_value) + ' Benefit exists on the coverage.'  as description,
	'Boolean' as value_list
from
	codes_view
where
	code_type = 'benefit_type' and
	language_code = 'en-us'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[benefit_party_dob_operand_view] as
select
	'getBenefitMaxPartyDOB(' + rtrim(name) + ')' as name,
	'date' as type,
	'Benefit ' + rtrim(name) + ' Max Party DOB' as display,
	'The birthdate of the youngest party on the ' + rtrim(name) + ' Benefit.'  as description,
	'' as value_list
from
	tl_benefit_type
union
select
	'getBenefitMinPartyDOB(' + rtrim(name) + ')' as name,
	'date' as type,
	'Benefit ' + rtrim(name) + ' Min Party DOB' as display,
	'The birthdate of the oldest party on the ' + rtrim(name) + ' Benefit.'  as description,
	'' as value_list
from
	tl_benefit_type

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[case_event_view] as
select
	*
from
	aus_event
where
	aus_cmd >= 100 and aus_cmd < 1000

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW caseone_req_event_view as
select
	*
from
	aus_event
where
	aus_cmd >= 1200 and aus_cmd < 1300

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			-- create codes_view2 with new union
ALTER VIEW [dbo].[codes_view2] AS
select distinct 'en-us' as language_code, 'ppo_trust_state_' + lower(rtrim(t.company_code)) + '_' + lower(rtrim(pa.country_state_id)) as code_type,
cast(p.person_id as char(30)) as code_id, p.last_name as code_value, cast(c.expiration_date as char(30)) as external_code
from company c, person p, person_address pa, party_relation pr, company t where p.person_id = c.person_id and p.class_type = 'PPO' and
pa.person_id = p.person_id and pr.parent_id = p.person_id and t.person_id = pr.person_id and c.expiration_date = (select min(expiration_date)
from company, person_address where company_code = c.company_code and company.person_id = person_address.person_id and person_address.country_state_id = pa.country_state_id
and expiration_date > CURRENT_TIMESTAMP)
union
select distinct 'en-us' as language_code, 'trust_state_' + lower(rtrim(c.company_code)) as code_type, pa.country_state_id as code_id,
(select state_name from tl_country_state where country_state_id = pa.country_state_id) as code_value, '' as external_code
from company c, person p, person_address pa, party_relation pr,company ppo where p.person_id = c.person_id and
p.class_type = 'Trust' and pr.person_id = p.person_id and ppo.person_id = pr.parent_id and pa.person_id = ppo.person_id and
ppo.expiration_date > CURRENT_TIMESTAMP
union
select distinct 'en-us' as language_code, ('plan_gnum_' + SUBSTRING(ap.g_number,1,6) + '_' + SUBSTRING(ap.g_number,8,4)  + '_' + SUBSTRING(ap.g_number,13,4)) as code_type,
ap.plan_code_id as code_id, pc.description as code_value, pc.line_of_business_code as external_code from association_plan ap, tl_plan_code pc
where len(ap.g_number) >= 16 and ap.plan_code_id = pc.plan_code_id
UNION
SELECT DISTINCT
'en-us' AS language_code, 'case_request_nbr' AS code_type, plan_code_id AS code_id, code_prefix AS code_value, '' AS external_code
FROM     tl_plan_code
UNION
select 'en-us' as language_code, 'agent_number' as code_type, agent.agent_number as code_id, rtrim(agent.agent_number) as code_value, '' as external_code from agent, person where person.person_id = agent.person_id and person.last_name is null
union
select 'en-us' as language_code, 'agent_number' as code_type, agent.agent_number as code_id, rtrim(agent.agent_number) + ' - ' + rtrim(person.last_name) as code_value, '' as external_code from agent, person where person.person_id = agent.person_id and person.last_name is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[company_view] as
select
	person.*,
	company.company_code,
	company.allow_aus_approval_flag,
	company.correspondence_directory,
	company.full_time_employee_count,
	company.percent_eligible_employees,
	company.percent_eligible_dependants,
	company.current_cobra_indicator,
	company.expiration_date
from
	person,
	company
where
	company.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[correspondence_event_view] as
select
	*
from
	aus_event
where
	aus_cmd >= 1000 and aus_cmd < 1100

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[coverage_benefits_party_view] as
select
	bp.benefit_id ,
	bp.policy_coverage_id ,
	bp.height_inches,
	bp.weight_pounds,
	p.*
from
	coverage_benefits_party bp,
	person p
where
	bp.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[coverage_subaccount_view] as
select
	coverage_subaccounts.policy_coverage_id,
	tl_subaccount.*,
	coverage_subaccounts.percentage
from
	coverage_subaccounts,
	tl_subaccount
where
	tl_subaccount.subaccount_code = coverage_subaccounts.subaccount_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[customer_lab_report_view]
AS
select 
  r.lab_id_number,
  r.requirement_information_id,
  r.horl_code,
  c.[description],
  r.result_value,
  ISNULL((case when h.sex = 'm' then low_male else low_female end),'') as [low],
  ISNULL((case when h.sex = 'm' then high_male else high_female end),'') as [high],
  (case when 
	(case when h.sex = 'm' then low_male else low_female end) = 'negative' AND
	r.result_value <> 'NEG' AND 
        ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
	len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
   then r.result_value else 
        case when
	   ISNUMERIC(r.result_value)=1 AND
	   ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
	   CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
	   CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
	   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
        then r.result_value else 
	   case when
		r.result_value = 'NVG' OR (r.result_value <> 'NEG' AND
		(case when h.sex = 'm' then low_male else low_female end) IS NULL AND
		(case when h.sex = 'm' then high_male else high_female end) IS NULL)
	   then 'NVG' else 
              case when
	         NOT ISNUMERIC(r.result_value)=1 AND r.result_value <> 'NEG' AND
	         NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	         (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
	         ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
	      then r.result_value else 
	         case when
		    ISNUMERIC(r.result_value)=1 AND
		    NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	      	    (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
		    ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
		    CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
		    0.0 AND 
		    CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
	         then r.result_value else
		    case when r.result_value <> 'NEG' AND r.result_value <> 'POS' AND NOT ISNUMERIC(r.result_value)=1
		    then 'N/A' else '' end
		 end
	      end
	   end
	end
   end) as [abnormal],
  (case when 
	(case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
	r.result_value = 'NEG' AND 
        ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
	len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
   then r.result_value else 
        case when
	   ISNUMERIC(r.result_value)=1 AND
	   ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
	   CONVERT(decimal(10,5), r.result_value) BETWEEN 
	   CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
	   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
        then r.result_value else 
           case when
	      NOT ISNUMERIC(r.result_value)=1 AND r.result_value = 'NEG' AND
	      NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	      (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
	      ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
	   then r.result_value else 
	        case when
		   ISNUMERIC(r.result_value)=1 AND
		   NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
	      	   (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
		   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
		   CONVERT(decimal(10,5), r.result_value) BETWEEN 
		   0.0 AND 
		   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
	        then r.result_value
			else		
			case when
			r.result_value = 'NEG' AND
			(case when h.sex = 'm' then low_male else low_female end) IS NULL  AND
			(case when h.sex = 'm' then high_male else high_female end) IS NULL
			then r.result_Value else ''
			 end
		  end
       end
	end
  end) as [normal],
  ISNULL(r.range_text, '') AS range_text
from dbo.lab_result as r, dbo.lab_header as h, dbo.tl_ansi_code as c
where 
  r.lab_id_number = h.lab_id_number and 
  r.requirement_information_id = h.requirement_information_id and
  c.horl_code = r.horl_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_address as
select distinct
	p.person_id,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as residence_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as business_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as billing_country_name
from
	person p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_case_log as
select
	policy_log_id as case_log_id,
	policy_id as case_id,
	log_text,
	user_id,
	log_date
from
	policy_log

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_codes]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_codes]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view data_mart_codes as
select
	*
from
	codes_view

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_impairment as
select
	coverage_person_impairment_id as impairment_id,
	coverage_person_id as coverage_id,
	impairment_restriction_code as impairment_code,
	impairment_text
from
	coverage_person_impairment

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_phone as
select distinct
	p.person_id,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_pin,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_pin,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_pin
from
	person p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[diary_activity_proxy_view] as
select
	n.author as user_id,
	(select login_id from aus_user where user_id = n.author) as user_login_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.topic,
	p.team_id
from
	policy p,
	policy_person pp,
	person i,
	notes n
where
	n.diary_date is not NULL and
	(n.note_type='Req' or n.note_type='Refer' or n.note_type='Review') and
	p.policy_id = pp.policy_id and
	pp.person_id = i.person_id and
	pp.policy_person_id = n.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[evidence_status_view] as
select
	ri.requirement_information_id,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.added_by,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	es.evidence_status_id,
	es.insured_requirement_id,
	es.status_id,
	es.code_source,
	es.code,
	es.message_text,
	es.status_date,
	'' as last_name,
	'' as middle_name,
	'' as first_name
from
	requirement_information ri,
	evidence_status es
where
	ri.requirement_information_id = es.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[form_data_proxy_view] as
select
	fi.requirement_information_id,
	0 as team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id
union select
	fi.requirement_information_id,
	tu.team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u,
	tr_user_team tu
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id and
	tu.user_id = fi.added_by

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[form_data_view] as
select
	fi.*,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	ri.insured_requirement_id
from
	requirement_information ri,
	form_instance fi
where
	fi.requirement_information_id = ri.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[form_question_cmt_operand_view] as
select
	'getInsured.getFormQuestionComments(Form' + rtrim(form_code) + 'Question' + rtrim(question_label) + ')' as name,
	'str' as type,
	'Form ' + rtrim(form_code) + ' Question ' + rtrim(question_label) + ' (Comments)' as display,
	'Comment for Question ' + rtrim(question_label) + ': ' + rtrim(question_text) as description,
	'' as value_list
from
	form_question

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[form_question_operand_view] as
select
	'getInsured.getFormQuestionValue(Form' + rtrim(form_code) + 'Question' + rtrim(question_label) + ')' as name,
	'str' as type,
	'Form ' + rtrim(form_code) + ' Question ' + rtrim(question_label) as display,
	'Question ' + rtrim(question_label) + ': ' + rtrim(question_text) as description,
	'Answer Set ' + rtrim(answer_set_name) as value_list
from
	form_question

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[form_question_proxy_view] as
select
	grp.form_question_group_id,
	grp.form_code,
	grp.form_section_id,
	grp.display_sequence,
	grp.group_name,
	q.question_id,
	q.sequence_number,
	q.question_label,
	q.question_text,
	q.question_type,
	q.data_type,
	q.answer_set_name,
	q.min_size,
	q.max_size,
	q.external_question_number,
	q.alt_question_text
from
	form_question_group grp,
	form_question q
where
	grp.form_question_group_id = q.question_group_id and
	grp.form_code = q.form_code and
	grp.form_section_id = q.form_section_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[ins_open_post_issue_req_count] as
select
	ir.policy_person_id,
	count(ir.insured_requirement_id) as open_pi_req
from
	insured_requirement ir,
	tl_requirement t
where
	(ir.closed_disposition is null or ir.closed_disposition in ('O', 'OR', 'H', 'R')) and
	ir.requirement_code = t.requirement_code and
	t.requirement_category = 0
group by
	ir.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[insured] as
select
policy_person.policy_id,
person.*,
policy_person_insured.*,
policy_person.role_id,
policy_person.sub_role_id,
policy_person.relationship_to_insured
from
person, policy_person, policy_person_insured
where
policy_person_insured.policy_person_id = policy_person.policy_person_id and
policy_person.role_id = 'insured' and
policy_person.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[insured_cov_beneficiary_view] as
select
	coverage_person.policy_coverage_id,
	coverage_person.role_id,
	coverage_person.relationship_to_insured_code,
	coverage_person_beneficiary.*,
	person.*
from
	coverage_person_beneficiary,
	coverage_person,
	person
where
	(coverage_person.role_id = 'primarybeneficiary' or
	coverage_person.role_id = 'contigbeneficiary') and
	person.person_id = coverage_person.person_id and
	coverage_person_beneficiary.coverage_person_id = coverage_person.coverage_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[insured_coverages_view] as
select
pc.policy_coverage_id,
pc.policy_id,
pc.plan_code_id,
pc.death_benefit_option_code,
pc.purpose_of_coverage_id,
pc.coverage_type,
pc.indicator_code,
pc.amount,
pc.premium_mode,
pc.investment_objective,
pc.pref_date_of_withdrawl,
pc.planned_premium,
pc.initial_planned_premium,
pc.equivalent_age,
pc.can_take_final_action_flag,
pc.dividend_option,
pc.approved_amount,
pc.benefit_amount_basis,
pc.modal_premium_amount,
cp.person_id,
cp.role_id,
cp.relationship_to_insured_code,
cpi.*
from
policy_coverage pc,
coverage_person cp,
coverage_person_insured cpi
where
cpi.coverage_person_id = cp.coverage_person_id and
cp.policy_coverage_id = pc.policy_coverage_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW lab_comment_operand_view as
SELECT   DISTINCT 
			   'getInsured.getLabCommentsById('+  RTRIM(remark_id) +  ')' AS name, 
               'str' AS type, 
               'Lab Comment:' + RTRIM(remark_id) AS display, 
               'Lab Comment Code:' + RTRIM(remark_id) AS description, 
               '' AS value_list
FROM     dbo.lab_comment

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[lab_proxy_view] as
select
	ev.requirement_information_id,
	ev.create_date,
	ev.expiration_date,
	ev.insured_requirement_id,
	lab.lab_id_number,
	lab.lab_type_id,
	lab.drawn_date,
	lab.test_date,
	lab.last_name,
	lab.first_name,
	lab.middle_name,
	lab.ssn,
	lab.birth_date,
	lab.sex,
	lab.lab_receive_date,
	lab.company_code
from
	lab_header lab, requirement_information ev
where
	lab.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[lab_result_operand_view] as
select
	'getInsured.getLabResultValueById(' + rtrim(horl_code) + ')' as name,
	'dec' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) as display,
	(rtrim(horl_code) + ' ' + rtrim(description) + ', Male: ' + rtrim(low_male) + ' - ' + rtrim(high_male) + ' ' + rtrim(unit) + ', Female: ' + rtrim(low_female) + ' - ' + rtrim(high_female) + ' ' + rtrim(unit)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is not null
union
select
	'getInsured.getLabResultValueById(' + rtrim(horl_code) + ')' as name,
	'dec' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) as display,
	(rtrim(horl_code) + ' ' + rtrim(description)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[lab_result_text_operand_view] as
select
	'getInsured.getLabResultTextById(' + rtrim(horl_code) + ')' as name,
	'str' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) + ' (Text)' as display,
	(rtrim(horl_code) + ' ' + rtrim(description) + ' (Text), Male: ' + rtrim(low_male) + ' - ' + rtrim(high_male) +
	' ' + rtrim(unit) + ', Female: ' + rtrim(low_female) + ' - ' + rtrim(high_female) + ' ' + rtrim(unit)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is not null
union
select
	'getInsured.getLabResultTextById(' + rtrim(horl_code) + ')' as name,
	'str' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) + ' (Text)' as display,
	(rtrim(horl_code) + ' ' + rtrim(description)) + '(Text)' as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[lab_specimen_match_view] as
select
	lab_specimin_id as lab_specimen_id
from
	tl_lab_specimen
where
	can_match is not null and
	can_match <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[lab_view] as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	lab.*
from
	insured_requirement req, requirement_information ev, lab_header lab
where
	req.requirement_information_id = ev.requirement_information_id and
	ev.requirement_information_id = lab.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[log_event_view] as
select
	*
from
	aus_event
where
	aus_cmd >= 20 and aus_cmd < 30

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[ls_system_search_view] as
select p.policy_number as policy_number,
       per.last_name,
       per.first_name ,
       per.birth_date,
       per.tax_id,
      (select per2.last_name from company c, person per2 where  p.cedent_company_code = c.company_code and c.person_id = per2.person_id) as cedent_company,
         pc.approved_amount as decision_amount,
       cpi.coverage_status as action,
       cpi.perm_table_rating as rating,
      (select 'yes'from coverage_person_insured cpi2 where cpi.policy_person_id = cpi2.policy_person_id and cpi.coverage_person_id = cpi2.coverage_person_id and cpi.is_smoker = -1
       union select 'no'from coverage_person_insured cpi2 where cpi.policy_person_id = cpi2.policy_person_id and cpi.coverage_person_id = cpi2.coverage_person_id and cpi.is_smoker = 0
       )  as smoker,
       cpi.final_action_date as action_date,
       p.updated_date as policy_date,
       p.policy_status
from policy p, policy_person pp, person per, coverage_person_insured cpi, policy_coverage pc, coverage_person cp
where p.policy_id = pp.policy_id
and p.policy_id = pc.policy_id
and pp.role_id = 'insured'
and pp.person_id = per.person_id
and pc.policy_coverage_id = cp.policy_coverage_id
and cpi.coverage_person_id = cp.coverage_person_id
and pp.policy_person_id = cpi.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW marsh_data_proxy_view
as
select 
	marsh_id, 
	balance_id,
	error_count,
	SUBSTRING(marsh_record, 1, 9) as family_id, 
	SUBSTRING(marsh_record, 10, 12) as current_epsilon_key, 
	SUBSTRING(marsh_record, 22, 12) as new_epsilon_key, 
	SUBSTRING(marsh_record, 34, 1) as record_type, 
	SUBSTRING(marsh_record, 35, 12) as group_number, 
	SUBSTRING(marsh_record, 47, 2) as coverage_type, 
	SUBSTRING(marsh_record, 49, 15) as member_first_name, 
	SUBSTRING(marsh_record, 64, 30) as member_last_name, 
	SUBSTRING(marsh_record, 94, 9) as member_ssn, 
	SUBSTRING(marsh_record, 103, 8) as member_dob, 
	SUBSTRING(marsh_record, 111, 1) as relationship_code, 
	SUBSTRING(marsh_record, 112, 6) as applicant_title, 
	SUBSTRING(marsh_record, 118, 15) as applicant_first_name, 
	SUBSTRING(marsh_record, 133, 30) as applicant_last_name, 
	SUBSTRING(marsh_record, 163, 1) as applicant_middle_initial, 
	SUBSTRING(marsh_record, 164, 6) as applicant_trailing_title, 
	SUBSTRING(marsh_record, 170, 1) as applicant_sex_code, 
	SUBSTRING(marsh_record, 171, 8) as applicant_dob, 
	SUBSTRING(marsh_record, 179, 30) as applicant_address_line1, 
	SUBSTRING(marsh_record, 209, 30) as applicant_address_line2, 
	SUBSTRING(marsh_record, 239, 30) as applicant_address_line3, 
	SUBSTRING(marsh_record, 269, 20) as applicant_city, 
	SUBSTRING(marsh_record, 289, 5) as applicant_state_code, 
	SUBSTRING(marsh_record, 294, 9) as applicant_zip_code, 
	SUBSTRING(marsh_record, 303, 15) as applicant_home_phone, 
	SUBSTRING(marsh_record, 318, 15) as applicant_work_phone, 
	SUBSTRING(marsh_record, 333, 3) as applicant_height, 
	SUBSTRING(marsh_record, 336, 3) as applicant_weight, 
	SUBSTRING(marsh_record, 339, 13) as insurance_volume_applied_for, 
	SUBSTRING(marsh_record, 352, 13) as waiting_period, 
	SUBSTRING(marsh_record, 365, 8) as last_exam_date, 
	SUBSTRING(marsh_record, 373, 8) as last_blood_profile_date, 
	SUBSTRING(marsh_record, 381, 3) as mortality_rating, 
	SUBSTRING(marsh_record, 384, 4) as legal_text_id1, 
	SUBSTRING(marsh_record, 388, 4) as conditional_text_id1, 
	SUBSTRING(marsh_record, 392, 60) as explanation1_line1, 
	SUBSTRING(marsh_record, 452, 60) as explanation1_line2, 
	SUBSTRING(marsh_record, 512, 60) as explanation1_line3, 
	SUBSTRING(marsh_record, 572, 60) as explanation1_line4, 
	SUBSTRING(marsh_record, 632, 60) as explanation1_line5, 
	SUBSTRING(marsh_record, 692, 60) as explanation1_line6, 
	SUBSTRING(marsh_record, 752, 60) as explanation1_line7, 
	SUBSTRING(marsh_record, 812, 60) as explanation1_line8, 
	SUBSTRING(marsh_record, 872, 60) as explanation1_line9, 
	SUBSTRING(marsh_record, 932, 60) as explanation1_line10, 
	SUBSTRING(marsh_record, 992, 4) as legal_text_id2, 
	SUBSTRING(marsh_record, 996, 4) as conditional_text_id2, 
	SUBSTRING(marsh_record, 1000, 60) as explanation2_line1, 
	SUBSTRING(marsh_record, 1060, 60) as explanation2_line2, 
	SUBSTRING(marsh_record, 1120, 60) as explanation2_line3, 
	SUBSTRING(marsh_record, 1180, 60) as explanation2_line4, 
	SUBSTRING(marsh_record, 1240, 60) as explanation2_line5, 
	SUBSTRING(marsh_record, 1300, 60) as explanation2_line6, 
	SUBSTRING(marsh_record, 1360, 60) as explanation2_line7, 
	SUBSTRING(marsh_record, 1420, 60) as explanation2_line8, 
	SUBSTRING(marsh_record, 1480, 60) as explanation2_line9, 
	SUBSTRING(marsh_record, 1540, 60) as explanation2_line10, 
	SUBSTRING(marsh_record, 1600, 4) as legal_text_id3, 
	SUBSTRING(marsh_record, 1604, 4) as conditional_text_id3, 
	SUBSTRING(marsh_record, 1608, 60) as explanation3_line1, 
	SUBSTRING(marsh_record, 1668, 60) as explanation3_line2, 
	SUBSTRING(marsh_record, 1728, 60) as explanation3_line3, 
	SUBSTRING(marsh_record, 1788, 60) as explanation3_line4, 
	SUBSTRING(marsh_record, 1848, 60) as explanation3_line5, 
	SUBSTRING(marsh_record, 1908, 60) as explanation3_line6, 
	SUBSTRING(marsh_record, 1968, 60) as explanation3_line7, 
	SUBSTRING(marsh_record, 2028, 60) as explanation3_line8, 
	SUBSTRING(marsh_record, 2088, 60) as explanation3_line9, 
	SUBSTRING(marsh_record, 2148, 60) as explanation3_line10
from
	marsh_data

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[mib_proxy_view] as
select
	mib.*,
	ev.expiration_date,
	ev.create_date,
	ev.person_id,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id
from
	mib_header mib, requirement_information ev
where
	mib.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[mib_view] as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	mib.*
from
	insured_requirement req, requirement_information ev, mib_header mib
where
	req.insured_requirement_id = ev.insured_requirement_id and
	ev.requirement_information_id = mib.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[mvr_proxy_view] as
select
	mvr.*,
	ev.expiration_date,
	ev.create_date,
	ev.insured_requirement_id
from
	mvr_header mvr, requirement_information ev
where
	mvr.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[mvr_view] as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	mvr.*
from
	insured_requirement req, requirement_information ev, mvr_header mvr
where
	req.requirement_information_id = ev.requirement_information_id and
	ev.requirement_information_id = mvr.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[owner_view] as
select
policy_person.policy_id,
policy_person.policy_person_id,
policy_person.relationship_to_insured,
policy_person.role_id,
policy_person.sub_role_id,
person.*
from
person,
policy_person
where
policy_person.person_id = person.person_id and
policy_person.role_id = 'owner'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[paramed_view] as
select
	p.*,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	ri.insured_requirement_id
from
	requirement_information ri,
	paramed p
where
	p.requirement_information_id = ri.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[party_proxy_person_view] as
select
  '' as case_party_id,
  '' as case_id,
  '' as party_type,
  '' as relation,
  '' as case_group_id,
  person.*
from
  person
where
  (person_type_id is null or person_type_id <> 'Company')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[party_proxy_view] as
SELECT     policy_person.policy_person_id AS case_party_id, policy_person.policy_id AS case_id, policy_person.role_id AS party_type, 
                      policy_person.relationship_to_insured AS relation, policy.case_group_id, person.person_id, person.party_id, person.last_name, person.first_name, 
                      person.middle_name, person.birth_name, person.title, person.suffix, person.tax_id, person.tax_type_id, person.birth_date, person.sex, 
                      person.person_type_id, person.preferred_language_code, person.email_address, person.marital_status, person.client_id, person.alt_email_address, 
                      person.preferred_contact_mode, person.class_type, person.field1, person.field2, person.field3, person.field4, person.field5,
                          (SELECT     primary_insured_flag
                            FROM          policy_person_insured
                            WHERE      (policy_person_id = policy_person.policy_person_id)) AS primary_flag
FROM         policy INNER JOIN
                      policy_person ON policy.policy_id = policy_person.policy_id INNER JOIN
                      person ON policy_person.person_id = person.person_id
WHERE     (person.person_type_id IS NULL) OR
                      (person.person_type_id <> 'Company')
UNION
SELECT     coverage_person.coverage_person_id AS case_party_id, policy_coverage.policy_id AS case_id, coverage_person.role_id AS party_type, 
                      coverage_person.relationship_to_insured_code AS relation, policy_1.case_group_id, person_1.person_id, person_1.party_id, person_1.last_name, 
                      person_1.first_name, person_1.middle_name, person_1.birth_name, person_1.title, person_1.suffix, person_1.tax_id, person_1.tax_type_id, 
                      person_1.birth_date, person_1.sex, person_1.person_type_id, person_1.preferred_language_code, person_1.email_address, person_1.marital_status, 
                      person_1.client_id, person_1.alt_email_address, person_1.preferred_contact_mode, person_1.class_type, person_1.field1, person_1.field2, 
                      person_1.field3, person_1.field4, person_1.field5, 0 AS primary_flag
FROM         person AS person_1 INNER JOIN
                      coverage_person ON person_1.person_id = coverage_person.person_id INNER JOIN
                      policy_coverage ON coverage_person.policy_coverage_id = policy_coverage.policy_coverage_id INNER JOIN
                      policy AS policy_1 ON policy_coverage.policy_id = policy_1.policy_id
WHERE     (coverage_person.role_id IS NULL OR
                      coverage_person.role_id <> 'insured') AND (person_1.person_type_id IS NULL OR
                      person_1.person_type_id <> 'Company')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[party_relation_view] as
select pr.parent_id ,p.*
from party_relation pr, person p
where pr.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[party_requirement_view] as
select
	p.party_id,
	ir.policy_person_id,
	ir.insured_requirement_id,
	ir.ordered_date,
	ir.manual_or_automatic_entry,
	ir.requirement_code,
	ir.provider,
	ir.evidence_type,
	ir.provider_order_id,
	'' as closed_date
from
	person p,
	policy_person pp,
	insured_requirement ir
where
	p.person_id = pp.person_id and
	ir.policy_person_id = pp.policy_person_id and
	ir.provider_order_id is null
union
select
	p.party_id,
	ir.policy_person_id,
	ir.insured_requirement_id,
	ir.ordered_date,
	ir.manual_or_automatic_entry,
	ir.requirement_code,
	ir.provider,
	ir.evidence_type,
	ir.provider_order_id,
	po.closed_date
from
	person p,
	policy_person pp,
	insured_requirement ir,
	provider_order po
where
	p.person_id = pp.person_id and
	ir.policy_person_id = pp.policy_person_id and
	po.provider_order_id = ir.provider_order_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[party_view] as
select * from person where class_type is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[payor_view] as
select
policy_person.policy_id,
policy_person.policy_person_id,
policy_person.relationship_to_insured,
policy_person.role_id,
policy_person.sub_role_id,
person.*
from
person,
policy_person
where
policy_person.person_id = person.person_id and
policy_person.role_id = 'payor'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW person_role_view
AS
  SELECT person_id,
         role_id,
         'policy_person' AS table_name
  FROM   policy_person
  UNION ALL
  SELECT person_id,
         role_id,
         'coverage_person' AS table_name
  FROM   coverage_person
  WHERE  role_id <> 'insured'
  UNION ALL
  SELECT person_id,
         'benefitParty'            AS role_id,
         'coverage_benefits_party' AS table_name
  FROM   coverage_benefits_party
  UNION ALL
  SELECT person_id,
         'company' AS role_id,
         'company' AS table_name
  FROM   company
  UNION ALL
  SELECT person_id,
         'user'     AS role_id,
         'aus_user' AS table_name
  FROM   aus_user
  UNION ALL
  SELECT person_id,
         'agent'   AS role_id,
         'agent'   AS table_name
  FROM   agent
  UNION ALL
  SELECT person_id,
         'agency'  AS role_id,
         'agency'  AS table_name
  FROM   agency
  UNION ALL
  SELECT person_id,
         'tpa'     AS role_id,
         'tpa'     AS table_name
  FROM   tpa

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW plan_association_codes_view as
select distinct 'plan_code_' + ap.association_code as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code, ap.association_code, 1 as active_flag
	from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id
union
select distinct 'plan_code_' + ap.association_code as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + rtrim(pc.description) + ' (Inactive)' as code_value, pc.line_of_business_code as external_code, ap.association_code, 0 as active_flag
	from tl_plan_code pc, association_plan ap where (ap.expiration_date <= CURRENT_TIMESTAMP and ap.expiration_date is not NULL) and
	pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW plan_gnum_assoc_codes_view as
select distinct 'plan_gnum_' + ap.association_code as code_type, rtrim(pc.plan_code_id) + '/' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code,
	ap.association_code, 1 as active_flag from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id
union
select distinct 'plan_gnum_' + ap.association_code as code_type, rtrim(pc.plan_code_id) + '/' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description + ' (Inactive)' as code_value,
	pc.line_of_business_code as external_code, ap.association_code, 0 as active_flag
	from tl_plan_code pc, association_plan ap where (ap.expiration_date <= CURRENT_TIMESTAMP and
	ap.expiration_date is not NULL) and pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW plan_gnum_lob_assoc_codes_view as
select distinct 'plan_gnum_' + rtrim(lb.line_of_business_code) + '_' + ap.association_code as code_type, rtrim(pc.plan_code_id) + '/' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code, ap.association_code, 1 as active_flag
	from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'plan_gnum_' + rtrim(lb.line_of_business_code) + '_'  + ap.association_code as code_type, rtrim(pc.plan_code_id) + '/' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description + ' (Inactive)' as code_value, pc.line_of_business_code as external_code,
	ap.association_code, 0 as active_flag from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date <= CURRENT_TIMESTAMP and
	ap.expiration_date is not NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[policy_proxy_view] as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.primary_insured_flag,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	p.alternate_case_id,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[portal_policy_proxy_view] as
select
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	(select top 1 a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null) as agent_number,
	(select top 1 a.agency_number from agency a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agency_number is not null) as agency_number,
	(select top 1 rtrim(b.last_name) from person b, agent c where b.person_id = c.person_id and c.agent_number in (select a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null)) as agent_lastname,
	(select top 1 rtrim(b.first_name) from person b, agent c where b.person_id = c.person_id and c.agent_number in (select a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null)) as agent_firstname,
	pp.policy_person_id,
	rtrim(i.last_name) as insured_last_name,
        rtrim(i.first_name) as insured_first_name,
	p.receive_date,
	p.application_number,
	p.underwriter_id,
	(select rtrim (u.last_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_last_name,
	(select rtrim (u.first_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_first_name,
	(select count(*) from insured_requirement ir, tl_requirement  tr
	 where pp.policy_person_id = ir.policy_person_id and (ir.requirement_code = tr.requirement_code and tr.requirement_category = 0))
	 as pi_req,
	(select count(*) from insured_requirement ir, tl_requirement  tr
	 where pp.policy_person_id = ir.policy_person_id and (ir.closed_disposition is null or ir.closed_disposition <> 'S' )
	 and (ir.requirement_code = tr.requirement_code and tr.requirement_category = 0))
	 as open_pi_req
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[product_assoc_gnum_lob_view] as
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type,
	pc.plan_code_id as code_id,
	rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, 1 as active_flag
	from association_plan ap, line_of_business lb, tl_plan_code pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id and
	lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type,
	pc.plan_code_id as code_id,
	rtrim( pc.plan_code_id ) + '-' + 'Inactive' + pc.description as code_value, 0 as active_flag
	from association_plan ap, line_of_business lb, tl_plan_code pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id and
	lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW product_association_gnum_lob_view as
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type, 
	pc.plan_code_id as code_id, 
	rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, 1 as active_flag 
	from association_plan as ap, line_of_business as lb, tl_plan_code as pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and 
	pc.plan_code_id = ap.plan_code_id and 
	lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type, 
	pc.plan_code_id as code_id, 
	rtrim( pc.plan_code_id ) + '-' + 'Inactive' + pc.description as code_value, NULL as active_flag  
	from association_plan as ap, line_of_business as lb, tl_plan_code as pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and 
	pc.plan_code_id = ap.plan_code_id and 
	lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ratable_occupations_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[ratable_occupations_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view [dbo].[ratable_occupations_view] as
select
	code_value
from
	codes_view
where
	code_type = 'occupation' and
	external_code is not null and
	external_code <> '0'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[recent_cases_proxy_view] as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	rc.user_id,
	(select login_id from aus_user where user_id = rc.user_id) as user_login_id,
	rc.date_time as access_date_time,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	aus_user_recent_files rc
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	rc.policy_id = p.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[recommended_requirements_view] as
select
	te_rulebook.rulebook_id,
	tr_plan_code_rulebook.plan_code_id,
	ta_face_amount_band.face_amount_from,
	ta_face_amount_band.face_amount_to,
	ta_age_band.age_from,
	ta_age_band.age_to,
	tl_requirement.*
from
	te_rulebook,
	tr_plan_code_rulebook,
	ta_face_amount_band,
	ta_age_band,
	tr_age_face_amount_requirement,
	tr_group_requirements,
	tl_requirement,
	tl_requirement_group
where
	tr_plan_code_rulebook.rulebook_id = te_rulebook.rulebook_id and
	ta_face_amount_band.rulebook_id = te_rulebook.rulebook_id and
	ta_age_band.rulebook_id = te_rulebook.rulebook_id and
	tr_age_face_amount_requirement.rulebook_id = te_rulebook.rulebook_id and
	tr_age_face_amount_requirement.age_band_seq_no = ta_age_band.age_band_seq_no and
	tr_age_face_amount_requirement.face_amount_seq_no = ta_face_amount_band.face_amount_seq_no and
	tr_group_requirements.requirement_group_id = tr_age_face_amount_requirement.requirement_group_id and
	tl_requirement.requirement_code = tr_group_requirements.requirement_code and
	tl_requirement_group.requirement_group_id = tr_group_requirements.requirement_group_id and
	tl_requirement_group.is_active is not null and
	tl_requirement_group.is_active <> 0 and
	tl_requirement.is_active is not null and
	tl_requirement.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[referral_proxy_view] as
select
	n.note_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.author as author_id,
	(select login_id from aus_user where user_id = n.author) as author_login_id,
	n.refer_to_user_id as referred_to_id,
	(select login_id from aus_user where user_id = n.refer_to_user_id) as referred_to_login_id,
	n.topic,
	p.team_id
from
	notes n,
	policy_person pp,
	policy p,
	person i
where
	n.refer_to_user_id > 0 and
	n.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id and
	pp.person_id = i.person_id and
	n.diary_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[req_exists_operand_view] as
select
	'getInsured.requirementExists(' + rtrim(requirement_code) + ')' as name,
	'bool' as type,
	'Requirement ' + rtrim(requirement_code) + ' Exists' as display,
	'Determines if ' + rtrim(requirement_name) + ' Requirement exists on the Applicant.'  as description,
	'Boolean' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[req_status_operand_view] as
select
	'getInsured.requirementStatus(' + rtrim(requirement_code) + ')' as name,
	'string' as type,
	'Requirement ' + rtrim(requirement_code) + ' Status' as display,
	'Status of ' + rtrim(requirement_name) + ' Requirement on the Applicant.'  as description,
	'RequirementStatus' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW requirement_exists_operand_view as
select 
	'getInsured.requirementExists(' + rtrim(requirement_code) + ')' as name,
	'bool' as type,
	'Requirement ' + rtrim(requirement_code) + ' Exists' as display,
	'Determines if ' + rtrim(requirement_name) + ' Requirement exists on the Applicant.'  as description,
	'Boolean' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_group_requirements] as
select
	tl_requirement_group.requirement_group_id,
	tl_requirement_group.name as requirement_group_name,
	tl_requirement.*
from
	tl_requirement,
	tr_group_requirements,
	tl_requirement_group
where
	tr_group_requirements.requirement_code = tl_requirement.requirement_code and
	tl_requirement_group.requirement_group_id = tr_group_requirements.requirement_group_id and
	tl_requirement.is_active is not null and tl_requirement.is_active <> 0 and
	tl_requirement_group.is_active is not null and tl_requirement_group.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_open_operand_view] as
select
	'getInsured.requirementIsOpen(' + rtrim(requirement_code) + ')' as name,
	'bool' as type,
	'Requirement ' + rtrim(requirement_code) + ' Is Open' as display,
	'Determines if ' + rtrim(requirement_name) + ' Requirement is open on the Applicant.'  as description,
	'Boolean' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_proxy_view] as
select
	t.requirement_name,
	t.alt_lang,
	t.alt_name,
	t.default_ordered_by,
	ir.requirement_code,
	t.requirement_type_id,
	t.requirement_category,
	ir.followup_date,
	ir.closed_date,
	ir.received_date,
	ir.ordered_date,
	ir.ordered_by,
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	ir.insured_requirement_id,
	ir.closed_disposition,
	ir.requirement_information_id,
	ir.last_followup_date,
	ir.provider,
	ir.evidence_type,
	pp.policy_person_id,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.birth_date,
	i.tax_id,
	p.team_id,
	ir.manual_or_automatic_entry,
	ir.new_business_until_closed,
	ir.provider_order_id,
	ir.create_comment
from
	policy p,
	policy_person pp,
	person i,
	insured_requirement ir,
	tl_requirement t
where
	p.policy_id = pp.policy_id AND
	pp.person_id = i.person_id AND
	pp.policy_person_id = ir.policy_person_id AND
	ir.requirement_code = t.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_view] as
select
insured_requirement.*
from
insured_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[review_message_proxy_view] as
select
	p.policy_id,
	p.policy_number,
	rtrim(per.last_name) as applicant_last_name,
	rtrim(per.first_name) as applicant_first_name,
	rm.message_type,
	rm.origin_code,
	SUBSTRING(rm.message, 1, 50) as review_message_text,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	rm.user_role_type
from
	review_message rm,
	policy p,
	policy_person pp,
	person per
where
	p.policy_id = rm.policy_id and
	pp.policy_person_id = rm.policy_person_id and
	pp.person_id = per.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[role_privilege_view] as
select
	arp.role_id,
	arp.restriction_level,
	asp.privilege_id,
	asp.name,
	asp.description,
	asp.is_active,
	asp.subsystem_name
from
	aus_role_privilege arp,
	aus_security_privilege asp
where
	arp.privilege_id = asp.privilege_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[role_view] as
select
	aus_security_roles.*
from
	aus_security_roles
where
	role_id > -1 and
	(deleted is null or deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[rulebook_item_view] as
	select
		'' as plan_code_id,
		rb.*
	from
		te_rulebook rb

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[rulebook_proxy_view] as
	select
		rb.association_code,
		rb.effective_date,
		rb.rulebook_id,
		rb.rulebook_name,
		rb.description,
		rb.is_active,
		rb.added_date,
		rb.added_by,
		rb.update_date,
		rb.updated_by,
		rb.type
	from
		te_rulebook rb

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[rulebook_rate_class] as
select distinct
	'smok_rate_class_' + rb.rulebook_name as code_type,
	cast(rc.sequence_no as char(30)) as code_id,
	rc.description as code_value,
	'' as external_code
from
	te_rulebook rb,
	ta_rate_table_class rc
where
	rb.rulebook_id = rc.rulebook_id and
	rc.smoking_class is not null and rc.smoking_class <> '0'
union
select distinct
	'rate_class_' + rb.rulebook_name as code_type,
	cast(rc.sequence_no as char(30)) as code_id,
	rc.description as code_value,
	'' as external_code
from
	te_rulebook rb,
	ta_rate_table_class rc
where
	rb.rulebook_id = rc.rulebook_id and
	(rc.smoking_class is null or rc.smoking_class = '0')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[rulebook_view] as
	select
		pc.plan_code_id,
		rb.*
	from
		te_rulebook rb,
		tr_plan_code_rulebook pc
	where
		rb.rulebook_id = pc.rulebook_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[service_associate_alpha_range] as
select
  from_string,
  to_string as up_to_string,
  service_associate_login_id as item_id
from
  service_associate_range

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW sserror_view
as
select
	code_id as error_cd, 
	code_value as reason
from
	tl_code
where
	(code_type = 'marsh_error_code')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[team_view] as
select
	team.*
from
	team
where
	(deleted is null or deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[teams_users_view] as
select
	tr_user_team.team_id,
	tr_user_team.auto_assign,
	aus_user.*
from
	tr_user_team,
	aus_user
where
	tr_user_team.user_id = aus_user.user_id and
	(aus_user.deleted is null or aus_user.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[tpa_view] as
select
	t.tpa_code,
	t.tpa_short_name,
	t.contact_last_name,
	t.contact_first_name,
	t.auto_closure_days,
	t.expiration_date,
	p.*
from
	tpa t,
	person p
where
	t.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[unchecked_rvw_msg_count] as
select
 rm.policy_person_id,
 count(rm.review_message_id) as unchk_rvw_count
from
 review_message rm
where
 rm.message_type = '0' and
 (rm.user_role_type is null or rm.user_role_type != 'CM')
group by
 rm.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[user_teams_view] as
select
	tr_user_team.user_id,
	tr_user_team.auto_assign,
	team.*
from
	tr_user_team,
	team
where
	tr_user_team.team_id = team.team_id and
	(team.deleted is null or team.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_evidence as
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	cast(lab.lab_id_number as int) as evidence_id,
	'LAB' as requirement_type_id,
	dbo.clrLSDecrypt(lab.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(lab.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(lab.ssn,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as ssn,
	cast(dbo.clrLSDecrypt(lab.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date
from
	lab_header lab, requirement_information ev
where
	lab.requirement_information_id = ev.requirement_information_id
union
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	mvr.mvr_header_id as evidence_id,
	'MVR' as requirement_type_id,
	dbo.clrLSDecrypt(mvr.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(mvr.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(mvr.soc_sec_no,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as ssn,
	cast(dbo.clrLSDecrypt(mvr.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date
from
	mvr_header mvr, requirement_information ev
where
	mvr.requirement_information_id = ev.requirement_information_id
union
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	mib.mib_header_id as evidence_id,
	'MIB' as requirement_type_id,
	dbo.clrLSDecrypt(mib.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(mib.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	'' as ssn,
	cast(dbo.clrLSDecrypt(mib.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date
from
	mib_header mib, requirement_information ev
where
	mib.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_lab_result as
select 
	p.policy_number,
	lh.lab_receive_date,
	dbo.clrLSDecrypt(lh.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(lh.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	cast(dbo.clrLSDecrypt(lh.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	insured_requirement ir,
	tl_ansi_code ac,
	policy_person pp,
	policy p
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id = ir.requirement_information_id and
	ir.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id
union
select 
	' ' as policy_number,
	lh.lab_receive_date,
	dbo.clrLSDecrypt(lh.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(lh.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	cast(dbo.clrLSDecrypt(lh.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	tl_ansi_code ac
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id not in (select requirement_information_id from insured_requirement where requirement_information_id is not null)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[reviewer_proxy_view] as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = ppi.policy_person_id) as final_disposition_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	team t
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null and
	ppi.policy_person_id in (select policy_person_id from insured_requirement where policy_person_id = ppi.policy_person_id and requirement_code = 'TBRVWD' and (closed_disposition is null or closed_disposition in ('O', 'OR', 'H')))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_association_plan as
select
	a.name as association_name,
	ap.association_code,
	ap.plan_code_id,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = ap.tpa_code
	) as tpa_code,
	ap.g_number,
	ap.mortality_max,
	ap.auto_approve_requires_member,
	ap.underwrite_child,
	ap.spouse_can_exceed_member,
	ap.allow_jet_issue,
	ap.billing_code,
	ap.expiration_date
from
	association_plan ap,
	association a
where
	a.association_code = ap.association_code and
	a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select
	dbo.clrLSDecrypt(p.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as association_name,
	ap.association_code,
	ap.plan_code_id,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = ap.tpa_code
	) as tpa_code,
	ap.g_number,
	ap.mortality_max,
	ap.auto_approve_requires_member,
	ap.underwrite_child,
	ap.spouse_can_exceed_member,
	ap.allow_jet_issue,
	ap.billing_code,
	ap.expiration_date
from
	association_plan ap,
	company c,
	person p
where
	c.company_code = ap.association_code and
	p.person_id = c.person_id and
	(p.class_type = 'ASSN' or p.class_type = 'GRP')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[cases_to_issue_view] AS
SELECT p.company_code,
       p.policy_id,
       p.policy_number,
       p.priority,
       p.policy_status_code,
       p.policy_status_date,
       p.case_group_id,
       p.association_code,
       ppi.applicant_status        AS applicant_status_short,
       ppi.applicant_status_date,
       (SELECT TOP ( 1 ) pc.plan_code_id
        FROM   policy_coverage AS pc
               INNER JOIN coverage_person AS cp
                 ON pc.policy_coverage_id = cp.policy_coverage_id
        WHERE  (cp.person_id = pp.person_id)) AS primary_plan_code,
       ppi.is_member,
       ppi.adverse_history,
       pp.policy_person_id,
       pp.relationship_to_insured,
       i.party_id,
       i.title                     AS insured_title,
       i.last_name                 AS insured_last_name,
       i.middle_name               AS insured_middle_name,
       i.first_name                AS insured_first_name,
       i.suffix                    AS insured_suffix,
       i.tax_id                    AS insured_tax_id,
       i.birth_date                AS insured_birth_date,
       i.client_id                 AS insured_client_id,
       ppi.primary_insured_flag,
       ppi.underwriting_amount     AS insured_underwriting_amount,
       p.application_date,
       p.application_number,
       p.added_date,
       p.receive_date,
       ppi.reopen_date,
       p.underwriter_id,
       (SELECT login_id
        FROM   aus_user
        WHERE  (user_id = p.underwriter_id)) AS underwriter_login_id,
       p.team_id,
       p.service_associate_id,
       (SELECT login_id
        FROM   aus_user AS aus_user_1
        WHERE  (user_id = p.service_associate_id)) AS service_associate_login_id,
       p.tpa_code,
       p.cedent_policy_number,
       p.cedent_company_code,
       p.cedent_underwriter_id,
       p.cedent_contact_id,
       p.cedent_date_sent,
       p.international_or_domestic,
       p.idb_flag,
       p.currency_code,
       p.employer_id,
       ir.open_pi_req,
	   (SELECT unchk_rvw_count
        FROM   unchecked_rvw_msg_count
        WHERE  (policy_person_id = pp.policy_person_id)) AS uw_rm_count
FROM   ins_open_post_issue_req_count AS ir
       INNER JOIN policy_person AS pp
         ON ir.policy_person_id = pp.policy_person_id
       INNER JOIN policy AS p
         ON pp.policy_id = p.policy_id
       INNER JOIN policy_person_insured AS ppi
         ON pp.policy_person_id = ppi.policy_person_id
       INNER JOIN person AS i
         ON pp.person_id = i.person_id
WHERE  (p.policy_status_code = 'Closed')
       AND (ppi.applicant_status = 'AP')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[policy_by_product_proxy_view]
AS
  SELECT p.company_code,
         p.policy_id,
         p.policy_number,
         p.priority,
         p.policy_status_code,
         p.policy_status_date,
         p.case_group_id,
         p.association_code,
         ppi.applicant_status        AS applicant_status_short,
         ppi.applicant_status_date,
         pc.plan_code_id,
         cpi.g_number,
         ppi.is_member,
         ppi.adverse_history,
         pp.policy_person_id,
         pp.relationship_to_insured,
         i.party_id,
         i.title                     AS insured_title,
         i.last_name                 AS insured_last_name,
         i.middle_name               AS insured_middle_name,
         i.first_name                AS insured_first_name,
         i.suffix                    AS insured_suffix,
         i.tax_id                    AS insured_tax_id,
         i.birth_date                AS insured_birth_date,
         i.client_id                 AS insured_client_id,
         ppi.underwriting_amount     AS insured_underwriting_amount,
         p.application_date,
         p.application_number,
         p.added_date,
         p.receive_date,
         ppi.reopen_date,
         p.last_underwrite_date,
         p.agent_signed_date,
         p.requested_issue_date,
         cpi.final_action_date,
         p.underwriter_id,
         p.team_id,
         p.service_associate_id,
         p.tpa_code,
         p.cedent_policy_number,
         p.cedent_company_code,
         p.cedent_underwriter_id,
         p.cedent_contact_id,
         p.cedent_date_sent,
         p.international_or_domestic,
         p.idb_flag,
         p.currency_code,
         p.employer_id,
         p.alternate_case_id,
         p.source_info,
         p.distributor_code,
         agt.agent_number,
         agy.agency_number
  FROM   policy AS p
         INNER JOIN policy_person AS pp
           ON pp.policy_id = p.policy_id
         INNER JOIN policy_person_insured AS ppi
           ON ppi.policy_person_id = pp.policy_person_id
         INNER JOIN person AS i
           ON i.person_id = pp.person_id
         INNER JOIN coverage_person_insured AS cpi
           ON cpi.policy_person_id = ppi.policy_person_id
         INNER JOIN coverage_person AS cp
           ON cp.coverage_person_id = cpi.coverage_person_id
         INNER JOIN policy_coverage AS pc
           ON pc.policy_coverage_id = cp.policy_coverage_id
         LEFT OUTER JOIN agent_view AS agt
           ON p.policy_id = agt.policy_id
         LEFT OUTER JOIN agency_view AS agy
           ON p.policy_id = agy.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[tpa_codes_view] as
select 'tpa' as code_type, tpa_code as code_id, last_name as code_value, cast(person_id as char(30)) as external_code, 1 as active_flag from tpa_view
	where expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL
union
select 'tpa' as code_type, tpa_code as code_id, rtrim(last_name) + ' (Inactive)' as code_value, cast(person_id as char(30)) as external_code, 0 as active_flag from tpa_view
	where expiration_date <= CURRENT_TIMESTAMP and expiration_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_order_report_view] as
select
	pol.policy_number,
	pol.case_group_id as family_id,
	ir.insured_requirement_id,
	ir.requirement_code,
	ir.provider,
	ir.ordered_date,
	ir.closed_disposition,
	dbo.clrLSDecrypt(per.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(per.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	per.sex,
	cast(dbo.clrLSDecrypt(per.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	icv.g_number,
	icv.amount as coverage_amount
from
	insured_requirement ir,
	insured_coverages_view icv,
	person per,
	policy pol
where
	ir.policy_person_id = icv.policy_person_id and
	icv.policy_id = pol.policy_id and
	icv.person_id = per.person_id and
	ir.ordered_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[requirement_status_report_view] as
select
	pol.policy_number,
	pol.case_group_id as family_id,
	ir.insured_requirement_id,
	ir.requirement_code,
	ir.provider,
	ir.ordered_date,
	ir.closed_disposition,
	es.evidence_status_id,
	es.code as status_code,
	es.status_date,
	dbo.clrLSDecrypt(per.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(per.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	per.sex,
	cast(dbo.clrLSDecrypt(per.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	icv.g_number,
	icv.amount as coverage_amount
from
	evidence_status es,
	insured_requirement ir,
	insured_coverages_view icv,
	person per,
	policy pol
where
	es.evidence_status_id = (select
								max(evidence_status.evidence_status_id)
				 			 from
								evidence_status
				 			 where
								evidence_status.insured_requirement_id = ir.insured_requirement_id
							 ) and
	ir.insured_requirement_id = es.insured_requirement_id and
	ir.policy_person_id = icv.policy_person_id and
	icv.policy_id = pol.policy_id and
	icv.person_id = per.person_id and
	ir.ordered_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_privilege as
select
	role_id,
	restriction_level,
	privilege_id,
	name,
	description,
	is_active,
	subsystem_name
from
	role_privilege_view

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_team as
select
	utv.user_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(p.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(p.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	aus_user u, person p
	 where
	 	u.user_id = utv.user_id and
	 	p.person_id = u.person_id
	) as user_name,
	utv.auto_assign,
	utv.team_id,
	utv.team_name,
	utv.description,
	utv.is_active
from
	user_teams_view utv

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			/****** Object:  View [dbo].[codes_view]    Script Date: 11/12/2008 15:21:33 ******/
ALTER VIEW codes_view as
select 'en-us' as language_code, 'mib_country' as code_type, country_id as code_id, country_name as code_value, mib_country as external_code from tl_country
union
select lang.code_value as language_code, 'mib_country' as code_type, country_id as code_id, alt_country_name as code_value, mib_country as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'policy_type' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is not null
union
select 'en-us' as language_code, 'policy_type' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is null
union
select 'en-us' as language_code, 'billing_code' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is not null and g_number != ''
union
select 'en-us' as language_code, 'billing_code' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is null or g_number = ''
union
select 'en-us' as language_code, 'country' as code_type, country_id as code_id, country_name as code_value, country_code as external_code from tl_country
union
select lang.code_value as language_code, 'country' as code_type, country_id as code_id, alt_country_name as code_value, country_code as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'lab_request' as code_type, request_code as code_id, description as code_value, '' as external_code from tl_lab_request
union
select 'en-us' as language_code, 'lab_specimen' as code_type, lab_specimin_id as code_id, description as code_value, '' as external_code from tl_lab_specimen
union
select 'en-us' as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + description as code_value, line_of_business_code as external_code from tl_plan_code
union
select alt_lang as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + alt_description as code_value, line_of_business_code as external_code from tl_plan_code where alt_lang is not null and alt_lang <> 'en-us'
union
select 'en-us' as language_code, 'requirement_group' as code_type, cast(requirement_group_id as char(30)) as code_id, name as code_value, '' as external_code from tl_requirement_group
union
select 'en-us' as language_code, 'subaccount' as code_type, subaccount_code as code_id, full_name as code_value, '' as external_code from tl_subaccount
union
select 'en-us' as language_code, 'country_state' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state
union
select lang.code_value as language_code, 'country_state' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_usa' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'USA'
union
select lang.code_value as language_code, 'country_state_usa' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'USA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_canada' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'CANADA'
union
select lang.code_value as language_code, 'country_state_canada' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'CANADA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'ansi_code' as code_type, horl_code as code_id, description as code_value, ansi as external_code from tl_ansi_code
union
select 'en-us' as language_code, 'agency' as code_type, cast(agency.person_id as char(30)) as code_id, person.last_name as code_value, agency.agency_number as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'agent' as code_type, cast(agent.person_id as char(30)) as code_id, person.last_name as code_value, agent.agent_number as external_code from agent, person where person.person_id = agent.person_id
union
select 'en-us' as language_code, 'agent_name' as code_type, (rtrim(agent_number) + '_' + cast(person.person_id as char(12))) as code_id, person.last_name as code_value, person.first_name as external_code from agent, person where agent_number is not null and person.person_id = agent.person_id
union
select 'en-us' as language_code, 'company' as code_type, company.company_code as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select 'en-us' as language_code, 'company_name' as code_type, person.last_name as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select alt_lang as language_code, 'requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null
union
select 'en-us' as language_code, 'requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is null or alt_lang <> 'en-us'
union
select alt_lang as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null and requirement_category = 0
union
select 'en-us' as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where (alt_lang is null or alt_lang <> 'en-us') and requirement_category = 0
union
select 'en-us' as language_code, code_type as code_type, cast(code_id as char(30)) as code_id, code_value as code_value, external_code as external_code from tl_acord_codes where code_type <> 'AUS Gender Type' and code_type <> 'ALFA Gender Type'
union
select 'en-us' as language_code, code_type as code_type, cast(external_code as char(30)) as code_id, code_value as code_value, cast(code_id as char(30)) as external_code from tl_acord_codes where code_type = 'AUS Gender Type'
union
SELECT     'en-us' AS language_code, code_type, CAST(external_code AS char(30)) AS code_id, code_value, CAST(code_id AS char(30)) AS external_code
FROM         tl_acord_codes
WHERE     (code_type = 'ALFA Gender Type')
union
select distinct 'en-us' as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where (lang.code_value is not null and lang.code_value <> '')
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null and (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null
union
select distinct 'en-us' as language_code, 'final_action_reason' as code_type, reason_text as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason where reason_code is not null
union
select distinct lang.code_value as language_code, 'final_action_reason' as code_type, alt_reason_text  as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and reason_code is not null and alt_reason_text is not null
union
select language_code, code_type, code_id, code_value, external_code from tl_code where code_type <> 'CaseOne'
union
select language_code, code_type, upper(code_id), code_value, external_code from tl_code where code_type = 'CaseOne'
union
select 'en-us' as language_code, 'tpa' as code_type, t.tpa_code as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_tpa' as code_type, t.tpa_code as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p
where t.person_id = p.person_id and (t.expiration_date > CURRENT_TIMESTAMP or t.expiration_date is NULL)
union
select 'en-us' as language_code, 'line_of_business' as code_type, line_of_business_code as code_id, name as code_value, line_of_business_code as external_code from line_of_business
union
select 'en-us' as language_code, 'association_code' as code_type, association_code as code_id, association_code as code_value, cast(expiration_date as char(30)) as external_code from association
union
select 'en-us' as language_code, 'active_association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
where (expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL) and association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'active_association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
where c.person_id = p.person_id and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL) and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select 'en-us' as language_code, 'association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
from association a, association_plan ap where (a.expiration_date > CURRENT_TIMESTAMP or a.expiration_date is NULL) and
a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
from company c, person p, association_plan ap where (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL) and
c.company_code = ap.association_code and c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
from association a, association_plan ap where a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
from company c, person p, association_plan ap where c.company_code = ap.association_code and c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' +  lower(rtrim(ltrim(ap.association_code))) + '_' +  lower(rtrim(lb.line_of_business_code) ) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'lifesuite_version' as code_type, 'version' as code_id, lifesuite_version as code_value, '' as external_code from lifesuite_version
union
select 'en-us' as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, impairment_text as code_value, '' as external_code from impairment_restriction
union
select lang.code_value as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, alt_impairment_text as code_value, '' as external_code from impairment_restriction, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_impairment_text is not null and rtrim(alt_impairment_text) <> ''
union
select 'en-us' as language_code, 'provider' as code_type, rtrim(provider) + '_' + rtrim(evidence_type) as code_id, us_vendor as code_value, non_us_vendor as external_code from provider
union
select distinct 'en-us' as language_code, 'g_number' as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code
from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code and ap.g_number is not null
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '__' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code
from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'agency_number' as code_type, agency.agency_number as code_id, rtrim(agency.agency_number) + ' - ' + rtrim(person.last_name) as code_value, '' as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'Answer Set ' + rtrim(tl_answer_set_answers.answer_set_name) as code_type, rtrim(cast(tl_answer_set_answers.sequence_number as char(30))) as code_id,
rtrim(tl_answer_set_answers.answer_text) as code_value, rtrim(tl_answer_set_answers.alt_answer_text) as external_code from tl_answer_set_answers
union
select 'en-us' as language_code, 'rulebook' as code_type, cast(rulebook_id as char(30)) as code_id, rulebook_name, description as external_code from rulebook_proxy_view where type is null or type = 0
union
select 'en-us' as language_code, lower(code_type), code_id, code_value, external_code from rulebook_rate_class
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, external_code as code_id, code_id as code_value, '' as external_code from tl_code where code_type = 'source_info_codes' and external_code is not null and rtrim(external_code) <> ''
union
select 'en-us' as language_code, 'CedentCompany' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'CedentCompany'
union
select 'en-us' as language_code, 'CedentUnderwriter_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentUnderwriter'
union
select 'en-us' as language_code, 'CedentContact_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentContact'
union
select 'en-us' as language_code, 'Reinsurer' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'Reinsurer'
union
select 'en-us' as language_code, 'active_retro_company_ob' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroOBCompany'
union
select 'en-us' as language_code, 'active_retro_company_retro' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroCompany'
union
select 'en-us' as language_code, 'cedent_fax' as code_type, company_code as code_id, area_code + prefix + ph.suffix as code_value, extension as external_code from company c, person p, person_phone ph where c.person_id = p.person_id and p.person_id = ph.person_id and p.class_type = 'CedentCompany' and lower(ph.phone_type_code) = 'fax'
union
select 'en-us' as language_code, 'coverage_indicator' as code_type, indicator_code as code_id, description as code_value, external_code from tl_coverage_indicator_code
union
select 'en-us' as language_code, 'address_type' as code_type, address_type_code as code_id, external_code as code_value, external_code from tl_address_type
union
select 'en-us' as language_code, 'benefit_type' as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from tl_benefit_type
union
select 'en-us' as language_code, 'reinsurance_vendor' as code_type, reinsurance_vendor_code as code_id, name as code_value, external_code from reinsurance_vendor
union
select 'en-us' as language_code, 'coverage_type' as code_type, coverage_type as code_id, description as code_value, external_code from tl_coverage_type
union
select 'en-us' as language_code, 'death_benefit_option' as code_type, death_benefit_option_code as code_id, external_code as code_value, external_code from tl_death_benefit_option
union
select 'en-us' as language_code, 'death_benefit_option_description' as code_type, death_benefit_option_code as code_id, description as code_value, '' as external_code from tl_death_benefit_option_desc
union
select 'en-us' as language_code, 'extended_property' as code_type, property_name as code_id, description as code_value, '' as external_code from tl_extended_property
union
select 'en-us' as language_code, 'language' as code_type, language_code as code_id, description as code_value, external_code from tl_language
union
select 'en-us' as language_code, 'marital_status' as code_type, marital_status_code as code_id, description as code_value, external_code from tl_marital_status
union
select 'en-us' as language_code, 'person_type' as code_type, person_type_id as code_id, description as code_value, '' as external_code from tl_person_type
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'requirement_type' as code_type, requirement_type_id as code_id, description as code_value, '' as external_code from tl_requirement_type
union
select 'en-us' as language_code, 'tax_type' as code_type, tax_type_id as code_id, description as code_value, '' as external_code from tl_tax_type
union
select 'en-us' as language_code, 'tobacco_type' as code_type, tobacco_type_id as code_id, external_code as code_value, external_code from tl_tobacco_type
union
select 'en-us' as language_code, 'tobacco_use' as code_type, tobacco_use_id as code_id, external_code as code_value, external_code from tl_tobacco_use
union
select 'en-us' as language_code, 'address_type_description' as code_type, address_type_code as code_id, description as code_value, '' as external_code from tl_address_type_description
union
select 'en-us' as language_code, 'beneficiary_type' as code_type, beneficiary_type as code_id, description as code_value, '' as external_code from tl_beneficiary_type_desc
union
select 'en-us' as language_code, 'benefit_type_description' as code_type, cast(benefit_id as char(30)) as code_id, description as code_value, '' as external_code from tl_benefit_type_description
union
select 'en-us' as language_code, 'note_type' as code_type, note_type as code_id, description as code_value, '' as external_code from tl_note_type_description
union
select 'en-us' as language_code, 'phone_type' as code_type, phone_type_code as code_id, description as code_value, '' as external_code from tl_phone_type_description
union
select 'en-us' as language_code, 'policy_role' as code_type, code as code_id, description as code_value, '' as external_code from tl_policy_role_description
union
select 'en-us' as language_code, 'purpose_of_coverage' as code_type, purpose_of_coverage_id as code_id, description as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'tobacco_type_description' as code_type, tobacco_type_id as code_id, description as code_value, '' as external_code from tl_tobacco_type_description
union
select 'en-us' as language_code, 'tobacco_use_description' as code_type, tobacco_use_id as code_id, description as code_value, '' as external_code from tl_tobacco_use_description
union
select 'en-us' as language_code, 'family_history_relationship' as code_type, famhist_relationship_code as code_id, famhist_relationship_code as code_value, famhist_relationship_code as external_code from tl_family_history_relationship
union
select 'en-us' as language_code, 'occupation' as code_type, occupation as code_id, occupation as code_value, occupation_code as external_code from occupation
union
select 'en-us' as language_code, 'source_info_codes' as code_type, source_info as code_id, source_description as code_value, partner_id as external_code from tl_source_info
union
select 'en-us' as language_code, 'distributor_codes' as code_type, distributor_code as code_id, distributor_description as code_value, '' as external_code from tl_distributor_codes
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, partner_id as code_id, source_info as code_value, '' as external_code from tl_source_info where partner_id is not null and rtrim(partner_id) <> ''
union
select 'en-us' as language_code, 'PurposeOfCoverage' as code_type, description as code_id, purpose_of_coverage_id as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'PolicyStatus' as code_type, policy_status_code as code_id, description as code_value, '' as external_code from tl_policy_status_description
union
select distinct 'en-us' as language_code, 'table_rating_reason' as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where reason_status = 'Table Rating'
union
select distinct lang.code_value as language_code, 'table_rating_reason' as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where reason_status = 'Table Rating'and lang.code_value is not null and alt_reason_text is not null
union
select 'en-us' as language_code, 'tpa_name' as code_type, t.tpa_code as code_id, p.last_name as code_value, t.tpa_short_name as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where  aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'aus_users_basic' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is null or aus_user.is_agent = 0) and (aus_user.is_agency is null or aus_user.is_agency = 0)
union
select 'en-us' as language_code, 'active_underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'active_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'underwriter_and_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where ((aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) or
(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0)) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'active_team' as code_type, cast(team_id as char(30)) as code_id, team_name as code_value, '' as external_code from team where (is_active is not null and is_active <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (D)' as code_value, '' as external_code from team where (deleted is not null and deleted <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (I)' as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is null or is_active = 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is not null and is_active <> 0)
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' +  lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select distinct 'en-us' as language_code, 'g_number_' + lower(rtrim(association_code)) as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan where g_number is not null
union
select 'en-us' as language_code, 'active_login_cm' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'active_login_uw' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0) and aus_user.person_id = person.person_id
union
select language_code, 'issue_request_' + code_type as code_type, code_id, code_value, external_code from tl_code where code_type in (select code_id from tl_code where language_code = 'en-us' and code_type = 'AmendmentType')
union
select 'en-us' as language_code, 'employer' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Employer')
union
select 'en-us' as language_code, 'agent_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agent_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is not null and aus_user.is_agent <> 0)
union
select 'en-us' as language_code, 'agency_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agency_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agency is not null and aus_user.is_agency <> 0)
union
select language_code, ('plan_' + rtrim(option_type) + '_' + rtrim(plan_code_id)) as code_type, cast(sequence_number as char(30)) as code_id, description as code_value, '' as external_code from tl_plan_option
union
select 'en-us' as language_code, 'trust' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Trust')
union
select 'en-us' as language_code, 'ppo' as code_type, cast(company.person_id as char(30)) as code_id, person.last_name as code_value, cast(company.expiration_date as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'PPO')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW ss_upd_view
as
select
	tfp.case_group_id as nyl_family_id, 
	mdp.coverage_type as cvg, 
	mdp.group_number as gnum, 
	mdp.family_id as family, 
	mdp.current_epsilon_key as dbkees, 
	mdp.new_epsilon_key as dbkees2, 
	mdp.applicant_sex_code as sex, 
	mdp.insurance_volume_applied_for as amount,
	mdp.member_ssn as socsec, 
	mdp.applicant_address_line1 as addr1, 
	mdp.applicant_address_line2 as addr2, 
	mdp.applicant_address_line3 as addr3, 
	mdp.applicant_city as city, 
	mdp.applicant_state_code as state, 
	mdp.applicant_zip_code as zip, 
	mdp.applicant_home_phone as phone1, 
	mdp.applicant_work_phone as phone2, 
	mdp.mortality_rating as rating, 
	mdp.applicant_last_name as lname, 
	mdp.applicant_first_name as fname, 
	mdp.applicant_middle_initial as mi, 
	mdp.applicant_title as leadtitle, 
	mdp.applicant_trailing_title as trailtitle,
	mdp.applicant_dob as dob, 
	mdp.member_last_name as mbr_lname, 
	mdp.member_first_name as mbr_fname, 
	mdp.member_dob as mbrdob,
	mb.process_date
from
	tpa_family_person tfp,
	marsh_data_proxy_view mdp,
	marsh_balance mb
where
	tfp.tpa_family_id = cast(mdp.family_id as int) and
	tfp.current_epsilon_dbkey = cast(mdp.current_epsilon_key as numeric(12,0)) and
	mdp.balance_id = mb.balance_id and
	(mdp.record_type = 'u') and 
	(mdp.marsh_id not in
		(select distinct
			marsh_id
		 from
			marsh_error
		)
	)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_requirement as
select
	rv.insured_requirement_id as requirement_id,
	rv.requirement_information_id,
	rv.requirement_code,
	rv.added_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.added_by
	) as added_by_name,
	rv.added_date,
	rv.closed_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.closed_by
	) as closed_by_name,
	rv.closed_date,
	(select
		tc.code_id
	 from
	 	tl_code tc
	 where
		tc.language_code = 'en-us' and
		tc.code_type = 'RequirementStatus' and
		((tc.code_id = rv.closed_disposition) or
		(rv.closed_disposition is null and tc.code_id = 'O'))
	) as closed_disposition,
	(select
		tc.code_value
	 from
	 	tl_code tc
	 where
		tc.language_code = 'en-us' and
		tc.code_type = 'RequirementStatus' and
		((tc.code_id = rv.closed_disposition) or
		(rv.closed_disposition is null and tc.code_id = 'O'))
	) as requirement_status,
	rv.needed_for_approval_flag,
	rv.notify_when_satisfied,
	rv.review_message_id,
	rv.policy_person_id as applicant_id,
	rv.followup_date,
	rv.ordered_by,
	rv.ordered_date,
	rv.can_auto_approve,
	rv.received_id,
	rv.note_id,
	rv.received_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.received_by
	) as received_by_name,
	rv.received_date,
	rv.create_comment,
	rv.provider,
	rv.evidence_type,
	rv.authorization_required,
	rv.external_requirement_code,
	rv.last_followup_date,
	rv.manual_or_automatic_entry,
	rv.new_business_until_closed,
	rv.provider_order_id,
	rv.schedule_date,
	rv.complete_date,
	rv.alt_create_comment,
	tlr.requirement_name,
	tlr.requirement_category,
	tlr.expiration_days,
	tlr.followup_days,
	tlr.requirement_type_id,
	tlr.notify_when_received,
	tlr.is_active,
	tlr.updated_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = tlr.updated_by
	) as updated_by_name,
	tlr.update_date,
	tlr.hippa_auth_required,
	tlr.external_followup_days,
	tlr.hierarchy,
	tlr.alt_lang,
	(select description from tl_language where language_code = tlr.alt_lang
	 union
	 select code_value from tl_code where code_type = 'language' and code_id = tlr.alt_lang) as alt_lang_description,
	tlr.alt_name
from
	requirement_view rv,
	tl_requirement tlr
where
	tlr.requirement_code = rv.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW ssintran_error_view
as
select
	tfp.case_group_id as nyl_family_id, 
	md.marsh_id as row_id, 
	md.record_type as updflag, 
	md.group_number as gnum, 
	md.coverage_type as covrtype, 
	md.relationship_code as who, 
	md.applicant_last_name as lname, 
	md.applicant_first_name as fname, 
	md.applicant_middle_initial as mi, 
	md.applicant_title as leadtitle, 
	md.applicant_trailing_title as trailtitle, 
	md.applicant_dob as dob, 
	md.applicant_address_line1 as addr1, 
	md.applicant_address_line2 as addr2, 
	md.applicant_address_line3 as addr3, 
	md.applicant_city as city, 
	md.applicant_state_code as state, 
	md.applicant_zip_code as zip, 
	md.applicant_home_phone as phone1, 
	md.applicant_work_phone as phone2, 
	md.applicant_sex_code as sex, 
	md.member_ssn as socsec, 
	md.insurance_volume_applied_for as mnvolume, 
	md.waiting_period as waitperiod, 
	md.last_exam_date as dtlstexam, 
	md.last_blood_profile_date as dtlstblood, 
	md.mortality_rating as rating, 
	md.legal_text_id1 as legaltxtid1, 
	md.conditional_text_id1 as condtextid1, 
	md.legal_text_id2 as legaltxtid2, 
	md.conditional_text_id2 as condtextid2, 
	md.legal_text_id3 as legaltxtid3, 
	md.conditional_text_id3 as condtextid3, 
	mb.start_date as dtrun, 
	md.family_id as family, 
	md.current_epsilon_key as dbkees, 
	md.member_first_name as mbrname, 
	md.member_dob as mbrdob,
	me.marsh_error_code as error_cd,
	(select
		code_value as reason
	 from
		tl_code
	 where
		(code_type = 'marsh_error_code') and
		(code_id = me.marsh_error_code)
	) as error_reason,
	me.marsh_error_detail as error_description,
	mb.process_date as pdate, 
	md.new_epsilon_key as dbkees2, 
	md.applicant_height as height, 
	md.applicant_weight as weight
from
	tpa_family_person tfp,
	marsh_data_proxy_view md,
	marsh_error me, 
	marsh_balance mb
where
	tfp.tpa_family_id = cast(md.family_id as int) and
	tfp.current_epsilon_dbkey = cast(md.current_epsilon_key as numeric(12,0)) and
	mb.balance_id = md.balance_id and
	me.marsh_id = md.marsh_id
union
select
	'' as nyl_family_id, 
	md.marsh_id as row_id, 
	md.record_type as updflag, 
	md.group_number as gnum, 
	md.coverage_type as covrtype, 
	md.relationship_code as who, 
	md.applicant_last_name as lname, 
	md.applicant_first_name as fname, 
	md.applicant_middle_initial as mi, 
	md.applicant_title as leadtitle, 
	md.applicant_trailing_title as trailtitle, 
	md.applicant_dob as dob, 
	md.applicant_address_line1 as addr1, 
	md.applicant_address_line2 as addr2, 
	md.applicant_address_line3 as addr3, 
	md.applicant_city as city, 
	md.applicant_state_code as state, 
	md.applicant_zip_code as zip, 
	md.applicant_home_phone as phone1, 
	md.applicant_work_phone as phone2, 
	md.applicant_sex_code as sex, 
	md.member_ssn as socsec, 
	md.insurance_volume_applied_for as mnvolume, 
	md.waiting_period as waitperiod, 
	md.last_exam_date as dtlstexam, 
	md.last_blood_profile_date as dtlstblood, 
	md.mortality_rating as rating, 
	md.legal_text_id1 as legaltxtid1, 
	md.conditional_text_id1 as condtextid1, 
	md.legal_text_id2 as legaltxtid2, 
	md.conditional_text_id2 as condtextid2, 
	md.legal_text_id3 as legaltxtid3, 
	md.conditional_text_id3 as condtextid3, 
	mb.start_date as dtrun, 
	md.family_id as family, 
	md.current_epsilon_key as dbkees, 
	md.member_first_name as mbrname, 
	md.member_dob as mbrdob,
	me.marsh_error_code as error_cd,
	(select
		code_value as reason
	 from
		tl_code
	 where
		(code_type = 'marsh_error_code') and
		(code_id = me.marsh_error_code)
	) as error_reason,
	me.marsh_error_detail as error_description,
	mb.process_date as pdate, 
	md.new_epsilon_key as dbkees2, 
	md.applicant_height as height, 
	md.applicant_weight as weight
from
	marsh_data_proxy_view md,
	marsh_error me, 
	marsh_balance mb
where
	mb.balance_id = md.balance_id and
	cast(cast(md.family_id as int) as varchar(9)) + '_' + cast(cast(md.current_epsilon_key as numeric(12,0)) as varchar(12)) not in (select cast(tpa_family_id as varchar(9))  + '_' + cast(current_epsilon_dbkey as varchar(12)) from tpa_family_person) and
	me.marsh_id = md.marsh_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW ssinwaiv_view
as
select
	mdp.marsh_id as row_id, 
	mdp.group_number as gnum, 
	mdp.coverage_type as covrtype, 
	mdp.applicant_last_name as lname, 
	mdp.applicant_first_name as fname, 
	mdp.applicant_dob as dob, 
	mdp.conditional_text_id1 as condtextid1, 
	mdp.explanation1_line1 as t1line1, 
	mdp.explanation1_line2 as t1line2, 
	mdp.explanation1_line3 as t1line3, 
	mdp.explanation1_line4 as t1line4, 
	mdp.explanation1_line5 as t1line5, 
	mdp.explanation1_line6 as t1line6, 
	mdp.explanation1_line7 as t1line7, 
	mdp.explanation1_line8 as t1line8, 
	mdp.explanation1_line9 as t1line9, 
	mdp.explanation1_line10 as t1line10, 
	mdp.conditional_text_id2 as condtextid2, 
	mdp.explanation2_line1 as t2line1, 
	mdp.explanation2_line2 as t2line2, 
	mdp.explanation2_line3 as t2line3, 
	mdp.explanation2_line4 as t2line4, 
	mdp.explanation2_line5 as t2line5, 
	mdp.explanation2_line6 as t2line6, 
	mdp.explanation2_line7 as t2line7, 
	mdp.explanation2_line8 as t2line8, 
	mdp.explanation2_line9 as t2line9, 
	mdp.explanation2_line10 as t2line10, 
	mdp.conditional_text_id3 as condtextid3, 
	mdp.explanation3_line1 as t3line1, 
	mdp.explanation3_line2 as t3line2, 
	mdp.explanation3_line3 as t3line3, 
	mdp.explanation3_line4 as t3line4, 
	mdp.explanation3_line5 as t3line5, 
	mdp.explanation3_line6 as t3line6, 
	mdp.explanation3_line7 as t3line7, 
	mdp.explanation3_line8 as t3line8, 
	mdp.explanation3_line9 as t3line9, 
	mdp.explanation3_line10 as t3line10, 
	mdp.family_id as family, 
	mdp.current_epsilon_key as dbkees,
	mb.process_date
from
	marsh_data_proxy_view mdp,
	marsh_balance mb
where
	mdp.balance_id = mb.balance_id and
	(marsh_id not in
		(select distinct 
			marsh_id
		 from
			marsh_error
		)
	)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_tpa as
select
	tv.person_id,
	tv.party_id,
	ltrim(rtrim(dbo.clrLSDecrypt(tv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(tv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}'))) as full_name,
	dbo.clrLSDecrypt(tv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(tv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(tv.middle_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as middle_name,
	tv.title,
	tv.suffix,
	dbo.clrLSDecrypt(tv.tax_id,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as tax_id,
	tv.tax_type_id,
	cast(dbo.clrLSDecrypt(tv.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	tv.sex,
	tv.email_address,
	tv.alt_email_address,
	tv.marital_status,
	tv.tpa_short_name as tpa_code,
	ltrim(rtrim(tv.contact_first_name) + ' ' + rtrim(tv.contact_last_name)) as contact_full_name,
	tv.contact_last_name,
	tv.contact_first_name,
	tv.auto_closure_days,
	tv.expiration_date,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	tpa_view tv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = tv.person_id and
	dmp.person_id = tv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[ssintran_view]
as
select
	md.marsh_id as row_id, 
	md.record_type as updflag, 
	md.group_number as gnum, 
	md.coverage_type as covrtype, 
	md.relationship_code as who, 
	md.applicant_last_name as lname, 
	md.applicant_first_name as fname, 
	md.applicant_middle_initial as mi, 
	md.applicant_title as leadtitle, 
	md.applicant_trailing_title as trailtitle, 
	md.applicant_dob as dob, 
	md.applicant_address_line1 as addr1, 
	md.applicant_address_line2 as addr2, 
	md.applicant_address_line3 as addr3, 
	md.applicant_city as city, 
	md.applicant_state_code as state, 
	md.applicant_zip_code as zip, 
	md.applicant_home_phone as phone1, 
	md.applicant_work_phone as phone2, 
	md.applicant_sex_code as sex, 
	md.member_ssn as socsec, 
	md.insurance_volume_applied_for as mnvolume, 
	md.waiting_period as waitperiod, 
	md.last_exam_date as dtlstexam, 
	md.last_blood_profile_date as dtlstblood, 
	md.mortality_rating as rating, 
	md.legal_text_id1 as legaltxtid1, 
	md.conditional_text_id1 as condtextid1, 
	md.legal_text_id2 as legaltxtid2, 
	md.conditional_text_id2 as condtextid2, 
	md.legal_text_id3 as legaltxtid3, 
	md.conditional_text_id3 as condtextid3, 
	mb.start_date as dtrun, 
	md.family_id as family, 
	md.current_epsilon_key as dbkees, 
	md.member_first_name as mbrname, 
	md.member_dob as mbrdob, 
	mb.process_date as pdate, 
	md.new_epsilon_key as dbkees2, 
	md.applicant_height as height, 
	md.applicant_weight as weight,
	(select
		rtrim(dbo.clrLSDecrypt(auv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(auv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) as underwriter_name
	 from
		aus_user_view auv,
		tpa_family_person tfp,
		policy p,
		policy_person pp
	 where
		cast(md.family_id as numeric) = tfp.tpa_family_id and
		cast(md.current_epsilon_key as numeric) = tfp.current_epsilon_dbkey and
		tfp.policy_person_id = pp.policy_person_id and
		pp.policy_id = p.policy_id and
		auv.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		rtrim(dbo.clrLSDecrypt(auv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(auv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) as service_associate_name
	 from
		aus_user_view auv,
		tpa_family_person tfp,
		policy p,
		policy_person pp
	 where
		cast(md.family_id as numeric) = tfp.tpa_family_id and
		cast(md.current_epsilon_key as numeric) = tfp.current_epsilon_dbkey and
		tfp.policy_person_id = pp.policy_person_id and
		pp.policy_id = p.policy_id and
		auv.user_id = p.service_associate_id
	) as service_associate_name
from
	marsh_data_proxy_view md,
	marsh_balance mb
where
	mb.balance_id = md.balance_id and
	cast(md.error_count as char(1)) = '0'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[auto_closure_proxy_view] as
select
		*
from
		policy_proxy_view
where
	applicant_status_short in ('PE', 'PM', 'NB', 'FA') and
	policy_person_id in
		(select
			ir.policy_person_id
		 from
			insured_requirement ir
		 where
			((ir.closed_disposition is null or
	 		  ir.closed_disposition in('O', 'H')) and
			 ir.ordered_date is not null) or
			ir.closed_disposition = 'OR'
	 	)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_company as
select
	cv.company_code,
	dbo.clrLSDecrypt(cv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as company_name,
	cv.person_id,
	cv.party_id,
	dbo.clrLSDecrypt(cv.tax_id,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as tax_id,
	cv.email_address,
	cv.alt_email_address,
	cv.class_type,
	cv.preferred_contact_mode,
	cv.allow_aus_approval_flag,
	cv.correspondence_directory,
	cv.field1,
	cv.field2,
	cv.field3,
	cv.field4,
	cv.field5,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dma.billing_city,
	dma.billing_postal_code,
	dma.billing_address_line1,
	dma.billing_address_line2,
	dma.billing_address_line3,
	dma.billing_country_code,
	dma.billing_state_name,
	dma.billing_state_code,
	dma.billing_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	company_view cv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = cv.person_id and
	dmp.person_id = cv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW [dbo].[policy_proxy_view_uw_rm_count] as
select
	pp.*,
	rvw.unchk_rvw_count as uw_rm_count
from
	unchecked_rvw_msg_count as rvw RIGHT OUTER JOIN policy_proxy_view as pp ON (rvw.policy_person_id = pp.policy_person_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_coverage as
select
	icv.policy_coverage_id,
	icv.policy_id as case_id,
	icv.plan_code_id,
	plc.description as plan_code_name,
	plc.line_of_business_code,
	(select
		lob.name
	 from
	 	line_of_business lob
	 where
		lob.line_of_business_code = plc.line_of_business_code
	) as line_of_business_name,
	icv.death_benefit_option_code,
	icv.purpose_of_coverage_id,
	(select
		poc.code_value
	 from
	 	tl_code poc
	 where
		poc.code_type = 'purpose_of_coverage' and
		poc.code_id = icv.purpose_of_coverage_id and
		poc.language_code = 'en-us'
	 union
	 select
		poc.description
	 from
	 	tl_purpose_of_coverage_desc poc
	 where
		poc.purpose_of_coverage_id = icv.purpose_of_coverage_id
	) as purpose_of_coverage,
	icv.coverage_type,
	icv.amount,
	icv.premium_mode,
	icv.investment_objective,
	icv.pref_date_of_withdrawl,
	icv.planned_premium,
	icv.initial_planned_premium,
	icv.equivalent_age,
	icv.can_take_final_action_flag,
	icv.dividend_option,
	(select
		div.code_value
	 from
	 	tl_code div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option and
		div.language_code = 'en-us'
	 union
	 select
		div.code_value
	 from
	 	tl_acord_codes div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option
	) as dividend_option_name,
	icv.approved_amount,
	icv.policy_person_id as applicant_id,
	icv.coverage_person_id as coverage_id,
	icv.perm_flat_extra_amount,
	icv.temp_flat_extra_amount,
	icv.temp_flat_extra_period,
	icv.flat_extra_reason,
	icv.temp_table_rating,
	icv.temp_table_rating_reason,
	icv.rate_class_quoted,
	icv.rate_class_approved,
	icv.rate_class_issued,
	icv.aviation_exclusion,
	icv.perm_table_rating,
	icv.perm_table_rating_reason,
	icv.coverage_status,
	icv.reason_text,
	icv.is_smoker,
	icv.business_ownership_percent,
	icv.final_action_by_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
	) as final_action_by_name,
	icv.final_action_date,
	icv.final_action_note,
	icv.elimination_days,
	icv.payout_frequency,
	icv.waiting_period,
	icv.g_number,
	icv.person_id,
	icv.relationship_to_insured_code,
	icv.web_quoted_class,
	icv.modal_premium_amount,
	icv.issued_times_standard,
	icv.jls_flag,
	icv.split_flag,
	icv.reinsurance_amount,
	icv.rated_up_age,
	icv.reinsurance_company_code,
	(select dbo.clrLSDecrypt(cpv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') from company_view cpv where cpv.company_code = icv.reinsurance_company_code) as reinsurance_company_name
from
	insured_coverages_view icv,
	tl_plan_code plc
where
	plc.plan_code_id = icv.plan_code_id and
	icv.coverage_status is not null
union
select
	icv.policy_coverage_id,
	icv.policy_id as case_id,
	icv.plan_code_id,
	plc.description as plan_code_name,
	plc.line_of_business_code,
	(select
		lob.name
	 from
	 	line_of_business lob
	 where
		lob.line_of_business_code = plc.line_of_business_code
	) as line_of_business_name,
	icv.death_benefit_option_code,
	icv.purpose_of_coverage_id,
	(select
		poc.code_value
	 from
	 	tl_code poc
	 where
		poc.code_type = 'purpose_of_coverage' and
		poc.code_id = icv.purpose_of_coverage_id and
		poc.language_code = 'en-us'
	 union
	 select
		poc.description
	 from
	 	tl_purpose_of_coverage_desc poc
	 where
		poc.purpose_of_coverage_id = icv.purpose_of_coverage_id
	) as purpose_of_coverage,
	icv.coverage_type,
	icv.amount,
	icv.premium_mode,
	icv.investment_objective,
	icv.pref_date_of_withdrawl,
	icv.planned_premium,
	icv.initial_planned_premium,
	icv.equivalent_age,
	icv.can_take_final_action_flag,
	icv.dividend_option,
	(select
		div.code_value
	 from
	 	tl_code div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option and
		div.language_code = 'en-us'
	 union
	 select
		div.code_value
	 from
	 	tl_acord_codes div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option
	) as dividend_option_name,
	icv.approved_amount,
	icv.policy_person_id as applicant_id,
	icv.coverage_person_id as coverage_id,
	icv.perm_flat_extra_amount,
	icv.temp_flat_extra_amount,
	icv.temp_flat_extra_period,
	icv.flat_extra_reason,
	icv.temp_table_rating,
	icv.temp_table_rating_reason,
	icv.rate_class_quoted,
	icv.rate_class_approved,
	icv.rate_class_issued,
	icv.aviation_exclusion,
	icv.perm_table_rating,
	icv.perm_table_rating_reason,
	'Pending' as coverage_status,
	icv.reason_text,
	icv.is_smoker,
	icv.business_ownership_percent,
	icv.final_action_by_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
	) as final_action_by_name,
	icv.final_action_date,
	icv.final_action_note,
	icv.elimination_days,
	icv.payout_frequency,
	icv.waiting_period,
	icv.g_number,
	icv.person_id,
	icv.relationship_to_insured_code,
	icv.web_quoted_class,
	icv.modal_premium_amount,
	icv.issued_times_standard,
	icv.jls_flag,
	icv.split_flag,
	icv.reinsurance_amount,
	icv.rated_up_age,
	icv.reinsurance_company_code,
	(select dbo.clrLSDecrypt(cpv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') from company_view cpv where cpv.company_code = icv.reinsurance_company_code) as reinsurance_company_name
from
	insured_coverages_view icv,
	tl_plan_code plc
where
	plc.plan_code_id = icv.plan_code_id and
	icv.coverage_status is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_user as
select
	uv.person_id,
	uv.party_id,
	ltrim(rtrim(dbo.clrLSDecrypt(uv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(uv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}'))) as full_name,
	dbo.clrLSDecrypt(uv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(uv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(uv.middle_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as middle_name,
	uv.title,
	uv.suffix,
	dbo.clrLSDecrypt(uv.tax_id,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as tax_id,
	uv.tax_type_id,
	cast(dbo.clrLSDecrypt(uv.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	uv.sex,
	uv.email_address,
	uv.alt_email_address,
	uv.marital_status,
	uv.user_id,
	uv.login_id,
	uv.password,
	uv.is_active,
	uv.preferred_language_code,
	uv.level_of_authority,
	uv.is_underwriter,
	uv.is_service_associate,
	uv.role_id,
	uv.is_agent,
	uv.agent_number,
	uv.is_agency,
	uv.agency_number,
	asr.name as role_name,
	uv.restrict_to_teams,
	uv.job_title,
	uv.account_locked,
	uv.account_locked_date,
	uv.bad_login_attempt_count,
	uv.last_bad_login_attempt_date,
	uv.must_change_password,
	uv.last_password_change_date,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	aus_user_view uv,
	aus_security_roles asr,
	data_mart_address dma,
	data_mart_phone dmp
where
	asr.role_id = uv.role_id and
	dma.person_id = uv.person_id and
	dmp.person_id = uv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_party as
select
	ppv.case_party_id,
	ppv.case_id,
	ppv.party_type,
	ppv.relation,
	ppv.person_id,
	ppv.party_id,
	ltrim(rtrim(dbo.clrLSDecrypt(ppv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ' ' + rtrim(dbo.clrLSDecrypt(ppv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}'))) as full_name,
	dbo.clrLSDecrypt(ppv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(ppv.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(ppv.middle_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as middle_name,
	ppv.title,
	ppv.suffix,
	dbo.clrLSDecrypt(ppv.tax_id,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as tax_id,
	ppv.tax_type_id,
	cast(dbo.clrLSDecrypt(ppv.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	ppv.sex,
	ppv.email_address,
	ppv.alt_email_address,
	ppv.marital_status,
	ppv.client_id,
	ppv.class_type,
	ppv.preferred_contact_mode,
	ppv.field1,
	ppv.field2,
	ppv.field3,
	ppv.field4,
	ppv.field5,
	dma.residence_city,
	dma.residence_postal_code,
	dma.residence_address_line1,
	dma.residence_address_line2,
	dma.residence_address_line3,
	dma.residence_country_code,
	dma.residence_state_name,
	dma.residence_state_code,
	dma.residence_country_name,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dma.billing_city,
	dma.billing_postal_code,
	dma.billing_address_line1,
	dma.billing_address_line2,
	dma.billing_address_line3,
	dma.billing_country_code,
	dma.billing_state_name,
	dma.billing_state_code,
	dma.billing_country_name,
	dmp.home_phone_country_code,
	dmp.home_phone_area_code,
	dmp.home_phone_prefix,
	dmp.home_phone_suffix,
	dmp.home_phone_extension,
	dmp.home_phone_pin,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	party_proxy_view ppv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = ppv.person_id and
	dmp.person_id = ppv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_applicant as
select
	p.policy_id as case_id,
	p.company_code,
	(select dbo.clrLSDecrypt(cpv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') from company_view cpv where cpv.company_code = p.company_code) as company_name,
	p.policy_number as case_number,
	p.application_number,
	p.issue_date,
	p.underwriter_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	p.team_id,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	p.application_date,
	p.agent_signed_date,
	p.policy_status_code as case_status,
	p.policy_status_date as case_status_date,
	p.receive_date,
	p.payment_mode_code,
	(select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	 union
	 select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	) as payment_mode_name,
	p.payment_method_code,
	(select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	 union
	 select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	) as payment_method_name,
	p.last_underwrite_date,
	p.allow_aus_approval,
	(select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = (select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id)
	) as final_action_by_name,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_date,
	(select top 1 final_action_note from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_note,
	(select top 1 reason_text from insured_coverages_view where policy_person_id = i.policy_person_id) as reason_text,
	p.reinsurance_indicator,
	p.reinsurance_vendor_code,
	(select
		riv.name
	 from
		reinsurance_vendor riv
	 where
		riv.reinsurance_vendor_code = p.reinsurance_vendor_code
	) as reinsurance_vendor_name,
	p.updated_by as case_updated_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.updated_by
	) as case_updated_by_name,
	p.updated_date as case_updated_date,
	p.added_by case_added_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.added_by
	) as case_added_by_name,
	p.added_date as case_added_date,
	p.cwa_amount,
	p.cwa_date,
	p.priority,
	dbo.clrLSDecrypt(p.bank_rounting_number,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as bank_routing_number,
	dbo.clrLSDecrypt(p.bank_account_number,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as bank_account_number,
	p.credit_card_type,
	(select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	 union
	 select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	) as credit_card_type_name,
	dbo.clrLSDecrypt(p.credit_card_number,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as credit_card_number,
	dbo.clrLSDecrypt(p.credit_card_expiration_year,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as credit_card_expiration_year,
	dbo.clrLSDecrypt(p.credit_card_expiration_month,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as credit_card_expiration_month,
	p.list_bill_location,
	p.list_bill_employee_id,
	p.bill_day,
	p.marketing_code,
	p.mode_premium,
	p.requested_issue_date,
	p.case_group_id as case_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = p.policy_id and name = 'TPAFamilyId'
	) as tpa_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = i.policy_person_id and name = 'CurrentEpsilonKey'
	) as current_epsilon_dbkey,
	p.service_associate_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as service_associate_name,
	p.association_code,
	(select
		assoc.name
	 from
		association assoc
	 where
		assoc.association_code = p.association_code
	) as association_name,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_code,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(tv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_name,
	p.amex_account,
	p.performed_jet_issue_flag,
	p.source_info,
	(select source_description from tl_source_info where source_info = p.source_info
	 union
	 select code_value from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as source_description,
	(select partner_id from tl_source_info where source_info = p.source_info
	 union
	 select external_code from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as partner_id,
	p.lead_number_id,
	p.distributor_code,
	(select distributor_description from tl_distributor_codes where distributor_code = p.distributor_code
	 union
	 select code_value from tl_code where code_type = 'distributor_codes' and code_id = p.distributor_code and language_code = 'en-us') as distributor_description,
	p.alternate_case_id,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number is not null) as agent_number,
	(select top 1 ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}'))) from person ps, agent_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id and av.agent_number is not null) as agent_name,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as agency_number,
	(select top 1 routing_number from agency_view where policy_id = p.policy_id) as routing_number,
	(select top 1 rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) from person ps, agency_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id) as agency_name,
	p.cedent_policy_number,
	p.cedent_company_code,
	(select dbo.clrLSDecrypt(cpv.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') from company_view cpv where cpv.company_code = p.cedent_company_code) as cedent_company_name,
	p.cedent_fax_number,
	p.cedent_underwriter_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps
	 where
		p.cedent_underwriter_id = ps.person_id
	) as cedent_underwriter_name,
	p.cedent_contact_id,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps
	 where
		p.cedent_contact_id = ps.person_id
	) as cedent_contact_name,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	(select code_value from tl_code where code_type = 'currency_code' and code_id = p.currency_code and language_code = 'en-us') as currency_description,
	p.preferred_language_code,
	(select description from tl_language where language_code = p.preferred_language_code
	 union
	 select code_value from tl_code where code_type = 'language' and code_id = p.preferred_language_code and language_code = 'en-us') as preferred_language_description,
	p.teleunderwriting_indicator,
	i.person_id,
	i.party_id,
	i.policy_person_id as applicant_id,
	rtrim(dbo.clrLSDecrypt(i.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(i.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) as full_name,
	dbo.clrLSDecrypt(i.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as last_name,
	dbo.clrLSDecrypt(i.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as first_name,
	dbo.clrLSDecrypt(i.middle_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as middle_name,
	i.title,
	i.suffix,
	dbo.clrLSDecrypt(i.tax_id,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as tax_id,
	i.tax_type_id,
	cast(dbo.clrLSDecrypt(i.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as birth_date,
	(cast(CURRENT_TIMESTAMP - cast(dbo.clrLSDecrypt(i.birth_date,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}') as datetime) as int)/365) as age,
	i.sex,
	i.email_address,
	i.alt_email_address,
	i.marital_status,
	i.client_id,
	i.signed_state_id,
	(select
		ssn.state_name
	 from
		tl_country_state ssn
	 where
		ssn.country_state_id = i.signed_state_id
	) as signed_state_name,
	i.underwriting_amount,
	(select top 1 issue_age from insured_coverages_view where policy_person_id = i.policy_person_id) as issue_age,
	i.primary_insured_flag,
	i.aviation_exclusion,
	i.add_uw_amt,
	(select code_value from tl_code where code_type = 'applicant_status' and code_id = i.applicant_status and language_code = 'en-us') as applicant_status,
	i.applicant_status as applicant_status_short,
	i.applicant_status_date,
	i.is_member,
	i.allow_auto_approval,
	i.adverse_history,
	i.und_allow_auto_approval,
	i.und_allow_jet_issue,
	i.und_allow_auto_ordering,
	i.added_date as applicant_added_date,
	i.added_by as applicant_added_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = i.added_by
	) as applicant_added_by_name,
	i.reopen_date,
	i.retro_type,
	i.aviation_flag,
	i.entertainer_flag,
	i.sports_flag,
	i.foreign_flag,
	i.additional_in_force,
	i.relationship_to_insured as relationship_to_insured_id,
	(select code_value from tl_acord_codes where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured
	 union
	 select code_value from tl_code where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured and language_code = 'en-us') as relationship_to_insured,
	(select top 1 plan_code_id from insured_coverages_view where policy_person_id = i.policy_person_id) as plan_code_id,
	(select top 1 planned_premium from insured_coverages_view where policy_person_id = i.policy_person_id) as planned_premium,
	(select top 1 web_quoted_class from insured_coverages_view where policy_person_id = i.policy_person_id) as web_quoted_class,
	(select top 1 rate_class_quoted from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_quoted,
	(select top 1 rate_class_approved from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_approved,
	(select top 1 rate_class_issued from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_issued,
	(select top 1 amount from insured_coverages_view where policy_person_id = i.policy_person_id) as amount,
	(select top 1 perm_table_rating from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_table_rating,
	(select top 1 perm_flat_extra_amount from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_flat_extra_amount,
	dma.residence_city,
	dma.residence_postal_code,
	dma.residence_address_line1,
	dma.residence_address_line2,
	dma.residence_address_line3,
	dma.residence_country_code,
	dma.residence_state_name,
	dma.residence_state_code,
	dma.residence_country_name,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.home_phone_country_code,
	dmp.home_phone_area_code,
	dmp.home_phone_prefix,
	dmp.home_phone_suffix,
	dmp.home_phone_extension,
	dmp.home_phone_pin,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin,
	ap.create_date,
	ap.expiration_date,
	ap.manual_entry_flag,
	ap.income,
	ap.net_worth,
	ap.total_inforce,
	ap.replacement_amount,
	ap.replacement_date,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.birth_country,
	(select
		bc.country_name
	 from
		tl_country bc
	 where
		bc.country_id = ap.birth_country
	) as birth_country_name,
	ap.birth_state,
	(select
		bsn.state_name
	 from
		tl_country_state bsn
	 where
		bsn.country_state_id = ap.birth_state
	) as birth_state_name,
	ap.drivers_license_number,
	ap.drivers_license_country_id,
	(select
		drc.country_name
	 from
		tl_country drc
	 where
		drc.country_id = ap.drivers_license_country_id
	) as drivers_license_country_name,
	ap.drivers_license_state,
	(select
		drsn.state_name
	 from
		tl_country_state drsn
	 where
		drsn.country_state_id = ap.drivers_license_state
	) as drivers_license_state_name,
	ap.bankruptcy_disposition,
	ap.bankruptcy_discharge_date,
	ap.occupation,
	ap.height_inches,
	ap.weight_pounds,
	ap.weght_previous_year,
	ap.reason_for_weight_change,
	ap.waist_inches,
	ap.last_md_visit,
	ap.last_md_result,
	ap.added_by as application_added_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.added_by
	) as application_added_by_name,
	ap.added_date as application_added_date,
	ap.updated_by as application_updated_by,
	(select
		ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')) + ', ' + rtrim(dbo.clrLSDecrypt(ps.first_name,'{ECEB2AFD-D1D2-4b8f-870D-3C840CB1023B}')))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.updated_by
	) as application_updated_by_name,
	ap.update_date as application_updated_date,
	ap.beneficiary_type,
	ap.medical_authorization_flag,
	ap.citizenship_country_id,
	(select
		cc.country_name
	 from
		tl_country cc
	 where
		cc.country_id = ap.citizenship_country_id
	) as citizenship_country_name,
	ap.doctor_name,
	ap.doctor_addr,
	ap.doctor_city,
	ap.doctor_state,
	(select
		docsn.state_name
	 from
		tl_country_state docsn
	 where
		docsn.country_state_id = ap.doctor_state
	) as doctor_state_name,
	ap.doctor_zip,
	ap.last_visit_date,
	ap.visit_reason,
	ap.findings,
	ap.treatments,
	ap.still_under_treatment_flag,
	ap.prior_consultations_flag,
	ap.prior_consultation_detail,
	ap.unearned_income,
	ap.employer,
	ap.years_at_employer,
	ap.employer_address,
	ap.income_prev_year,
	ap.visa_type,
	ap.job_duties,
	ap.hippa_authorization_flag,
	ap.monthly_expense,
	ap.last_blood_profile_date,
	ap.best_day_to_call,
	ap.best_time_to_call,
	ap.systolic_bp_reading,
	ap.diastolic_bp_reading,
	ap.cholesterol_reading,
	ap.issue_state,
	ap.business_income,
	ap.business_net_worth,
	ap.book_value,
	ap.market_value,
	ap.inspection_income,
	ap.inspection_net_worth,
	ap.inspection_business_income,
	ap.inspection_business_net_worth,
	ap.inspection_book_value,
	ap.inspection_market_value,
	ap.statement_income,
	ap.statement_net_worth,
	ap.statement_business_income,
	ap.statement_business_net_worth,
	ap.statement_book_value,
	ap.statement_market_value,
	ap.other_income,
	ap.other_net_worth,
	ap.other_business_income,
	ap.other_business_net_worth,
	ap.other_book_value,
	ap.other_market_value
from
	policy p,
	insured i,
	application_info_view ap,
	data_mart_address dma,
	data_mart_phone dmp
where
	i.policy_id = p.policy_id and
	ap.policy_person_id = i.policy_person_id and
	dma.person_id = i.person_id and
	dmp.person_id = i.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_CheckLogon
@LogonID as Varchar(50),
@Password as Varchar(8)
AS
Declare @UserID as Integer
Set @UserID = (SELECT
user_id
FROM
aus_user
WHERE
login_id = @LogonID And
password = @Password)
If (@UserID >= 0)
Return @UserID
Else
Return -1

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_DeleteCoverage
(
@policy_coverage_id int,
@amount numeric(12),
@amount1 numeric(12),
@can_take_final_action_flag int,
@can_take_final_action_flag1 int,
@coverage_status char(10),
@coverage_status1 char(10),
@coverage_type char(10),
@coverage_type1 char(10),
@death_benefit_option_code char(10),
@death_benefit_option_code1 char(10),
@equivalent_age int,
@equivalent_age1 int,
@perm_flat_extra_amount numeric(5,2),
@perm_flat_extra_amount1 numeric(5,2),
@temp_flat_extra_amount numeric(5,2),
@temp_flat_extra_amount1 numeric(5,2),
@temp_flat_extra_period int,
@temp_flat_extra_period1 int,
@flat_extra_reason varchar(100),
@flat_extra_reason1 varchar(100),
@indicator_code char(10),
@indicator_code1 char(10),
@initial_planned_premium numeric(12,2),
@initial_planned_premium1 numeric(12,2),
@investment_objective char(20),
@investment_objective1 char(20),
@perm_table_rating char(20),
@perm_table_rating1 char(20),
@perm_table_reason varchar(100),
@perm_table_reason1 varchar(100),
@plan_code_id char(10),
@plan_code_id1 char(10),
@planned_premium numeric(12,2),
@planned_premium1 numeric(12,2),
@policy_id int,
@policy_id1 int,
@pref_date_of_withdrawl datetime,
@pref_date_of_withdrawl1 datetime,
@premium_mode char(20),
@premium_mode1 char(20),
@purpose_of_coverage_id char(10),
@purpose_of_coverage_id1 char(10),
@temp_table_rating char(20),
@temp_table_rating1 char(20),
@temp_table_reason varchar(100),
@temp_table_reason1 varchar(100)
)
AS
SET NOCOUNT OFF
DELETE FROM policy_coverage WHERE (policy_coverage_id = @policy_coverage_id) AND (amount = @amount OR @amount1 IS NULL AND amount IS NULL) AND (can_take_final_action_flag = @can_take_final_action_flag OR @can_take_final_action_flag1 IS NULL AND can_take_final_action_flag IS NULL) AND (coverage_status = @coverage_status OR @coverage_status1 IS NULL AND coverage_status IS NULL) AND (coverage_type = @coverage_type OR @coverage_type1 IS NULL AND coverage_type IS NULL) AND (death_benefit_option_code = @death_benefit_option_code OR @death_benefit_option_code1 IS NULL AND death_benefit_option_code IS NULL) AND (equivalent_age = @equivalent_age OR @equivalent_age1 IS NULL AND equivalent_age IS NULL) AND (perm_flat_extra_amount = @perm_flat_extra_amount OR @perm_flat_extra_amount1 IS NULL AND perm_flat_extra_amount IS NULL) AND (temp_flat_extra_amount = @temp_flat_extra_amount OR @temp_flat_extra_amount1 IS NULL AND temp_flat_extra_amount IS NULL) AND (temp_flat_extra_period = @temp_flat_extra_period OR @temp_flat_extra_period1 IS NULL AND temp_flat_extra_period IS NULL) AND (flat_extra_reason = @flat_extra_reason OR @flat_extra_reason1 IS NULL AND flat_extra_reason IS NULL) AND (indicator_code = @indicator_code OR @indicator_code1 IS NULL AND indicator_code IS NULL) AND (initial_planned_premium = @initial_planned_premium OR @initial_planned_premium1 IS NULL AND initial_planned_premium IS NULL) AND (investment_objective = @investment_objective OR @investment_objective1 IS NULL AND investment_objective IS NULL) AND (perm_table_rating = @perm_table_rating OR @perm_table_rating1 IS NULL AND perm_table_rating IS NULL) AND (perm_table_reason = @perm_table_reason OR @perm_table_reason1 IS NULL AND perm_table_reason IS NULL) AND (plan_code_id = @plan_code_id OR @plan_code_id1 IS NULL AND plan_code_id IS NULL) AND (planned_premium = @planned_premium OR @planned_premium1 IS NULL AND planned_premium IS NULL) AND (policy_id = @policy_id OR @policy_id1 IS NULL AND policy_id IS NULL) AND (pref_date_of_withdrawl = @pref_date_of_withdrawl OR @pref_date_of_withdrawl1 IS NULL AND pref_date_of_withdrawl IS NULL) AND (premium_mode = @premium_mode OR @premium_mode1 IS NULL AND premium_mode IS NULL) AND (purpose_of_coverage_id = @purpose_of_coverage_id OR @purpose_of_coverage_id1 IS NULL AND purpose_of_coverage_id IS NULL) AND (temp_table_rating = @temp_table_rating OR @temp_table_rating1 IS NULL AND temp_table_rating IS NULL) AND (temp_table_reason = @temp_table_reason OR @temp_table_reason1 IS NULL AND temp_table_reason IS NULL)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_DEMO
@personID int
AS
select * from person,
person_address,
person_address_line,
person_phone,
requirement_information,
part2
where person.person_id = @personID
and person_address.person_id = person.person_id
and person_address_line.person_id = person.person_id
and person_phone.person_id = person.person_id
and requirement_information.person_id = person.person_id
and requirement_type_id = [part2]
and requirement_information.requirement_information_id = part2.requirement_information_id
and address_type = [home]
and phone_type_id = [home]

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetAddress
@insured_id  as varchar(4)    --same as insured_id
AS
SELECT     policy_person.policy_person_id AS insured_id, person_address.city AS city, person_address.country_id AS country,
person_address.postal_code AS postal_code, person_address.address_line1 AS addr1, person_address.address_line2 AS addr2,
person_address.address_line3 AS addr3, person_address.address_type_code AS addr_type
FROM         policy_person INNER JOIN
person_address ON policy_person.person_id = person_address.person_id
WHERE   policy_person.policy_person_id =@insured_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE USP_AUS_GetAgencyInfo
AS
select person.last_name  as agencyname
from person , agency
where agency.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetAgencyInfobyPolicyID
@policy_id as int
AS
SELECT         	person.last_name AS company,
person_address_line.address_line AS addr1,
person_address.city AS city,
person_address.postal_code AS postal_code,
person_address.country_state_id AS state,
person_phone.area_code AS area_code,
person_phone.prefix AS prefix,
person_phone.suffix AS suffix,
rtrim(person_phone.area_code) + '-'  + rtrim( person_phone.prefix) + '-' + rtrim(person_phone.suffix) as phonenumber,
person.email_address AS email_address
FROM        	agency INNER JOIN
person ON agency.person_id = person.person_id INNER JOIN
person_address ON person.person_id = person_address.person_id INNER JOIN
person_address_line ON person_address.person_id = person_address_line.person_id AND
person_address.address_type_code = person_address_line.address_type_code INNER JOIN
person_phone ON person.person_id = person_phone.person_id INNER JOIN
policy_person ON person.person_id = policy_person.person_id
WHERE     	(person_phone.phone_type_code = 'work' and policy_person.policy_id = @policy_id )

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetAgentbyPolicyID
@policy_id as int
AS
SELECT     		 RTRIM(person.first_name) + '  ' +RTRIM(person.last_name)  AS agentname,
agent.agent_number AS agent_number,
person.last_name AS last_name,
person.first_name AS first_name,
person.email_address AS email_address,
person_address.city AS city,
person_address.country_id AS country,
person_address.postal_code AS postal_code,
person_address.country_state_id AS state,
person_phone.country_calling_code AS country_code,
person_phone.area_code AS area_code,
person_phone.suffix AS suffix,
person_phone.prefix AS prefix,
rtrim(person_phone.area_code) + '-' + rtrim(person_phone.prefix) + ' -' + rtrim(person_phone.suffix) as phone,
policy_person_agent.commission_split,
person_address_line.address_line AS addr1
FROM         		 policy_person INNER JOIN
agent ON policy_person.person_id = agent.person_id INNER JOIN
person ON policy_person.person_id = person.person_id AND agent.person_id = person.person_id INNER JOIN
person_address ON person.person_id = person_address.person_id INNER JOIN
person_phone ON person.person_id = person_phone.person_id INNER JOIN
policy_person_agent ON policy_person.policy_person_id = policy_person_agent.policy_person_id INNER JOIN
person_address_line ON person_address.person_id = person_address_line.person_id AND
person_address.address_type_code = person_address_line.address_type_code
WHERE     		(policy_person.role_id LIKE 'agent%')
AND (person_phone.phone_type_code = 'work')
AND (policy_person.policy_id = @policy_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetBeneficiariesbyInsuredID
@insured_id as int
AS
select
rtrim(person.first_name) + ' '+ rtrim(person.last_name) as 'fullname',
policy_coverage.amount AS amount,
case coverage_person.role_id
when 'primarybeneficiary' then 'P'
when 'contigbeneficiary' then 'C'
end as role,
coverage_person.relationship_to_insured_code AS relationship,
coverage_person_beneficiary.percentage AS percentage,
coverage_person_beneficiary.amount AS amount,
coverage_person.person_id,
coverage_person_beneficiary.irrevokable_indicator AS irrevoke,
person.first_name AS fname, person.last_name AS lname,
coverage_person_beneficiary.beneficiary_type AS benetype,
person.tax_id AS tax_id,
convert(char(10),person.birth_date,101) as birth_date,
datediff(day, datepart(year, birth_date),datepart(year, getdate())) as age
from
coverage_person,
policy_coverage,
person,
coverage_person_beneficiary
where
coverage_person.policy_coverage_id =
(select cp.policy_coverage_id from coverage_person_insured cpi, coverage_person cp
where cpi.policy_person_id = @insured_id and cpi.coverage_person_id = cp.coverage_person_id) and
coverage_person.role_id like '%beneficiary' and
policy_coverage.policy_coverage_id = coverage_person.policy_coverage_id and
person.person_id = coverage_person.person_id and
coverage_person_beneficiary.coverage_person_id = coverage_person.coverage_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetCompanies
AS
select 	RTrim(cmp.company_code) as CompanyCode,
(RTrim(cmp.company_code) + ' - ' + RTrim(prs.last_name)) as CompCodeName,
RTrim(prs.last_name) as CompanyNames
from 	company cmp,
person prs
where 	cmp.person_id = prs.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetCountries
AS
Select 	country_id,
country_name
From 	tl_country

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetCountryState
AS
SELECT     state_code, state_name, country_id
FROM         tl_country_state

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_getEventCount
@evtcount int =null output
AS
select count(*) as evtcount from aus_event where schedule_datetime is NULL and status = 1

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetFamilyHistorybyInsuredID
@Insured_id as int
AS
SELECT replace( family_history.famhist_relationship_code, 'sib','Sibling') AS Relationship,
case family_history.living_status
when 'L' then 'Living'
when 'D' then 'Deceased'
when 'U' then 'Unknown'
when 'N' then 'Not Answered'
else 'Unknown'
end as status,
family_history.cancer_age AS Cancer,
family_history.heart_disease_age AS Heart,
family_history.other_disease_age AS Other,
family_history.reason_for_death AS Reason,
family_history.age as age
FROM policy_person  INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
requirement_information INNER JOIN
family_history ON requirement_information.requirement_information_id = family_history.requirement_information_id ON
person.person_id = requirement_information.person_id
where policy_person.policy_person_id = @Insured_id
/*
SELECT replace( family_history.famhist_relationship_code, 'sib','Sibling') AS Relationship,
case family_history.living_status
when 'L' then 'Living'
when 'D' then 'Deceased'
when 'U' then 'Unknown'
when 'N' then 'Not Answered'
else 'Unknown'
end as status,
case family_history.age
when 0 then '  '
end as age,
--family_history.cancer_age AS Cancer,
case family_history.cancer_age
when 0  then '  '
end as cancer,
--family_history.heart_disease_age AS Heart,
case  family_history.heart_disease_age
when 0 then ' '
end as heart,
case family_history.other_disease_age
when 0 then ' '
end as other,
--family_history.other_disease_age AS Other,
family_history.reason_for_death AS Reason
FROM policy_person  INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
requirement_information INNER JOIN
family_history ON requirement_information.requirement_information_id = family_history.requirement_information_id ON
person.person_id = requirement_information.person_id
where policy_person.policy_person_id = @Insured_id
*/

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetFamilyRelationships
AS
SELECT     famhist_relationship_code AS familyrelationships
FROM         tl_family_history_relationship

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_AUS_GetInsuredBannerByInsuredID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[usp_AUS_GetInsuredBannerByInsuredID]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE PROCEDURE usp_AUS_GetInsuredBannerByInsuredID
@insuredID as Integer
AS
SELECT
(RTrim(person.first_name) + ' ' + Rtrim(person.last_name)) + '' +
Cast(policy_person_insured.underwriting_amount as Varchar(20)) + '' +
(Select
Case
When policy_person_insured.issue_age is null Then ''
Else Cast(policy_person_insured.issue_age as Varchar(8))
End) AS UserInfo
FROM
policy_person_insured INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id
WHERE
policy_person_insured.policy_person_id  = @insuredID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_Aus_GetInsuredByPersonID
@PersonID as varchar(15)
AS
Select 	prs.last_name,
prs.first_name,
prs.middle_name,
prs.title,
prs.suffix,
prs.marital_status,
prs.sex,
prs.birth_date,
prs.tax_id
From 	person As prs
/* Left Join
(requirement_information as rqi Inner Join
part2 as pt2 on pt2.requirement_information_id = rqi.requirement_information_id)
On prs.person_id = rqi.person_id,
person_address pad */
Where 	prs.person_id = @PersonID
/* And
pad.person_id = prs.person_id  */

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_AUS_GetInsuredInfoHeaderByPolicyID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[usp_AUS_GetInsuredInfoHeaderByPolicyID]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE PROCEDURE usp_AUS_GetInsuredInfoHeaderByPolicyID
@policy_id as varchar(20)
AS
SELECT    rtrim(person.first_name) + ' ' + rtrim(person.last_name) as 'insured_name',
policy_person.policy_person_id as 'insured_id',
policy_person.policy_id AS 'policy_id',
policy_person_insured.underwriting_amount as 'underwriting_amount',
tobacco.tobacco_use_id,
---   (datediff(day, datepart(year, birth_date),datepart(year, getdate()))) as 'issue_age'
policy_person_insured.issue_age
-- insured_application_info.issue_age
FROM         person INNER JOIN
policy_person ON person.person_id = policy_person.person_id INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id INNER JOIN
insured_application_info ON policy_person_insured.policy_person_id = insured_application_info.policy_person_id INNER JOIN
tobacco ON insured_application_info.requirement_information_id = tobacco.requirement_information_id
WHERE     (policy_person.policy_id = @policy_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetInsuredInformation
@insured_id as int
AS
SELECT             insured_application_info.policy_person_id as 'Insured_id',
RTRIM(person.title) + ' ' + RTRIM(person.first_name) + ' ' + RTRIM(person.last_name) + ' ' + RTRIM(person.suffix) AS  'fullname',
person.first_name AS 'fname',
person.last_name as 'lname',
person.title AS 'title',
person.suffix AS' suffix',
person.tax_type_id AS' tax_type_id',
convert(char(20),  person.birth_date, 101) AS 'birth_date',
person.sex AS sex,
person.marital_status AS 'marital_status',
insured_application_info.birth_country AS 'birth_country',
insured_application_info.residence_country AS 'residence_country',
insured_application_info.income AS 'income',
insured_application_info.drivers_license_number AS 'drivers_license_number',
insured_application_info.drivers_license_country_id AS 'drivers_license_country_id',
(select  country_id  from tl_country_state where country_state_id = drivers_license_country_id) AS 'drivers_license_country',
insured_application_info.drivers_license_state AS 'drivers_license_state_id',
(select state_code from tl_country_state where country_state_id = drivers_license_state) AS 'drivers_license_state',
insured_application_info.occupation AS 'occupation',
insured_application_info.height_inches AS 'height_inches',
insured_application_info.weight_pounds AS 'weight_pounds_current',
insured_application_info.weght_previous_year AS 'weight_pounds_prev',
insured_application_info.reason_for_weight_change AS 'reason_for_weight_change',
insured_application_info.income_prev_year AS 'income_prev',
insured_application_info.employer_address AS 'employer_address',
insured_application_info.years_at_employer AS 'years_at_employer',
insured_application_info.employer AS 'employer',
insured_application_info.unearned_income AS 'unearned_income',
insured_application_info.still_under_treatment_flag AS 'still_under_treatment',
policy_person.policy_person_id AS 'insured_id',
insured_application_info.net_worth AS 'net_worth',
insured_application_info.total_inforce AS 'total_inforce',
insured_application_info.replacement_amount AS replacement_amount,
insured_application_info.residence_state AS 'residence_state_id',
(select state_code from tl_country_state
where country_state_id = residence_state) AS residence_state,
insured_application_info.bankruptcy_disposition AS 'bankruptcy_disposition',
insured_application_info.bankruptcy_discharge_date AS 'bankruptcy_discharge_date',
case  insured_application_info.medical_authorization_flag
when  1 then 'Yes'
when 0 then 'No'
else   '  '
end   AS 'medical_authorization_flag',
insured_application_info.citizenship_country_id AS 'citizenship_country',
insured_application_info.doctor_name AS 'doctor_name',
insured_application_info.doctor_addr AS 'doctor_addr',
insured_application_info.doctor_city AS 'doctor_city',
insured_application_info.doctor_state AS 'doctor_state',
insured_application_info.doctor_zip AS 'doctor_zip',
insured_application_info.last_visit_date AS 'last_visit_date',
insured_application_info.treatments AS 'treatments',
insured_application_info.findings AS 'findings',
insured_application_info.visit_reason AS 'visit_reason',
person.tax_id AS 'tax_id'
FROM        policy_person INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
insured_application_info ON policy_person_insured.policy_person_id = insured_application_info.policy_person_id
WHERE     (insured_application_info.policy_person_id = @insured_id)
--exec usp_AUS_GetAddress @insured_id  = @insured_id   , @address_type = 'residence'
--exec usp_AUS_GetPhoneNumber  @policy_person_id = @insured_id,  @phone_type_code ='Home'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_AUS_GetInsuredProducts]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[usp_AUS_GetInsuredProducts]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE PROCEDURE usp_AUS_GetInsuredProducts
@insured_id as int
AS
SELECT    	policy_coverage.amount AS 'amount',
policy_coverage.investment_objective AS 'investment_objective',
policy_coverage.planned_premium AS 'planned_premium',
policy_person_insured.underwriting_amount AS 'UW_Amount',
policy_person_insured.issue_age AS 'issue_age',
coverage_person_insured.coverage_person_id,
policy_coverage.purpose_of_coverage_id AS 'purpose_coverage',
--tl_purpose_of_coverage_desc.description AS 'plan_description1',
tl_plan_code.description as 'plan_description',
coverage_person.relationship_to_insured_code,
policy_coverage.plan_code_id,
policy_coverage.coverage_type,
policy_coverage.premium_mode,
coverage_person.policy_coverage_id, tl_plan_code.description AS plan_description, policy_person.policy_person_id
FROM         policy_person INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id INNER JOIN
coverage_person_insured ON policy_person_insured.policy_person_id = coverage_person_insured.policy_person_id INNER JOIN
coverage_person ON coverage_person_insured.coverage_person_id = coverage_person.coverage_person_id INNER JOIN
policy_coverage ON coverage_person.policy_coverage_id = policy_coverage.policy_coverage_id INNER JOIN
tl_purpose_of_coverage ON policy_coverage.purpose_of_coverage_id = tl_purpose_of_coverage.purpose_of_coverage_id INNER JOIN
tl_purpose_of_coverage_desc ON
tl_purpose_of_coverage.purpose_of_coverage_id = tl_purpose_of_coverage_desc.purpose_of_coverage_id INNER JOIN
tl_plan_code ON policy_coverage.plan_code_id = tl_plan_code.plan_code_id
WHERE     (policy_person.policy_person_id = @insured_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetMIBDetail
@insuredID int
AS
SELECT
mib_code.mib_header_id,
mib_code.seq_number,
mib_code.field_id,
mib_code.data_item
FROM
insured_requirement INNER JOIN
requirement_information ON insured_requirement.requirement_information_id = requirement_information.requirement_information_id INNER JOIN
mib_header ON requirement_information.requirement_information_id = mib_header.requirement_information_id INNER JOIN
mib_code ON mib_header.mib_header_id = mib_code.mib_header_id
WHERE
insured_requirement.policy_person_id = @insuredID AND (insured_requirement.requirement_code = 'MIB')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetMIBHeader
@insuredID int
AS
SELECT
mib_header.mib_header_id,
mib_header.dcode,
mib_header.csy,
mib_header.last_name,
mib_header.first_name,
mib_header.birth_date,
mib_header.policy_number,
mib_header.place_of_birth,
mib_header.reply_type,
mib_header.application_prefix,
mib_header.error_msg_text,
mib_header.rec_type,
mib_header.inq_number,
mib_header.inq_type,
mib_header.inquiry_date,
mib_header.modify_datetime
FROM
insured_requirement INNER JOIN
requirement_information ON insured_requirement.requirement_information_id = requirement_information.requirement_information_id INNER JOIN
mib_header ON requirement_information.requirement_information_id = mib_header.requirement_information_id
WHERE
insured_requirement.policy_person_id = @insuredID AND (insured_requirement.requirement_code = 'MIB')
ORDER BY
mib_header.last_name ASC

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetMVRDetailByInsuredID
@insuredID int
AS
SELECT
mvr_detail.data,
mvr_detail.record_type
FROM
mvr_detail INNER JOIN
mvr_header ON mvr_detail.mvr_header_id = mvr_header.mvr_header_id INNER JOIN
requirement_information ON mvr_header.requirement_information_id = requirement_information.requirement_information_id INNER JOIN
insured_requirement ON requirement_information.requirement_information_id = insured_requirement.requirement_information_id
WHERE
(insured_requirement.policy_person_id = @insuredID)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetMVRHeaderByInsuredID
@insuredID int
AS
SELECT
mvr_header.report_date,
mvr_header.state,
mvr_header.license_number,
mvr_header.license_status,
mvr_header.license_class,
mvr_header.expire_date,
mvr_header.issue_date,
mvr_header.restrictions,
mvr_header.report_status,
mvr_header.license_city_state,
mvr_header.license_address,
mvr_header.last_name + ', ' + mvr_header.first_name + ', ' + mvr_header.middle_name as license_name,
mvr_header.driver_information
FROM
mvr_detail INNER JOIN
mvr_header ON mvr_detail.mvr_header_id = mvr_header.mvr_header_id INNER JOIN
requirement_information ON mvr_header.requirement_information_id = requirement_information.requirement_information_id INNER JOIN
insured_requirement ON requirement_information.requirement_information_id = insured_requirement.requirement_information_id
WHERE insured_requirement.policy_person_id = @insuredID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE@noteID as Integer
AS
SELECT
RTrim(person.first_name) + ' ' + RTrim(person.last_name) as 'Person',
RTrim(notes.topic),
RTrim(notes.note_type),
RTrim(notes.visibility),
notes.added_date,
notes.update_date,
notes.diary_date,
notes.note,
(SELECT
RTrim(person.first_name) + ' ' + RTrim(person.last_name)
FROM
policy_person_insured INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id
WHERE
policy_person_insured.policy_person_id = notes.policy_person_id) as 'Insured'
FROM
aus_user INNER JOIN
notes ON aus_user.user_id = notes.author INNER JOIN
person ON aus_user.person_id = person.person_id
WHERE
note_id = @noteID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetNotesByPolicyID
@policyID int
AS
SELECT
notes.note_id,
notes.policy_person_id,
notes.note_type,
notes.topic,
notes.visibility,
notes.added_date,
notes.update_date,
notes.diary_date,
notes.note,
(Select RTrim(person.first_name) + ' ' + RTrim(person.last_name)) as insured_name,
(SELECT RTrim(person.first_name) + ' ' + RTrim(person.last_name)
FROM aus_user INNER JOIN
person ON aus_user.person_id = person.person_id
WHERE notes.author = aus_user.user_id) as author_name
FROM
policy_person_insured INNER JOIN
notes ON policy_person_insured.policy_person_id = notes.policy_person_id INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id LEFT OUTER JOIN
person ON policy_person.person_id = person.person_id
WHERE
(policy_person.policy_id = 1)
AND (policy_person.role_id LIKE '%insured%')
ORDER BY
notes.added_date DESC

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetNotesByPolicyIDInsuredID
@policyID int,
@insuredID int
AS
SELECT
notes.note_id,
notes.policy_person_id,
notes.note_type,
notes.topic,
notes.visibility,
notes.added_date,
notes.update_date,
notes.diary_date,
notes.note,
(Select RTrim(person.first_name) + ' ' + RTrim(person.last_name)) as insured_name,
(SELECT RTrim(person.first_name) + ' ' + RTrim(person.last_name)
FROM aus_user INNER JOIN
person ON aus_user.person_id = person.person_id
WHERE notes.author = aus_user.user_id) as author_name
FROM
policy_person_insured INNER JOIN
notes ON policy_person_insured.policy_person_id = notes.policy_person_id INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id LEFT OUTER JOIN
person ON policy_person.person_id = person.person_id
WHERE
(policy_person.policy_id = @policyID)
AND (policy_person_insured.policy_person_id = @insuredID)
AND (policy_person.role_id LIKE '%insured%')
ORDER BY
notes.added_date DESC

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetNoteTypes
AS
Select
RTrim(note_type) as [Text],
RTrim(note_type) as [Value]
From
tl_note_type
Order By
note_type

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetOwner_PayorbyPolicyID
@policy_id as varchar(20),
@person_type as varchar(20)
AS
SELECT    	rtrim( person.first_name) + ' ' + rtrim( person.last_name ) as  fullname,
person.first_name AS fname,
person.last_name AS lname,
person.tax_id as tax_id,
person_address.city AS city,
person_address.country_id AS country,
person_address.postal_code AS postal_code,
person_address.country_state_id AS state,
person_address_line.address_line AS addr1,
policy_person.relationship_to_insured as relationship,
convert(char(20),person.birth_date,101) as birth_date,
person.person_type_id as persontype
FROM         	policy_person INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
person_address ON person.person_id = person_address.person_id INNER JOIN
person_address_line ON person_address.person_id = person_address_line.person_id AND
person_address.address_type_code = person_address_line.address_type_code
WHERE     	(policy_person.role_id = @person_type)
AND (person_address_line.sequence_no = 0)
AND (policy_person.policy_id = @policy_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPersonByPersonID
@PersonID as int
AS
SELECT
title,
first_name,
middle_name,
last_name,
suffix,
client_id,
sex,
tax_id,
email_address
FROM
person
WHERE
person_id = @PersonID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPersons AS
select top 100 *
from person

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPhoneNumber
@insured_id as int
--@--phone_type_code as varchar(20)
AS
SELECT    	policy_person.policy_person_id as 'Insured_id',
person_phone.phone_type_code AS 'phone_type_code',
person_phone.area_code AS 'area_code',
person_phone.prefix AS 'prefix',
person_phone.suffix AS 'suffix',
rtrim(person_phone.area_code) + '-' + rtrim(person_phone.prefix) + '-' + rtrim(person_phone.suffix) as 'phone_number',
rtrim (person_phone.country_calling_code) + '-' + rtrim(person_phone.area_code) + '-' + rtrim(person_phone.prefix) + '-' + rtrim(person_phone.suffix) as 'international_phone_number',
person_phone.country_calling_code AS 'country_calling_code'
FROM         	policy_person INNER JOIN
person_phone ON policy_person.person_id = person_phone.person_id
WHERE     	(policy_person.policy_person_id = @insured_id)
AND (person_phone.phone_type_code = 'Home')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPolicy_FaceAmountbyID
@policy_id as varchar(20)
AS
select sum(amount) from policy_coverage
where policy_id = @policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPolicyHeaderInfobyID
@policy_id as varchar(20)
AS
SELECT     policy_number AS 'Policy_number',
(select sum(amount) from policy_coverage where policy_id = @policy_id ) as 'FaceAmount',
policy_status_code AS 'policy_status_code',
convert(char(20), receive_date,101) as 'receive_date',
(SELECT count(*) FROM policy_person where (policy_id = @policy_id) AND (role_id = 'insured')) AS 'numinsured'
FROM         policy
WHERE     (policy_id = @policy_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPolicyInfobyPolicyID
@policy_id as int
AS
SELECT             policy.policy_number AS Policy_Number,
convert(char(20),policy.receive_date,101) as receive_date,
convert(char(20),policy.issue_date,101) as issue_date,
policy.cwa_amount as cwa_amount,
team.team_name AS team_name,
policy.team_id as team_id,
person_1.last_name AS underwriter,
policy.underwriter_id as underwriter_id,
person_2.last_name AS company,
policy.company_code as company_code,
convert(char(20),policy.agent_signed_date,101) AS agent_signed_date,
rtrim(person.last_name) + ',' + RTRIM(person.first_name) AS Name ,
(select sum(amount) from policy_coverage where policy_id = @policy_id ) as 'FaceAmount'
FROM         	policy INNER JOIN
policy_person ON policy.policy_id = policy_person.policy_id INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
team ON policy.team_id = team.team_id INNER JOIN
aus_user ON policy.underwriter_id = aus_user.user_id INNER JOIN
person person_1 ON aus_user.person_id = person_1.person_id INNER JOIN
company ON policy.company_code = company.company_code INNER JOIN
person person_2 ON company.person_id = person_2.person_id  INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id
where policy.policy_id = @policy_id and policy_person_insured.primary_insured_flag = 1

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPolicyNumByPolicyID
@PolicyID int
AS
Select 	company_code,
policy_number
From 	policy
Where  policy_id = @PolicyID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPolicyNumInsured
@policy_id as varchar (20)
AS
SELECT     COUNT(*) AS Expr1
FROM         policy INNER JOIN
policy_person ON policy.policy_id = policy_person.policy_id INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id
WHERE     (policy.policy_id = @policy_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetPurposeofCoverage
AS
SELECT      purpose_of_coverage_id AS purposeofcoverage
FROM         tl_purpose_of_coverage

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetQuestionsAnswersbyInsuredID
@insured_id as int
AS
SELECT         	part2_answers.answer_text AS answer,
part2_answers.answer_comment AS comments,
tl_questions.question_text AS question,
part2_answers.question_number AS questionnumber
FROM         	policy_person_insured INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
part2_answers INNER JOIN
requirement_information ON part2_answers.requirement_information_id = requirement_information.requirement_information_id ON
person.person_id = requirement_information.person_id INNER JOIN
tl_questions ON part2_answers.question_number = tl_questions.question_number
where 		policy_person_insured.policy_person_id = @insured_id
ORDER BY part2_answers.question_number

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetRelatedPoliciesbyPolicyID
--really the insured_id.... come back and change
@policy_id  as varchar(20)
as
SELECT   company AS Company,
status AS Status,
relationship as Relationship,
convert(char(20), issue_date ,101) AS year_issued,
amount AS amount,
adb_amount AS ADB
from       related_policies
where     policy_person_id =@policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetReviewMessageByPolicyID
@policyID as Int
AS
SELECT
(SELECT
Case
When review_message.message_type = 0 AND review_message.checkoff_flag = 0  Then 0
When review_message.message_type = 0 AND review_message.checkoff_flag = -1  Then 4
Else review_message.message_type
End) as 'message_type',
review_message.review_message_id,
review_message.note_id,
review_message.message,
review_message.checkoff_flag,
review_message.review_message_comment,
review_message.policy_person_id
FROM
review_message INNER JOIN
policy_person ON review_message.policy_person_id = policy_person.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id
WHERE
(policy_person.policy_id = @policyID)
AND (policy_person.role_id  LIKE '%insured%')
ORDER BY
review_message.policy_person_id,
review_message.message_type,
review_message.note_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetReviewMessageTopicByMessageID
(
@messageID as Int,
@insuredID as Int
)
AS
SELECT
(Select
Case
When RTrim(person.first_name)  = '' Then RTrim(person.last_name)
When RTrim(person.last_name)  = '' Then RTrim(person.first_name)
When RTrim(person.first_name) = '' And RTrim(person.last_name)= '' Then 'Unknown'
Else RTrim(person.last_name) + ', ' + RTrim(person.first_name)
End) + 	'' +
review_message.message AS 'TopicInfo'
FROM
policy_person_insured INNER JOIN
policy_person ON policy_person_insured.policy_person_id = policy_person.policy_person_id INNER JOIN
person ON policy_person.person_id = person.person_id,
review_message
WHERE
policy_person_insured.policy_person_id = @insuredID
And review_message.review_message_id = @messageID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetRule
(
@rule_id integer,
@rule_name char(50) output,
@rulebook_id int output,
@description varchar(1000) output,
@added_by int output,
@added_date datetime output,
@added_by_name char(50) output,
@updated_by int output,
@update_date datetime output,
@updated_by_name char(50) output,
@rule_text varchar(2000) output,
@is_active smallint output
)
AS
select
@rule_id = rule_id,
@rule_name = rule_name,
@rulebook_id = rulebook_id,
@description = description,
@added_by = added_by,
@added_date = added_date,
@updated_by = updated_by,
@update_date = update_date,
@is_active = is_active,
@rule_text = rule_text
from te_rule where rule_id = @rule_id
SELECT
@added_by_name = RTRIM(person.first_name) + ' ' + RTRIM(person.last_name)
FROM         person INNER JOIN
aus_user ON person.person_id = aus_user.person_id INNER JOIN
te_rule ON aus_user.user_id = te_rule.added_by
where te_rule.rule_id = @rule_id
SELECT
@updated_by_name = RTRIM(person1.first_name) + ' ' + RTRIM(person1.last_name)
FROM         person person1 INNER JOIN
aus_user ON person1.person_id = aus_user.person_id INNER JOIN
te_rule ON aus_user.user_id = te_rule.updated_by
where te_rule.rule_id = @rule_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetRulebookPlancodes
(
@rulebook_id int
)
AS
SELECT     tr_plan_code_rulebook.plan_code_id, tr_plan_code_rulebook.effective_date, tl_plan_code.plan_code_id as plan_code
FROM         tr_plan_code_rulebook INNER JOIN
tl_plan_code ON tr_plan_code_rulebook.plan_code_id = tl_plan_code.plan_code_id
WHERE     (tr_plan_code_rulebook.rulebook_id = @rulebook_id)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetTeams
AS
Select 	team_id,
RTrim(team_name) as TeamName
From 	team
Order By TeamName

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetTobaccoType
AS
Select *
From tl_Tobacco_Type

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetUnderwriters
AS
Select 	aus.user_id,
(Select
Case
When RTrim(per.first_name)  = '' Then RTrim(per.last_name)
When RTrim(per.last_name)  = '' Then RTrim(per.first_name)
When RTrim(per.first_name) = '' And RTrim(per.last_name)= '' Then 'Unknown'
Else RTrim(per.last_name) + ', ' + RTrim(per.first_name)
End) as 'Person'
From 	person per,
aus_user aus
Where 	per.person_id = aus.person_id
AND aus.user_id > 0
AND per.first_name not like '%AUSsystem%'
Order By Person

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE USP_AUS_GetUnderwritersbyPolicyID
@policy_id as varchar(20)
AS
Select 	aus.user_id,
(Select
Case
When RTrim(per.first_name)  = '' Then RTrim(per.last_name)
When RTrim(per.last_name)  = '' Then RTrim(per.first_name)
When RTrim(per.first_name) = '' And RTrim(per.last_name)= '' Then 'Unknown'
Else RTrim(per.last_name) + ', ' + RTrim(per.first_name)
End) as 'Person'
From 	person per,
aus_user aus,
policy pol
Where 	per.person_id = aus.person_id AND
pol.underwriter_id = aus.user_id and
pol.policy_id = @policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetUserInfo
@userid as int
as
Select distinct
person.first_name,
person.last_name,
aus_user.level_of_authority,
aus_user.login_id
from
aus_user, person
--aus_user_role
where
aus_user.user_id  = @userid
--and aus_user_role.user_id = aus_user.user_id
and aus_user.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_GetValidRulebook
(
@plancodeID nchar(10),
@effective_date datetime
)
AS
declare @rulebookID int
/* SET NOCOUNT ON */
select @rulebookID = (SELECT TOP 1 rulebook_id
FROM tr_plan_code_rulebook
WHERE plan_code_id = @plancodeID AND
effective_date < @effective_date
ORDER BY effective_date DESC)
select * from te_rulebook where rulebook_id = @rulebookID
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertAddressType
(
@code nchar(20),
@langCode nChar(10),
@description nchar(50)
)
AS
/* SET NOCOUNT ON */
insert into tl_address_type values(@code, @code)
insert into tl_address_type_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertAUSUser
(
@user_id int =null output,
@person_id int,
@login_id char (10),
@password char(16),
@is_active smallint,
@level_of_authority numeric(9),
@is_underwriter int,
@role_id int = null
)
AS
INSERT INTO aus_user
(
person_id,
login_id,
password,
is_active,
level_of_authority,
is_underwriter
)
VALUES (
@person_id,
@login_id,
@password,
@is_active,
@level_of_authority,
@is_underwriter
)
select @user_id = @@identity
insert into aus_user_role
(
user_id,
role_id
)
values
(
@user_id,
@role_id
)
return @user_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertBand
@band_id int =null output,
@based_on char(100)
AS
insert into te_band
(
based_on
)
values
(
@based_on
)
select @band_id = @@identity
return @band_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertBeneficiaryType
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_beneficiary_type (beneficiary_type) values(@code)
insert into tl_beneficiary_type_desc (beneficiary_type, language_code, description) values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertCoverage
(
@policy_coverage_id int,
@policy_id int,
@plan_code_id char(10),
@death_benefit_option_code char(10),
@purpose_of_coverage_id char(10),
@coverage_type char(10),
@indicator_code char(10),
@amount numeric(12),
@coverage_status char(10),
@premium_mode char(20),
@investment_objective char(20),
@pref_date_of_withdrawl datetime,
@planned_premium numeric(12,2),
@initial_planned_premium numeric(12,2),
@equivalent_age int,
@can_take_final_action_flag int,
@temp_flat_extra_period int,
@perm_flat_extra_amount numeric(5,2),
@temp_flat_extra_amount numeric(5,2),
@flat_extra_reason varchar(100),
@temp_table_rating char(20),
@temp_table_reason varchar(100),
@perm_table_rating char(20),
@perm_table_reason varchar(100)
)
AS
SET NOCOUNT OFF
INSERT INTO policy_coverage(policy_coverage_id, policy_id, plan_code_id, death_benefit_option_code, purpose_of_coverage_id, coverage_type, indicator_code, amount, coverage_status, premium_mode, investment_objective, pref_date_of_withdrawl, planned_premium, initial_planned_premium, equivalent_age, can_take_final_action_flag, temp_flat_extra_period, perm_flat_extra_amount, temp_flat_extra_amount, flat_extra_reason, temp_table_rating, temp_table_reason, perm_table_rating, perm_table_reason) VALUES (@policy_coverage_id, @policy_id, @plan_code_id, @death_benefit_option_code, @purpose_of_coverage_id, @coverage_type, @indicator_code, @amount, @coverage_status, @premium_mode, @investment_objective, @pref_date_of_withdrawl, @planned_premium, @initial_planned_premium, @equivalent_age, @can_take_final_action_flag, @temp_flat_extra_period, @perm_flat_extra_amount, @temp_flat_extra_amount, @flat_extra_reason, @temp_table_rating, @temp_table_reason, @perm_table_rating, @perm_table_reason)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertCoveragePerson
(
@coverage_person_id int =null output,
@policy_coverage_id int,
@person_id int,
@role_id char(20),
@relationship_to_insured_code char(10)
)
AS
INSERT INTO coverage_person
(
policy_coverage_id,
person_id,
role_id,
relationship_to_insured_code
)
VALUES
(
@policy_coverage_id,
@person_id,
@role_id,
@relationship_to_insured_code
)
select @coverage_person_id = @@identity
return @coverage_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertCoverageType
(
@coverage_type nchar(20),
@description nChar(50),
@external_code nchar(50)
)
AS
INSERT INTO tl_coverage_type
(coverage_type, description, external_code)
VALUES     (@coverage_type, @description, @external_code)	RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertFamHistRelationship
(
@relationshipcode char(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_family_history_relationship values(@relationshipcode)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertFamilyHistory
(
@reqinfo_id int,
@famhist_id int,
@relationship char(20),
@living_status char(10),
@age int,
@cancer_flag int,
@cancer_age int,
@heart_disease_flag int,
@heart_disease_age int
)
AS
/* SET NOCOUNT ON */
insert into family_history values(@famhist_id, @reqinfo_id,@relationship,@living_status,' ', @age, @cancer_flag, @cancer_age, @heart_disease_flag, @heart_disease_age, 0,0,' ')
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertInsuredRequirement
(
@insured_requirement_id int =null output,
@requirement_information_id int,
@requirement_code char(10),
@added_by int,
@added_date datetime,
@closed_date datetime,
@closed_by int,
@closed_disposition char(2),
@needed_for_approval_flag smallint,
@notify_when_satisfied smallint,
@review_message_id int,
@policy_person_id int,
@followup_date datetime,
@ordered_by char (20),
@can_auto_approve int,
@notify_when_received smallint,
@received_id int,
@note_id int
)
AS
INSERT INTO insured_requirement
(
requirement_information_id,
requirement_code,
added_by,
added_date,
closed_date,
closed_by,
closed_disposition,
needed_for_approval_flag,
notify_when_satisfied,
review_message_id,
policy_person_id,
followup_date,
ordered_by,
can_auto_approve,
notify_when_received,
received_id,
note_id
)
VALUES
(
@requirement_information_id,
@requirement_code,
@added_by,
@added_date,
@closed_date,
@closed_by,
@closed_disposition,
@needed_for_approval_flag,
@notify_when_satisfied,
@review_message_id,
@policy_person_id,
@followup_date,
@ordered_by,
@can_auto_approve,
@notify_when_received,
@received_id,
@note_id
)
select @insured_requirement_id = @@identity
return @insured_requirement_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertLanguage    @LangCode nchar(10),   @Description nchar(50),   @exCol nchar(10) AS INSERT INTO tl_language (language_code, description, external_code)  VALUES(@LangCode, @Description, @exCol)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertNote
(
@authorID as Integer,
@insuredID as Integer,
@noteType as Char(10),
@topic as Char(254),
@visibility as Char(10),
@diaryDate as DateTime,
@note as varchar(8000)
)
As
Declare @insertDate as DateTime
Set @insertDate = GetDate()
Insert Into Notes (
author,
policy_person_id,
note_type,
topic,
visibility,
added_date,
diary_date,
note)
Values (
@authorID,
@insuredID,
@noteType,
@topic,
@visibility,
@insertDate,
@diaryDate,
@note +char(13) +char(13))
IF (@@Error = 0)
Return @@Identity
ELSE
Return 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertNoteType
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_note_type values(@code)
insert into tl_note_type_description values (@code, @langCode, @description)	RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPerson
(
@person_id int,
@last_name char (50),
@first_name char (20),
@middle_name char (20),
@title char (10),
@suffix char (10),
@tax_id char (11),
@tax_type_id char (4),
@birth_date datetime,
@sex char (1),
@person_type_id char (10),
@preferred_language_code char (10),
@email_address char (100),
@marital_status char (20),
@client_id char (15)
)
AS
INSERT INTO person
(
person_id,
last_name,
first_name,
middle_name,
title, suffix, tax_id,
tax_type_id,
birth_date,
sex,
person_type_id,
preferred_language_code,
email_address,
marital_status,
client_id
)
VALUES
(
@person_id,
@last_name,
@first_name,
@middle_name,
@title,
@suffix,
@tax_id,
@tax_type_id,
@birth_date,
@sex,
@person_type_id,
@preferred_language_code,
@email_address,
@marital_status,
@client_id
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPersonAddress
@person_id int,
@address_type_code char (20),
@address_line1 char(100),
@address_line2 char(100),
@address_line3 char(100),
@city char (30),
@country_id char (8),
@postal_code char (50),
@country_state_id char (10)
AS
insert into person_address
(
person_id,
address_type_code,
address_line1,
address_line2,
address_line3,
city,
country_id,
postal_code,
country_state_id
)
values
(
@person_id,
@address_type_code,
@address_line1,
@address_line2,
@address_line3,
@city,
@country_id,
@postal_code,
@country_state_id
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPhoneType
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_phone_type values(@code)
insert into tl_phone_type_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPlanCodes
(
@plancodeID nchar(10),
@lobcode nChar(10),
@description nchar(30)
)
AS
/* SET NOCOUNT ON */
insert into tl_plan_code (plan_code_id, line_of_business_code, description) values(@plancodeID, @lobcode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPointAllocation
@point_id int =null output,
@can_points_from numeric,
@can_points_to numeric,
@cad_points_from numeric,
@cad_points_to numeric,
@ao_points_from numeric,
@ao_points_to numeric,
@kickout_flag smallint,
@rate_class char (10),
@smoking_rate_class char(10),
@review_message varchar(1000),
@assign_points int
AS
insert into ta_point_allocation
(
can_points_from,
can_points_to,
cad_points_from,
cad_points_to,
ao_points_from,
ao_points_to,
kickout_flag,
rate_class,
smoking_rate_class,
review_message,
assign_points
)
values
(
@can_points_from,
@can_points_to,
@cad_points_from,
@cad_points_to,
@ao_points_from,
@ao_points_to,
@kickout_flag,
@rate_class,
@smoking_rate_class,
@review_message,
@assign_points
)
select @point_id = @@identity
return @point_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPolicy
(
@policy_id int =null output,
@company_code char (5),
@policy_number char (20),
@application_number char (20),
@issue_date datetime,
@underwriter_id int,
@team_id int,
@application_date datetime,
@agent_signed_date datetime,
@policy_status_code char (15),
@receive_date datetime,
@policy_status char (20),
@dirty_flag smallint,
@current_edit_user_id int,
@current_edit_date datetime,
@payment_mode char (20),
@last_underwrite_date datetime,
@allow_aus_approval smallint,
@final_action_date datetime,
@reinsurance_indicator char (10),
@reinsurance_vendor_code char (10),
@final_action_note_id int,
@updated_by int,
@added_by int,
@final_action_by int,
@cwa_amount numeric(19, 4),
@cwa_date datetime,
@payment_type char (10)
)
AS
declare @dateNow datetime
set @dateNow = getdate()
INSERT INTO policy
(
company_code,
policy_number,
application_number,
issue_date,
underwriter_id,
team_id,
application_date,
agent_signed_date,
policy_status_code,
receive_date,
policy_status,
dirty_flag,
current_edit_user_id,
current_edit_date,
payment_mode_code,
last_underwrite_date,
allow_aus_approval,
final_action_date,
reinsurance_indicator,
reinsurance_vendor_code,
final_action_note_id,
updated_by,
updated_date,
added_by,
final_action_by,
added_date,
cwa_amount,
cwa_date,
payment_method_code
)
VALUES
(
@company_code,
@policy_number,
@application_number,
@issue_date,
@underwriter_id,
@team_id,
@application_date,
@agent_signed_date,
@policy_status_code,
@receive_date,
@policy_status,
@dirty_flag,
@current_edit_user_id,
@current_edit_date,
@payment_mode,
@last_underwrite_date,
@allow_aus_approval,
@final_action_date,
@reinsurance_indicator,
@reinsurance_vendor_code,
@final_action_note_id,
@updated_by,
@dateNow,
@added_by,
@final_action_by,
@dateNow,
@cwa_amount,
@cwa_date,
@payment_type
)
select @policy_id = @@identity
return @policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPolicyCoverage
(
@policy_coverage_id int =null output,
@policy_id int,
@plan_code_id char(10),
@death_benefit_option_code char(10),
@purpose_of_coverage_id char(20),
@coverage_type char(20),
@indicator_code char(20),
@amount numeric(12, 0),
@coverage_status char(10),
@premium_mode char(20),
@investment_objective char(20),
@pref_date_of_withdrawl datetime,
@planned_premium numeric(12, 2),
@initial_planned_premium numeric(12, 2),
@equivalent_age int,
@can_take_final_action_flag int,
@temp_flat_extra_period int,
@perm_flat_extra_amount numeric(5, 2),
@temp_flat_extra_amount numeric(5, 2),
@flat_extra_reason varchar(100),
@temp_table_rating char(20),
@temp_table_reason varchar(100),
@perm_table_rating char(20),
@perm_table_reason varchar(100)
)
AS
INSERT INTO policy_coverage
(
policy_id,
plan_code_id,
death_benefit_option_code,
purpose_of_coverage_id,
coverage_type,
indicator_code,
amount,
coverage_status,
premium_mode,
investment_objective,
pref_date_of_withdrawl,
planned_premium,
initial_planned_premium,
equivalent_age,
can_take_final_action_flag,
temp_flat_extra_period,
perm_flat_extra_amount,
temp_flat_extra_amount,
flat_extra_reason,
temp_table_rating,
temp_table_reason,
perm_table_rating,
perm_table_reason
)
VALUES
(
@policy_id,
@plan_code_id,
@death_benefit_option_code,
@purpose_of_coverage_id,
@coverage_type,
@indicator_code,
@amount,
@coverage_status,
@premium_mode,
@investment_objective,
@pref_date_of_withdrawl,
@planned_premium,
@initial_planned_premium,
@equivalent_age,
@can_take_final_action_flag,
@temp_flat_extra_period,
@perm_flat_extra_amount,
@temp_flat_extra_amount,
@flat_extra_reason,
@temp_table_rating,
@temp_table_reason,
@perm_table_rating,
@perm_table_reason
)
select @policy_coverage_id = @@identity
return @policy_coverage_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPolicyPerson
(
@policy_person_id int =null output,
@policy_id int,
@person_id int,
@role_id nchar(20),
@relationship_to_insured nchar(10)
)
AS
insert into policy_person (policy_id, person_id, role_id, relationship_to_insured) values (@policy_id, @person_id, @role_id, @relationship_to_insured)
select @policy_person_id = @@identity
return @policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_AUS_InsertPolicyPersonInsured]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[usp_AUS_InsertPolicyPersonInsured]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE PROCEDURE usp_AUS_InsertPolicyPersonInsured
(
@policy_person_id int,
@signed_state_id nchar(10),
@underwriting_amount numeric(9),
@issue_age int,
@primary_insured_flag int
)
AS
insert into policy_person_insured
(
policy_person_id,
signed_state_id,
underwriting_amount,
issue_age,
primary_insured_flag
)
values
(
@policy_person_id,
@signed_state_id,
@underwriting_amount,
@issue_age,
@primary_insured_flag
)
return

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPolicyRole
(
@code nchar(20),
@langCode nChar(10),
@description nchar(50)
)
AS
/* SET NOCOUNT ON */
insert into tl_policy_role values(@code)
insert into tl_policy_role_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPolicyStatusCode
(
@code nchar(15),
@langCode nChar(10),
@description nchar(50)
)
AS
/* SET NOCOUNT ON */
insert into tl_policy_status values(@code,'')
insert into tl_policy_status_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertPurposeOfCoverage
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_purpose_of_coverage values(@code)
insert into tl_purpose_of_coverage_desc values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER PROCEDURE usp_AUS_InsertRequirement
(
	@requirement_code char(10),
	@requirement_name char(50),
	@requirement_category smallint,
	@notify_when_satisfied smallint,
	@can_auto_approve smallint,
	@expiration_days integer,
	@followup_days integer,
	@external_followup_days integer,
	@requirement_type_id char(10),
	@default_ordered_by char(20),
	@notify_when_received smallint,
	@is_active smallint,
	@added_by integer,
	@external_requirement_code varchar(50),
	@provider char(20),
	@evidence_type char(50),
	@authorization_required smallint,
	@hippa_auth_required smallint,
	@hierarchy integer,
	@new_business_until_closed smallint
)
AS
declare @addDate as datetime
set @addDate = GetDate()
INSERT INTO tl_requirement
(
	requirement_code,
	requirement_name,
	requirement_category,
	notify_when_satisfied,
	can_auto_approve,
	expiration_days,
	followup_days,
	external_followup_days,
	requirement_type_id,
	default_ordered_by,
	notify_when_received,
	is_active,
	added_by,
	added_date,
	update_date,
	updated_by,
	external_requirement_code,
	provider,
	evidence_type,
	authorization_required,
	hippa_auth_required,
	hierarchy,
	new_business_until_closed
)
VALUES
(
	@requirement_code,
	@requirement_name,
	@requirement_category,
	@notify_when_satisfied,
	@can_auto_approve,
	@expiration_days,
	@followup_days,
	@external_followup_days,
	@requirement_type_id,
	@default_ordered_by,
	@notify_when_received,
	@is_active,
	@added_by,
	@addDate,
	@addDate,
	@added_by,
	@external_requirement_code,
	@provider,
	@evidence_type,
	@authorization_required,
	@hippa_auth_required,
	@hierarchy,
	@new_business_until_closed
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertRequirementGroup
(
@requirement_group_id int = null output,
@name char(20),
@description char(254),
@is_active int
)
AS
INSERT INTO tl_requirement_group
(
name,
description,
is_active
)
VALUES
(
@name,
@description,
@is_active
)
select @requirement_group_id = @@identity
return @requirement_group_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertRequirementInformation
(
@requirement_information_id int =null output,
@person_id int,
@create_date datetime,
@match_method int,
@status char(2),
@vendor_id char(15),
@manual_or_electronic_entry char(1),
@expiration_date datetime,
@added_by int,
@requirement_type_id char(10),
@requirement_request_id int,
@lifespan_days int
)
AS
INSERT INTO requirement_information
(
person_id,
create_date,
match_method,
status,
vendor_id,
manual_or_electronic_entry,
expiration_date,
added_by,
requirement_type_id,
requirement_request_id,
lifespan_days
)
VALUES
(
@person_id,
@create_date,
@match_method,
@status,
@vendor_id,
@manual_or_electronic_entry,
@expiration_date,
@added_by,
@requirement_type_id,
@requirement_request_id,
@lifespan_days
)
select @requirement_information_id = @@identity
return @requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertReviewMessage
(
@review_message_id int =null output,
@note_id int,
@policy_id int,
@sequence_number int,
@message_type char(1),
@message char(254),
@origin_code char(10),
@checkoff_flag smallint,
@message_number int,
@added_date datetime,
@check_off_date datetime,
@checked_off_by int,
@policy_person_id int,
@rule_name char(50),
@review_message_comment text
)
AS
INSERT INTO review_message
(
note_id,
policy_id,
sequence_number,
message_type,
message,
origin_code,
checkoff_flag,
message_number,
added_date,
check_off_date,
checked_off_by,
policy_person_id,
rule_name,
review_message_comment
)
VALUES
(
@note_id,
@policy_id,
@sequence_number,
@message_type,
@message,
@origin_code,
@checkoff_flag,
@message_number,
@added_date,
@check_off_date,
@checked_off_by,
@policy_person_id,
@rule_name,
@review_message_comment
)
select @review_message_id = @@identity
return @review_message_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertRule
(
@rule_id int = null output,
@added_date datetime = null output,
@rule_name char (50),
@rulebook_id int,
@description char (100),
@is_active int,
@added_by int,
@updated_by int,
@rule_text varchar (2000)
)
AS
declare @dateNow datetime
set @dateNow = getdate()
INSERT INTO te_rule
(
rule_name,
rulebook_id,
description,
is_active,
added_date,
added_by,
update_date,
updated_by,
rule_text
)
VALUES (
@rule_name,
@rulebook_id,
@description,
@is_active,
@dateNow,
@added_by,
@dateNow,
@updated_by,
@rule_text)
select @rule_id = @@identity
select @added_date = @dateNow
return

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertRulebook
(
@rulebook_name char (20),
@description char (100),
@effective_date datetime,
@is_active int,
@non_smoking_classes int,
@age_calc_rule int,
@added_by int,
@rulebook_script text,
@smokingMonths int,
@smokingIsPositive smallint,
@rulebook_id int = null output
)
AS
declare @InsertDate datetime
set @InsertDate = GetDate()
INSERT INTO te_rulebook
(	rulebook_name,
description,
effective_date,
is_active,
non_smoking_classes,
added_date,
age_calc_rule,
updated_by,
update_date,
added_by,
smoker_quit_months_duration,
smoker_if_positive_test,
rulebook_script )
VALUES
(	@rulebook_name,
@description,
@effective_date,
@is_active,
@non_smoking_classes,
@InsertDate,
@age_calc_rule,
@added_by,
@InsertDate,
@added_by,
@smokingMonths,
@smokingIsPositive,
@rulebook_script )
select @rulebook_id  = @@identity
return @rulebook_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER PROCEDURE usp_AUS_InsertRuleOption
(
	@rule_id int,
	@option_type int,
	@sequence_no int,
	@review_message varchar(1000),
	@comment_text varchar(1000),
	@requirement_code char(10),
	@requirement_group_id int,
	@rate_class char(10),
	@rate_class_smoking char(10),
	@is_checkable smallint,
	@decline_coverage_flag smallint,
	@allow_jet_issue int,
	@allow_auto_approval int,
	@is_smoker_flag smallint,
	@points int,
	@priority int,
	@allow_auto_ordering int
)
AS
insert into ta_rule_option
(
	rule_id,
	option_type,
	sequence_no,
	review_message,
	comment_text,
	requirement_code,
	requirement_group_id,
	rate_class,
	rate_class_smoking,
	is_checkable,
	decline_policy_flag,
	is_smoker_flag,
	points,
	priority,
	allow_jet_issue,
	allow_auto_approval,
	allow_auto_ordering
)
values (
	@rule_id,
	@option_type,
	@sequence_no,
	@review_message,
	@comment_text,
	@requirement_code,
	@requirement_group_id,
	@rate_class,
	@rate_class_smoking,
	@is_checkable,
	@decline_coverage_flag,
	@is_smoker_flag,
	@points,
	@priority,
	@allow_jet_issue,
	@allow_auto_approval,
	@allow_auto_ordering
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertTeam
(
@team_id int=null output,
@team_name char(20),
@description char(254),
@is_active smallint
)
AS
INSERT INTO team
(
team_name,
description,
is_active
)
VALUES
(
@team_name,
@description,
@is_active
)
select @team_id = @@identity
return @team_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertTobaccoType
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_tobacco_type values(@code, @code)
insert into tl_tobacco_type_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_InsertTobaccoUse
(
@code nchar(20),
@langCode nChar(10),
@description nchar(20)
)
AS
/* SET NOCOUNT ON */
insert into tl_tobacco_use values(@code, @code)
insert into tl_tobacco_use_description values (@code, @langCode, @description)
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_MyWork_DiaryPastDue
@underwriterID as varchar(4),
@mydate as  datetime
as
SELECT     	@mydate as mydate,
policy.policy_number as policy_number,
rtrim(person.first_name) + ' ' +( person.last_name)  as insured_name,
person.last_name,
person.first_name,
convert(char(10), notes.diary_date, 101) as  diary_date,
notes.topic as topic,
policy.policy_id as policy_id
FROM         	policy INNER JOIN
aus_user ON policy.underwriter_id = aus_user.user_id INNER JOIN
policy_person ON policy.policy_id = policy_person.policy_id INNER JOIN
person ON policy_person.person_id = person.person_id INNER JOIN
policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id INNER JOIN
notes ON policy_person_insured.policy_person_id = notes.policy_person_id
WHERE     	(aus_user.user_id = @underwriterID)   AND (convert(char(10),notes.diary_date,101) < =  convert(char(10),@mydate,101))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_MyWork_ReferralInBox
@underwriterID as varchar(4),
@mydate as  datetime
as
SELECT policy.policy_number as policy_number,
rtrim(ins.first_name) + ' ' +(ins.last_name)  as insured_name,
rtrim(auth_person.first_name) + ' ' +(auth_person.last_name)  as author_name,
rtrim(refer_person.first_name) + ' ' +(refer_person.last_name)  as referred_to_name,
convert(char(10), notes.diary_date, 101) as  diary_date,
'<img src=Image/bell.gif>' as past_due,
notes.topic as topic,
policy.policy_id as policy_id
from notes, policy, policy_person_insured, policy_person, person ins, aus_user auth_user, person auth_person, aus_user refer_user, person refer_person
where notes.note_type = 'refer'
and notes.updated_by = auth_user.user_id
and auth_user.person_id = auth_person.person_id
and notes.refer_to_user_id = refer_user.user_id
and refer_user.person_id = refer_person.person_id
and policy.policy_id = policy_person.policy_id
and policy_person.person_id = ins.person_id
and policy_person.policy_person_id = policy_person_insured.policy_person_id
and policy_person_insured.policy_person_id = notes.policy_person_id
and notes.diary_date <=@mydate
and refer_user.user_id = @underwriterID
union
SELECT policy.policy_number as policy_number,
rtrim(ins.first_name) + ' ' +(ins.last_name)  as insured_name,
rtrim(auth_person.first_name) + ' ' +(auth_person.last_name)  as author_name,
rtrim(refer_person.first_name) + ' ' +(refer_person.last_name)  as referred_to_name,
convert(char(10), notes.diary_date, 101) as  diary_date,
'' as past_due,
notes.topic as topic,
policy.policy_id as policy_id
from notes, policy, policy_person_insured, policy_person, person ins, aus_user auth_user, person auth_person, aus_user refer_user, person refer_person
where notes.note_type = 'refer'
and notes.updated_by = auth_user.user_id
and auth_user.person_id = auth_person.person_id
and notes.refer_to_user_id = refer_user.user_id
and refer_user.person_id = refer_person.person_id
and policy.policy_id = policy_person.policy_id
and policy_person.person_id = ins.person_id
and policy_person.policy_person_id = policy_person_insured.policy_person_id
and policy_person_insured.policy_person_id = notes.policy_person_id
and notes.diary_date > @mydate
and refer_user.user_id = @underwriterID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_MyWork_ReferralOutBox
@underwriterID as varchar(4),
@mydate as  datetime
as
SELECT policy.policy_number as policy_number,
rtrim(ins.first_name) + ' ' +(ins.last_name)  as insured_name,
rtrim(auth_person.first_name) + ' ' +(auth_person.last_name)  as author_name,
rtrim(refer_person.first_name) + ' ' +(refer_person.last_name)  as referred_to_name,
convert(char(10), notes.diary_date, 101) as  diary_date,
'<img src=Image/bell.gif>' as past_due,
notes.topic as topic,
policy.policy_id as policy_id
from notes, policy, policy_person_insured, policy_person, person ins, aus_user auth_user, person auth_person, aus_user refer_user, person refer_person
where notes.note_type = 'refer'
and notes.author = auth_user.user_id
and auth_user.person_id = auth_person.person_id
and notes.refer_to_user_id = refer_user.user_id
and refer_user.person_id = refer_person.person_id
and policy.policy_id = policy_person.policy_id
and policy_person.person_id = ins.person_id
and policy_person.policy_person_id = policy_person_insured.policy_person_id
and policy_person_insured.policy_person_id = notes.policy_person_id
and notes.author <> notes.refer_to_user_id
and notes.diary_date <= @mydate
and auth_user.user_id = @underwriterID
union
SELECT policy.policy_number as policy_number,
rtrim(ins.first_name) + ' ' +(ins.last_name)  as insured_name,
rtrim(auth_person.first_name) + ' ' +(auth_person.last_name)  as author_name,
rtrim(refer_person.first_name) + ' ' +(refer_person.last_name)  as referred_to_name,
convert(char(10), notes.diary_date, 101) as  diary_date,
'' as past_due,
notes.topic as topic,
policy.policy_id as policy_id
from notes, policy, policy_person_insured, policy_person, person ins, aus_user auth_user, person auth_person, aus_user refer_user, person refer_person
where notes.note_type = 'refer'
and notes.author = auth_user.user_id
and auth_user.person_id = auth_person.person_id
and notes.refer_to_user_id = refer_user.user_id
and refer_user.person_id = refer_person.person_id
and policy.policy_id = policy_person.policy_id
and policy_person.person_id = ins.person_id
and policy_person.policy_person_id = policy_person_insured.policy_person_id
and policy_person_insured.policy_person_id = notes.policy_person_id
and notes.author <> notes.refer_to_user_id
and notes.diary_date > @mydate
and auth_user.user_id = @underwriterID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_MyWork_Work
@underwriterID  as  varchar(4),
@mydate as datetime
AS
select  policy_status_code,
convert(char(20),DATEDIFF(day, application_date, @mydate) ,101) AS no_of_days,  1 as numpol
from policy
where underwriter_id = @underwriterID
and policy_status_code in('New Business' , 'Pending' , 'Pending Mail', 'Final Action')
order by policy_status_code, no_of_days

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_MyWorkRequirementsPastDue
@underwriterID as varchar(4),
@followupdate as datetime
AS
SELECT CONVERT(char(20), insured_requirement.followup_date, 101) AS 'followup_date',
RTRIM(person.last_name) + ', ' + RTRIM(person.first_name)  AS 'insured_name',
insured_requirement.requirement_code AS'requirementtype',
policy.policy_number as policy_number,
policy.policy_id as policy_id
from   insured_requirement, policy_person, policy, person
where  policy_person.person_id = person.person_id
and policy_person.policy_id = policy.policy_id
and insured_requirement.policy_person_id = policy_person.policy_person_id
and insured_requirement.followup_date <= @followupdate
and policy.underwriter_id= @underwriterID

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_Search
@CompanyID as Varchar(5),
@PolicyNum as Varchar(20),
@InsuredFirstName as Varchar(20),
@InsuredLastName as VarChar(50),
@TaxID as Varchar(11),
@UnderwriterID as Int,
@TeamID as Int,
@ClientID as Varchar(15),
@Age as Int,
@Status as Varchar(15),
@SortField as Varchar(20) = '',
@SortDirection as Varchar(20) = ''
AS
Declare	@SQLText as varchar(8000)
--Debug
/*Declare	@CompanyID as Varchar(5)
Declare	@PolicyNum as Varchar(20)
Declare @InsuredFirstName as Varchar(20)
Declare	@InsuredLastName as VarChar(50)
Declare	@TaxID as Varchar(11)
Declare	@UnderwriterID as Int
Declare	@TeamID as Int
Declare	@ClientID as Varchar(15)
Declare	@Age as Int
Declare	@Status as Varchar(15)
Declare	@SortField as Varchar(20)
Declare	@SortDirection as Varchar(20)
Select @CompanyID = ''
Select @PolicyNum = ''
Select @InsuredFirstName = ''
Select @InsuredLastName = 'H'
Select @TaxID = ''
Select @UnderwriterID = 0
Select @TeamID = 0
Select @ClientID = ''
Select @Age = 0
Select @Status = 'All'
Select @SortField = ''*/
-- old currency line
--	'''$'' + Convert(varchar(20), insured_benefits.amount) as ''face_amount'', '+char(13)+char(9)+
--Core SQL
Set @SQLText = 'SELECT '+char(13)+char(9)+
'dbo.policy.policy_id, '+char(13)+char(9)+
'dbo.policy.company_code as ''co_id'', '+char(13)+char(9)+
'dbo.policy.policy_number as ''policy_num'', '+char(13)+char(9)+
'dbo.policy.priority as ''priority'', '+char(13)+char(9)+
'RTRIM(dbo.person.last_name) + '', '' + RTRIM(dbo.person.first_name) AS Name, '+char(13)+char(9)+
'dbo.person.tax_id as SSN, '+char(13)+char(9)+
'dbo.person.client_id as ''client_Id'', '+char(13)+char(9)+
'dbo.policy_person_insured.underwriting_amount as ''underwriting_amount'', '+char(13)+char(9)+
'Convert(Varchar(20), policy.receive_date, 101) as ''rcv_date'', '+char(13)+char(9)+
'dbo.tl_policy_status.short_code as ''status'', '+char(13)+char(9)+
'(select RTRIM(dbo.person.last_name) + '', '' + RTRIM(dbo.person.first_name) AS Name ' +
' FROM person, aus_user ' +
' WHERE policy.underwriter_id = aus_user.user_id  And person.person_id = aus_user.person_id) as ''underwriter'',' +char(13)+char(9)+
'dbo.team.team_name as ''team'' '+char(13)+
'FROM '+char(13)+char(9)+' policy_person INNER JOIN '+char(13)+char(9)+
'policy ON policy_person.policy_id = policy.policy_id INNER JOIN'+char(13)+char(9)+
'person ON policy_person.person_id = person.person_id INNER JOIN'+char(13)+char(9)+
'policy_person_insured ON policy_person.policy_person_id = policy_person_insured.policy_person_id LEFT OUTER JOIN'+char(13)+char(9)+
'team ON policy.team_id = team.team_id LEFT OUTER JOIN'+char(13)+char(9)+
'tl_policy_status ON policy.policy_status_code = tl_policy_status.policy_status_code'+char(13)+
'WHERE '+char(13)+char(9)+ '	(policy_person_insured.underwriting_amount > 0) AND (policy_person.role_id = ''insured'') '+char(13)
If (@Status = 'All Active')
Begin
Set @SQLText = @SQLText + char(9)+ 'And tl_policy_status.policy_status_code IN (''New Business'', ''Pending Mail'', ''Final Action'', ''Pending'') '+char(13)
End
Else If (@Status <> 'All')
Begin
Set @SQLText = @SQLText + char(9)+ 'And tl_policy_status.policy_status_code = ''' + @Status + ''''+char(13)
End
If (@CompanyID <> '')
Set @SQLText = @SQLText + char(9)+'And policy.company_code = ''' + @CompanyID + ''''+char(13)
If (@PolicyNum <> '')
Set @SQLText = @SQLText + char(9)+'And policy.policy_number Like ''' + @PolicyNum + '%'''+char(13)
If (@TaxID <> '')
Set @SQLText = @SQLText + char(9)+'And person.tax_id Like ''' + @TaxID + '%'''+char(13)
If (@UnderwriterID <> 0)
Set @SQLText = @SQLText + char(9)+'And policy.underwriter_id = ' + Cast(@UnderwriterID as Varchar(12)) + char(13)
If (@TeamID <> 0)
Set @SQLText = @SQLText + char(9)+'And policy.team_id = ' + Cast(@TeamID as Varchar(12)) + char(13)
If (@ClientID <> '')
Set @SQLText = @SQLText + char(9)+'And person.client_id Like ''' + @ClientID + '%'''+char(13)
If (@InsuredFirstName <> '')
Set @SQLText = @SQLText + char(9)+'And person.first_name Like ''' + @InsuredFirstName + '%'''+char(13)
If (@InsuredLastName <> '')
Set @SQLText = @SQLText + char(9)+'And person.last_name Like ''' + @InsuredLastName + '%'''+char(13)
If (@SortField = '')
Set @SQLText = @SQLText + 'ORDER BY '+char(13)+char(9)+'dbo.policy.company_code, policy.policy_number '
Else
Set @SQLText = @SQLText + 'ORDER BY  ' +char(13)+char(9)+ '''' + @SortField + '''' + ' ' +  @SortDirection
Exec(@SQLText)
--debug
--Print (@SQLText)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_SelectCoverage
AS
SET NOCOUNT ON
SELECT policy_coverage_id, policy_id, plan_code_id, death_benefit_option_code, purpose_of_coverage_id, coverage_type, indicator_code, amount, coverage_status, premium_mode, investment_objective, pref_date_of_withdrawl, planned_premium, initial_planned_premium, equivalent_age, can_take_final_action_flag, temp_flat_extra_period, perm_flat_extra_amount, temp_flat_extra_amount, flat_extra_reason, temp_table_rating, temp_table_reason, perm_table_rating, perm_table_reason FROM policy_coverage

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_Set_PolicyInfo
/*
(
@parameter1 datatype = default value,
@parameter2 datatype OUTPUT
)
*/
AS
/* SET NOCOUNT ON */
RETURN

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdateCoverage
(
@policy_coverage_id int,
@policy_id int,
@plan_code_id char(10),
@death_benefit_option_code char(10),
@purpose_of_coverage_id char(10),
@coverage_type char(10),
@indicator_code char(10),
@amount numeric(12),
@coverage_status char(10),
@premium_mode char(20),
@investment_objective char(20),
@pref_date_of_withdrawl datetime,
@planned_premium numeric(12,2),
@initial_planned_premium numeric(12,2),
@equivalent_age int,
@can_take_final_action_flag int,
@temp_flat_extra_period int,
@perm_flat_extra_amount numeric(5,2),
@temp_flat_extra_amount numeric(5,2),
@flat_extra_reason varchar(100),
@temp_table_rating char(20),
@temp_table_reason varchar(100),
@perm_table_rating char(20),
@perm_table_reason varchar(100),
@Original_policy_coverage_id int,
@Original_amount numeric(12),
@Original_amount1 numeric(12),
@Original_can_take_final_action_flag int,
@Original_can_take_final_action_flag1 int,
@Original_coverage_status char(10),
@Original_coverage_status1 char(10),
@Original_coverage_type char(10),
@Original_coverage_type1 char(10),
@Original_death_benefit_option_code char(10),
@Original_death_benefit_option_code1 char(10),
@Original_equivalent_age int,
@Original_equivalent_age1 int,
@Original_perm_flat_extra_amount numeric(5,2),
@Original_perm_flat_extra_amount1 numeric(5,2),
@Original_temp_flat_extra_amount numeric(5,2),
@Original_temp_flat_extra_amount1 numeric(5,2),
@Original_temp_flat_extra_period int,
@Original_temp_flat_extra_period1 int,
@Original_flat_extra_reason varchar(100),
@Original_flat_extra_reason1 varchar(100),
@Original_indicator_code char(10),
@Original_indicator_code1 char(10),
@Original_initial_planned_premium numeric(12,2),
@Original_initial_planned_premium1 numeric(12,2),
@Original_investment_objective char(20),
@Original_investment_objective1 char(20),
@Original_perm_table_rating char(20),
@Original_perm_table_rating1 char(20),
@Original_perm_table_reason varchar(100),
@Original_perm_table_reason1 varchar(100),
@Original_plan_code_id char(10),
@Original_plan_code_id1 char(10),
@Original_planned_premium numeric(12,2),
@Original_planned_premium1 numeric(12,2),
@Original_policy_id int,
@Original_policy_id1 int,
@Original_pref_date_of_withdrawl datetime,
@Original_pref_date_of_withdrawl1 datetime,
@Original_premium_mode char(20),
@Original_premium_mode1 char(20),
@Original_purpose_of_coverage_id char(10),
@Original_purpose_of_coverage_id1 char(10),
@Original_temp_table_rating char(20),
@Original_temp_table_rating1 char(20),
@Original_temp_table_reason varchar(100),
@Original_temp_table_reason1 varchar(100),
@Select_policy_coverage_id int
)
AS
SET NOCOUNT OFF
UPDATE policy_coverage SET policy_coverage_id = @policy_coverage_id, policy_id = @policy_id, plan_code_id = @plan_code_id, death_benefit_option_code = @death_benefit_option_code, purpose_of_coverage_id = @purpose_of_coverage_id, coverage_type = @coverage_type, indicator_code = @indicator_code, amount = @amount, coverage_status = @coverage_status, premium_mode = @premium_mode, investment_objective = @investment_objective, pref_date_of_withdrawl = @pref_date_of_withdrawl, planned_premium = @planned_premium, initial_planned_premium = @initial_planned_premium, equivalent_age = @equivalent_age, can_take_final_action_flag = @can_take_final_action_flag, temp_flat_extra_period = @temp_flat_extra_period, perm_flat_extra_amount = @perm_flat_extra_amount, temp_flat_extra_amount = @temp_flat_extra_amount, flat_extra_reason = @flat_extra_reason, temp_table_rating = @temp_table_rating, temp_table_reason = @temp_table_reason, perm_table_rating = @perm_table_rating, perm_table_reason = @perm_table_reason WHERE (policy_coverage_id = @Original_policy_coverage_id) AND (amount = @Original_amount OR @Original_amount1 IS NULL AND amount IS NULL) AND (can_take_final_action_flag = @Original_can_take_final_action_flag OR @Original_can_take_final_action_flag1 IS NULL AND can_take_final_action_flag IS NULL) AND (coverage_status = @Original_coverage_status OR @Original_coverage_status1 IS NULL AND coverage_status IS NULL) AND (coverage_type = @Original_coverage_type OR @Original_coverage_type1 IS NULL AND coverage_type IS NULL) AND (death_benefit_option_code = @Original_death_benefit_option_code OR @Original_death_benefit_option_code1 IS NULL AND death_benefit_option_code IS NULL) AND (equivalent_age = @Original_equivalent_age OR @Original_equivalent_age1 IS NULL AND equivalent_age IS NULL) AND (perm_flat_extra_amount = @Original_perm_flat_extra_amount OR @Original_perm_flat_extra_amount1 IS NULL AND perm_flat_extra_amount IS NULL) AND (temp_flat_extra_amount = @Original_temp_flat_extra_amount OR @Original_temp_flat_extra_amount1 IS NULL AND temp_flat_extra_amount IS NULL) AND (temp_flat_extra_period = @Original_temp_flat_extra_period OR @Original_temp_flat_extra_period1 IS NULL AND temp_flat_extra_period IS NULL) AND (flat_extra_reason = @Original_flat_extra_reason OR @Original_flat_extra_reason1 IS NULL AND flat_extra_reason IS NULL) AND (indicator_code = @Original_indicator_code OR @Original_indicator_code1 IS NULL AND indicator_code IS NULL) AND (initial_planned_premium = @Original_initial_planned_premium OR @Original_initial_planned_premium1 IS NULL AND initial_planned_premium IS NULL) AND (investment_objective = @Original_investment_objective OR @Original_investment_objective1 IS NULL AND investment_objective IS NULL) AND (perm_table_rating = @Original_perm_table_rating OR @Original_perm_table_rating1 IS NULL AND perm_table_rating IS NULL) AND (perm_table_reason = @Original_perm_table_reason OR @Original_perm_table_reason1 IS NULL AND perm_table_reason IS NULL) AND (plan_code_id = @Original_plan_code_id OR @Original_plan_code_id1 IS NULL AND plan_code_id IS NULL) AND (planned_premium = @Original_planned_premium OR @Original_planned_premium1 IS NULL AND planned_premium IS NULL) AND (policy_id = @Original_policy_id OR @Original_policy_id1 IS NULL AND policy_id IS NULL) AND (pref_date_of_withdrawl = @Original_pref_date_of_withdrawl OR @Original_pref_date_of_withdrawl1 IS NULL AND pref_date_of_withdrawl IS NULL) AND (premium_mode = @Original_premium_mode OR @Original_premium_mode1 IS NULL AND premium_mode IS NULL) AND (purpose_of_coverage_id = @Original_purpose_of_coverage_id OR @Original_purpose_of_coverage_id1 IS NULL AND purpose_of_coverage_id IS NULL) AND (temp_table_rating = @Original_temp_table_rating OR @Original_temp_table_rating1 IS NULL AND temp_table_rating IS NULL) AND (temp_table_reason = @Original_temp_table_reason OR @Original_temp_table_reason1 IS NULL AND temp_table_reason IS NULL)
SELECT policy_coverage_id, policy_id, plan_code_id, death_benefit_option_code, purpose_of_coverage_id, coverage_type, indicator_code, amount, coverage_status, premium_mode, investment_objective, pref_date_of_withdrawl, planned_premium, initial_planned_premium, equivalent_age, can_take_final_action_flag, temp_flat_extra_period, perm_flat_extra_amount, temp_flat_extra_amount, flat_extra_reason, temp_table_rating, temp_table_reason, perm_table_rating, perm_table_reason FROM policy_coverage WHERE (policy_coverage_id = @Select_policy_coverage_id)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdateNoteByNoteID
@noteID as Integer,
@authorID as Integer,
@diaryDate as DateTime,
@visibility as Char(20),
@noteUpdateText as Varchar(8000),
@authorName as Varchar(100),
@insuredName as Varchar(100)
AS
SET NOCOUNT ON
Declare @workDate as DateTime
Set @workDate = GETDATE()
-- if note text is blank don't do full update
If Len(RTrim(@noteUpdateText)) = 0
Begin
Update notes
Set
diary_date = @diaryDate,
visibility = @visibility,
update_date = @workDate
where
note_id = @noteID
End
Else
Begin
Declare @noteText as Varchar(8000)
Declare @topic as Varchar(200)
-- get topic/subject
Set @topic = (Select topic from notes where note_id = @noteID)
-- check to see if this note already hasd an update. If it doesn't
-- add Suplemental title
If  (SELECT CHARINDEX('--- Supplemental note(s) ---', note)
FROM notes WHERE note_id = @noteID) = 0
Begin
Set @noteText = char(9)+ char(9)+ '--- Supplemental note(s) ---' + char(13) +
char(9)+ char(9)+ 'Date: ' + Convert(VarChar(25), @workDate) + char(9)+ 'Author: ' + @authorName + char(9) + char(13) +
char(9)+ char(9)+ char(9)+ @noteUpdateText + char(13)  + char(13)
End
Else
Begin
Set @noteText = char(9)+ char(9)+ 'Date: ' + Convert(VarChar(25), @workDate) + char(9)+ 'Author: ' + @authorName + char(9) + char(13) +
char(9)+ char(9)+ char(9)+ @noteUpdateText + char(13)  + char(13)
End
-- update easy stuff
Update notes
Set
author = @authorID,
diary_date = @diaryDate,
visibility = @visibility,
update_date = @workDate
where
note_id = @noteID
-- insert bulkcopy prcess needs to know the name of the parent database
-- this process gets that name.
-- create temp table
Create Table #Twho
(
spid int,
ecid int,
status varchar(25),
loginame varchar(25),
hostname varchar(25),
blk int,
dbname varchar(50),
cmd varchar(254)
)
-- get db information
Insert Into #Twho
EXEC sp_who  @@SPID
Declare @CurrDB varchar(25)
select @CurrDB = dbname from #Twho
-- enable bulk insert into database
EXEC sp_dboption @CurrDB, 'select into/bulkcopy', 'true'
-- append new note text to existing note text
Declare @ptrval binary(16)
Select @ptrval = TEXTPTR(note)
From notes
Where note_id = @noteID
-- commit update
UPDATETEXT notes.note @ptrval null null @noteText
-- disable bulk insert into database
select @CurrDB = dbname from #Twho
EXEC sp_dboption @CurrDB, 'select into/bulkcopy', 'true'
-- delete temp table
drop table #Twho
End

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdatePersonAddress
@person_id int,
@address_type char(20),
@address_line1 char(100),
@address_line2 char(100),
@address_line3 char(100),
@city char(20),
@country_id char(8),
@postal_code char(50),
@country_state_id char(10)
AS
UPDATE    person_address
SET
address_line1 = @address_line1,
address_line2 = @address_line2,
address_line3 = @address_line3,
city = @city,
country_id = @country_id,
postal_code = @postal_code,
country_state_id = @country_state_id
where person_id = @person_id and address_type_code = @address_type

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdatePlanCodeRulebook
@rulebook_id int,
@effective_date datetime
AS
update tr_plan_code_rulebook
set effective_date = @effective_date
where rulebook_id = @rulebook_id
return 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER PROCEDURE usp_AUS_UpdateRequirement
	@requirement_code char(10),
	@requirement_name char (50),
	@requirement_category smallint,
	@notify_when_satisfied smallint,
	@can_auto_approve smallint,
	@expiration_days integer,
	@followup_days integer,
	@external_followup_days integer,
	@requirement_type_id char(10),
	@default_ordered_by char(20),
	@notify_when_received smallint,
	@is_active smallint,
	@updated_by integer,
	@external_requirement_code varchar(50),
	@provider char(20),
	@evidence_type char(50),
	@authorization_required smallint,
	@hippa_auth_required smallint,
	@hierarchy integer,
	@new_business_until_closed smallint
AS
declare @updDate as datetime
set @updDate = getDate()
UPDATE tl_requirement
SET
	requirement_code = @requirement_code,
	requirement_name =@requirement_name,
	requirement_category = @requirement_category,
	notify_when_satisfied =@notify_when_satisfied,
	can_auto_approve = @can_auto_approve,
	expiration_days = @expiration_days,
	followup_days = @followup_days,
	external_followup_days = @external_followup_days,
	requirement_type_id = @requirement_type_id,
	default_ordered_by = @default_ordered_by,
	notify_when_received = @notify_when_received,
	is_active = @is_active,
	updated_by = @updated_by,
	update_date = @updDate,
	external_requirement_code = @external_requirement_code,
	provider = @provider,
	evidence_type = @evidence_type,
	authorization_required = @authorization_required,
	hippa_auth_required  = @hippa_auth_required,
	hierarchy = @hierarchy,
	new_business_until_closed = @new_business_until_closed
WHERE
	requirement_code = @requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdateReviewMessageNote
@noteID as Integer,
@rmID as Integer,
@messageType as Integer
AS
Update review_message
Set  review_message.note_id = @noteID
Where review_message.review_message_id = @rmID
if @messageType = 0
Begin
Update review_message
Set review_message.checkoff_flag = -1
Where  review_message.review_message_id = @rmID
End
Return @@Error

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_UpdateRule
(
@update_date datetime =null output,
@rule_id int,
@rule_name char(50),
@description varchar(1000),
@is_active int,
@updated_by int,
@rule_text varchar(2000)
)
AS
declare @updDate as datetime
set @updDate = GetDate()
set @update_date = @updDate
UPDATE    te_rule
SET
rule_name = @rule_name,
description = @description,
is_active = @is_active,
update_date = @updDate,
updated_by = @updated_by,
rule_text = @rule_text
where rule_id = @rule_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_person
AS
select * from person,
person_address,
person_address_line,
person_phone,
requirement_information,
part2
where  person_address.person_id = person.person_id
and person_address_line.person_id = person.person_id
and person_phone.person_id = person.person_id
and requirement_information.person_id = person.person_id
and requirement_type_id = [part2]
and requirement_information.requirement_information_id = part2.requirement_information_id
and address_type = [home]
and phone_type_id = [home]

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetAdminAllApplicants 
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
DECLARE @sql2 nvarchar(4000)
DECLARE @sql3 nvarchar(4000)
DECLARE @sql4 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT     p.company_code, p.policy_number AS case_number, p.alternate_case_id AS alternate_case_number, p.receive_date, p.service_associate_id, 
                      dbo.clrLSDecrypt(i.last_name, ''' + @password + ''') AS applicant_last_name, dbo.clrLSDecrypt(i.first_name, ''' + @password + ''') AS applicant_first_name, i.sex AS gender, ppi.applicant_status AS applicant_status_code,
                          (SELECT     code_value
                            FROM          tl_code
                            WHERE      (language_code = ''en-us'') AND (code_type = ''applicant_status'') AND (code_id = ppi.applicant_status)) AS applicant_status, 
                      ppi.applicant_status_date, pc.amount AS amount_applied_for, dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as birth_date,
                          (SELECT     address_line1
                            FROM          person_address AS pa
                            WHERE      (address_type_code = ''RESIDENCE'') AND (person_id = i.person_id)) AS residence_address_line1,
                          (SELECT     address_line2
                            FROM          person_address AS pa
                            WHERE      (address_type_code = ''RESIDENCE'') AND (person_id = i.person_id)) AS residence_address_line2,
                          (SELECT     address_line3
                            FROM          person_address AS pa
                            WHERE      (address_type_code = ''RESIDENCE'') AND (person_id = i.person_id)) AS residence_address_line3,
                          (SELECT     city
                            FROM          person_address AS pa
                            WHERE      (address_type_code = ''RESIDENCE'') AND (person_id = i.person_id)) AS residence_city,
                          (SELECT     LTRIM(RTRIM(cs.state_name)) + '' ('' + LTRIM(RTRIM(cs.state_code)) + '')'' AS Expr1
                            FROM          person_address AS pa INNER JOIN
                                                   tl_country_state AS cs ON pa.country_state_id = cs.country_state_id
                            WHERE      (pa.address_type_code = ''RESIDENCE'') AND (pa.person_id = i.person_id)) AS residence_state,
                          (SELECT     postal_code
                            FROM          person_address AS pa
                            WHERE      (address_type_code = ''RESIDENCE'') AND (person_id = i.person_id)) AS residence_postal_code,
                          (SELECT     area_code
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''HOME'') AND (person_id = i.person_id)) AS home_phone_area_code,
                          (SELECT     prefix
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''HOME'') AND (person_id = i.person_id)) AS home_phone_prefix,
                          (SELECT     suffix
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''HOME'') AND (person_id = i.person_id)) AS home_phone_suffix,'
SET @sql2= N'(SELECT     area_code
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''WORK'') AND (person_id = i.person_id)) AS work_phone_area_code,
                          (SELECT     prefix
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''WORK'') AND (person_id = i.person_id)) AS work_phone_prefix,
                          (SELECT     suffix
                            FROM         person_phone AS ph
                            WHERE      (phone_type_code = ''WORK'') AND (person_id = i.person_id)) AS work_phone_suffix,
                          (SELECT     area_code
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''CELL'') AND (person_id = i.person_id)) AS cell_phone_area_code,
                          (SELECT     prefix
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''CELL'') AND (person_id = i.person_id)) AS cell_phone_prefix,
                          (SELECT     suffix
                            FROM          person_phone AS ph
                            WHERE      (phone_type_code = ''CELL'') AND (person_id = i.person_id)) AS cell_phone_suffix, i.email_address, cpi.final_action_date,
                          (SELECT     RTRIM(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')) AS Expr1
                            FROM          person AS ps INNER JOIN
                                                   aus_user AS u ON ps.person_id = u.person_id
                            WHERE      (u.user_id = cpi.final_action_by_id)) AS final_action_by, cpi.reason_text AS final_action_reason,
                          (SELECT     reason_code
                            FROM          tl_final_action_reason
                            WHERE      (reason_status =
                                                       (SELECT     code_value
                                                         FROM          tl_code AS tl_code_1
                                                         WHERE      (language_code = ''en-us'') AND (code_type = ''applicant_status'') AND (code_id = cpi.coverage_status))) AND 
                                                   (reason_text = cpi.reason_text)) AS reason_code, assoc.association_name, pc.plan_code_id,
                          (SELECT     description
                            FROM          tl_plan_code
                            WHERE      (plan_code_id = pc.plan_code_id)) AS plan_code_description, cpi.g_number, pc.planned_premium,
                          (SELECT     code_value
                            FROM          tl_acord_codes
                            WHERE      (code_type = ''Payment Mode'') AND (code_id = p.payment_mode_code)) AS premium_mode, cpi.web_quoted_class,'
SET @sql3= N'(SELECT     description
                            FROM          ta_rate_table_class
                            WHERE      (rulebook_id =
                                                       (SELECT     TOP (1) rulebook_id
                                                         FROM          rulebook_view
                                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                                type IS NULL) OR
                                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_quoted)) AS applied_for_rate_class,
                          (SELECT     description
                            FROM          ta_rate_table_class AS ta_rate_table_class_2
                            WHERE      (rulebook_id =
                                                       (SELECT     TOP (1) rulebook_id
                                                         FROM          rulebook_view AS rulebook_view_2
                                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                                type IS NULL) OR
                                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_approved)) 
                      AS system_recommended_rate_class,
                          (SELECT     description
                            FROM          ta_rate_table_class AS ta_rate_table_class_1
                            WHERE      (rulebook_id =
                                                       (SELECT     TOP (1) rulebook_id
                                                         FROM          rulebook_view AS rulebook_view_1
                                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                                type IS NULL) OR
                                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_issued)) AS rate_class_approved, 
                      pc.approved_amount AS issued_amount, pc.perm_table_rating AS table_rating, pc.perm_flat_extra_amount AS flat_extra_amount, p.cwa_amount, 
                      ap.income,
                          (SELECT     tobacco_use_id
                            FROM          tobacco
                            WHERE      (requirement_information_id = ap.requirement_information_id)) AS smoker_status, ap.occupation, '
SET @sql4= N'p.lead_number_id AS aggregator_lead_number, p.source_info,
                          (SELECT     partner_id
                            FROM          tl_source_info
                            WHERE      (source_info = p.source_info)) AS partner_id, p.distributor_code, p.underwriter_id,
                          (SELECT     RTRIM(dbo.clrLSDecrypt(last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(first_name, ''' + @password + ''')) AS Expr1
                            FROM          aus_user_view AS uw
                            WHERE      (user_id = p.underwriter_id)) AS underwriter_name,
                          (SELECT     RTRIM(dbo.clrLSDecrypt(last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(first_name, ''' + @password + ''')) AS Expr1
                            FROM          aus_user_view AS sa
                            WHERE      (user_id = p.service_associate_id)) AS service_associate_name,
                          (SELECT     team_name
                            FROM          team AS tm
                            WHERE      (team_id = p.team_id)) AS team_name,
                          (SELECT     TOP (1) agent_number
                            FROM          agent_view
                            WHERE      (policy_id = p.policy_id)) AS agent_1_number,
                          (SELECT     TOP (1) agent_number
                            FROM          agent_view AS agent_view_2
                            WHERE      (policy_id = p.policy_id) AND (agent_number NOT IN
                                                       (SELECT     agent_number
                                                         FROM          agent_view AS agent_view_1
                                                         WHERE      (policy_id = p.policy_id)))) AS agent_2_number,
                          (SELECT     TOP (1) agency_number
                            FROM          agency_view
                            WHERE      (policy_id = p.policy_id)) AS bga_agency_number, p.team_id
FROM         policy_person_insured AS ppi INNER JOIN
                      coverage_person AS cp INNER JOIN
                      coverage_person_insured AS cpi ON cp.coverage_person_id = cpi.coverage_person_id INNER JOIN
                      policy_coverage AS pc ON cp.policy_coverage_id = pc.policy_coverage_id INNER JOIN
                      person AS i ON cp.person_id = i.person_id INNER JOIN
                      policy AS p LEFT OUTER JOIN
                          (SELECT     association_code, name AS association_name
                            FROM          association
                            UNION
                            SELECT     c.company_code AS association_code, dbo.clrLSDecrypt(per.last_name, ''' + @password + ''') AS association_name
                            FROM         company AS c INNER JOIN
                                                  person AS per ON c.person_id = per.person_id
                            WHERE     (per.class_type = ''ASSN'') OR
                                                  (per.class_type = ''GRP'')) AS assoc ON assoc.association_code = p.association_code ON pc.policy_id = p.policy_id ON 
                      ppi.policy_person_id = cpi.policy_person_id INNER JOIN
                      insured_application_info AS ap ON ppi.policy_person_id = ap.policy_person_id) AS wrap '
END
BEGIN
EXEC(@sql1 + @sql2 + @sql3 + @sql4 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetAgeAmountMatrix 
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
DECLARE @sql2 nvarchar(4000)
DECLARE @sql3 nvarchar(4000)
DECLARE @sql4 nvarchar(4000)
DECLARE @sql5 nvarchar(4000)
DECLARE @sql6 nvarchar(4000)
DECLARE @sql7 nvarchar(4000)
DECLARE @sql8 nvarchar(4000)
SET @sql1= N'SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.receive_date,
	p.distributor_code,
	p.source_info,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_a,'
SET @sql2= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_b,'
SET @sql3= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_c,'
SET @sql4= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_d,'
SET @sql5= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_e,'
SET @sql6= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_f,'
SET @sql7= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_g,'
SET @sql8= N'(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 41 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_a_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 51 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_b_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 56 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_c_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 61 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_d_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) < 66 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_e_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = ''applicant_status'') st where (cast(CURRENT_TIMESTAMP - dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as int)/365) >= 66 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> ''CN'') as age_f_amount_h,
	p.team_id
FROM
	policy p '
END
BEGIN
EXEC(@sql1 + @sql2 + @sql3 + @sql4 + @sql5 + @sql6 + @sql7 + @sql8 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE uspGetAllApplicants 
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
DECLARE @sql2 nvarchar(4000)
DECLARE @sql3 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT     p.company_code, p.policy_number AS case_number, p.alternate_case_id AS alternate_case_number, p.receive_date, p.service_associate_id, 
      i.sex AS gender, ppi.applicant_status AS applicant_status_code,
          (SELECT     code_value
            FROM          tl_code
            WHERE      (language_code = ''en-us'') AND (code_type = ''applicant_status'') AND (code_id = ppi.applicant_status)) AS applicant_status, 
      ppi.applicant_status_date, pc.amount AS amount_applied_for, dbo.clrLSDecrypt(i.birth_date, ''' + @password + ''') as birth_date, pa.country_state_id AS residence_state_id,
          (SELECT     RTRIM(state_name) + '' ('' + RTRIM(state_code) + '')'' AS Expr1
            FROM          tl_country_state AS cs
            WHERE      (country_state_id = pa.country_state_id)) AS residence_state, cpi.final_action_date,
          (SELECT     RTRIM(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')) AS Expr1
            FROM          person AS ps INNER JOIN
                                   aus_user AS u ON ps.person_id = u.person_id
            WHERE      (u.user_id = cpi.final_action_by_id)) AS final_action_by, cpi.reason_text AS final_action_reason,
          (SELECT     reason_code
            FROM          tl_final_action_reason
            WHERE      (reason_status =
                                       (SELECT     code_value
                                         FROM          tl_code AS tl_code_1
                                         WHERE      (language_code = ''en-us'') AND (code_type = ''applicant_status'') AND (code_id = cpi.coverage_status))) AND 
                                   (reason_text = cpi.reason_text)) AS reason_code, assoc.association_name, pc.plan_code_id,
          (SELECT     description
            FROM          tl_plan_code
            WHERE      (plan_code_id = pc.plan_code_id)) AS plan_code_description, cpi.g_number, pc.planned_premium,
          (SELECT     code_value
            FROM          tl_acord_codes
            WHERE      (code_type = ''Payment Mode'') AND (code_id = p.payment_mode_code)) AS premium_mode, cpi.web_quoted_class,
          (SELECT     description
            FROM          ta_rate_table_class
            WHERE      (rulebook_id =
                                       (SELECT     TOP (1) rulebook_id
                                         FROM          rulebook_view
                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                type IS NULL) OR
                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_quoted)) AS applied_for_rate_class,
						(SELECT     description
            FROM          ta_rate_table_class AS ta_rate_table_class_2
            WHERE      (rulebook_id =
                                       (SELECT     TOP (1) rulebook_id
                                         FROM          rulebook_view AS rulebook_view_2
                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                type IS NULL) OR
                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_approved)) 
      				AS system_recommended_rate_class,'
SET @sql2= N'(SELECT     description
            FROM          ta_rate_table_class AS ta_rate_table_class_1
            WHERE      (rulebook_id =
                                       (SELECT     TOP (1) rulebook_id
                                         FROM          rulebook_view AS rulebook_view_1
                                         WHERE      (plan_code_id = pc.plan_code_id) AND (association_code = p.association_code) AND (type = 0 OR
                                                                type IS NULL) OR
                                                                (plan_code_id = pc.plan_code_id) AND (type = 0 OR
                                                                type IS NULL) AND (p.association_code IS NULL))) AND (sequence_no = cpi.rate_class_issued)) AS rate_class_approved, 
      pc.approved_amount AS issued_amount, pc.perm_table_rating AS table_rating, pc.perm_flat_extra_amount AS flat_extra_amount, p.cwa_amount, 
      ap.income,
          (SELECT     tobacco_use_id
            FROM          tobacco
            WHERE      (requirement_information_id = ap.requirement_information_id)) AS smoker_status, ap.occupation, 
      p.lead_number_id AS aggregator_lead_number, p.source_info,
          (SELECT     partner_id
            FROM          tl_source_info
            WHERE      (source_info = p.source_info)) AS partner_id, p.distributor_code, p.underwriter_id,
          (SELECT     RTRIM(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')) AS Expr1
            FROM          person AS ps INNER JOIN
                                   aus_user AS u ON ps.person_id = u.person_id
            WHERE      (u.user_id = p.underwriter_id)) AS underwriter_name,
          (SELECT     RTRIM(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + RTRIM(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')) AS Expr1
            FROM          person AS ps INNER JOIN
                                   aus_user AS u ON ps.person_id = u.person_id
            WHERE      (u.user_id = p.service_associate_id)) AS service_associate_name,
          (SELECT     team_name
            FROM          team AS tm
            WHERE      (team_id = p.team_id)) AS team_name,
          (SELECT     TOP (1) agent_number
            FROM          agent_view
            WHERE      (policy_id = p.policy_id)) AS agent_1_number,
          (SELECT     TOP (1) agent_number
            FROM          agent_view AS agent_view_2
            WHERE      (policy_id = p.policy_id) AND (agent_number NOT IN
                                       (SELECT     agent_number
                                         FROM          agent_view AS agent_view_1
                                         WHERE      (policy_id = p.policy_id)))) AS agent_2_number,
          (SELECT     TOP (1) agency_number
            FROM          agency_view
            WHERE      (policy_id = p.policy_id)) AS bga_agency_number, p.team_id'
SET @sql3= N' FROM         insured_application_info AS ap INNER JOIN
              policy_person_insured AS ppi INNER JOIN
              coverage_person AS cp INNER JOIN
              coverage_person_insured AS cpi ON cp.coverage_person_id = cpi.coverage_person_id INNER JOIN
              policy_coverage AS pc ON cp.policy_coverage_id = pc.policy_coverage_id INNER JOIN
              person_address AS pa RIGHT OUTER JOIN
              person AS i ON pa.person_id = i.person_id ON cp.person_id = i.person_id INNER JOIN
              team AS t RIGHT OUTER JOIN
              policy AS p ON t.team_id = p.team_id ON pc.policy_id = p.policy_id ON ppi.policy_person_id = cpi.policy_person_id ON 
              ap.policy_person_id = ppi.policy_person_id LEFT OUTER JOIN
                  (SELECT association_code, name AS association_name
                    FROM          association
                    UNION
                    SELECT     c.company_code AS association_code, per.last_name AS association_name
                    FROM         company AS c INNER JOIN
                                          person AS per ON c.person_id = per.person_id
                    WHERE     (per.class_type = ''ASSN'') OR
                                          (per.class_type = ''GRP'')) AS assoc ON assoc.association_code = p.association_code
WHERE     (pa.address_type_code = ''RESIDENCE'')) AS wrap '
END
BEGIN
EXEC(@sql1 + @sql2 + @sql3 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetApplicantsByUnderwriter
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000) 
SET @sql1= N'SELECT wrap.* FROM (SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	i.applicant_status_date,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	i.applicant_status,
	p.team_id
FROM
	policy p,
	insured i
WHERE
	i.policy_id = p.policy_id and
	p.underwriter_id is not null and
	i.applicant_status not in (select code_id from tl_code where code_type = ''applicant_status'' and external_code = ''CN'')) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetFinalActionStatus 
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	(select code_value from tl_code where language_code = ''en-us'' and code_type = ''applicant_status'' and code_id = i.applicant_status) as applicant_status,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_date,
	p.team_id
FROM
	policy p,
	insured i
WHERE
	i.policy_id = p.policy_id and
	i.applicant_status in (select code_id from tl_code where code_type = ''applicant_status'' and external_code in (''AP'', ''DE'', ''RC'', ''WI''))) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetFinalDisposition  
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	i.applicant_status_date,
	p.distributor_code,
	p.source_info,
	(select external_code from tl_code where code_type = ''applicant_status'' and code_id = i.applicant_status) as applicant_status,
	i.underwriting_amount,
	cast(i.applicant_status_date - p.receive_date as int) as days_open,
	p.team_id
FROM
	policy p,
	insured i
WHERE
	i.policy_id = p.policy_id and
	i.applicant_status in (select code_id from tl_code where code_type = ''applicant_status'' and external_code in (''AP'', ''DE'', ''RC'', ''WI''))) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetNbRequirementProductivity
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	ir.requirement_code,
	(select tlr.requirement_name from tl_requirement tlr where tlr.requirement_code = ir.requirement_code) as requirement_name,
	es.code as status,
	es.status_date
FROM
	policy p,
	policy_person pp,
	insured_requirement ir,
	evidence_status_view es
WHERE
	pp.policy_id = p.policy_id and
	pp.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetNbWorkTypeProductivity
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	''Requirement'' as work_type,
	tlr.requirement_name as work_type_name,
	''Satisfied'' as status,
	es.status_date
FROM
	policy p,
	insured i,
	insured_requirement ir,
	tl_requirement tlr,
	evidence_status_view es
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id and
	ir.requirement_code = tlr.requirement_code and
	es.code = ''Satisfied''
UNION
SELECT
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	''Requirement'' as work_type,
	tlr.requirement_name as work_type_name,
	''Added'' as status,
	es.status_date
FROM
	policy p,
	insured i,
	insured_requirement ir,
	tl_requirement tlr,
	evidence_status_view es
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id and
	ir.requirement_code = tlr.requirement_code and
	es.code = ''Open''
UNION
SELECT
	n.author as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = n.author
	) as user_name,
	p.policy_number,
	''Referral'' as work_type,
	''Referral'' as work_type_name,
	''Added'' as status,
	n.added_date as status_date
FROM
	policy p,
	insured i,
	notes n
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = ''Refer'' and
	n.reviewed_by is null
UNION
SELECT
	n.reviewed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = n.reviewed_by
	) as user_name,
	p.policy_number,
	''Referral'' as work_type,
	''Referral'' as work_type_name,
	''Closed'' as status,
	n.reviewed_date as status_date
FROM
	policy p,
	insured i,
	notes n
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = ''Refer'' and
	n.reviewed_by is not null
UNION
SELECT
	rm.checked_off_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = rm.checked_off_by
	) as user_name,
	p.policy_number,
	''Review Message'' as work_type,
	''Review Message'' as work_type_name,
	''Satisfied'' as status,
	rm.check_off_date as status_date
FROM
	policy p,
	review_message rm
WHERE
	rm.policy_id = p.policy_id and
	rm.checkoff_flag is not null and
	rm.checkoff_flag <> 0 and
	rm.checked_off_by is not null) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetPolicyRequirements
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	tlr.requirement_name,
	tc.code_value as requirement_status,
	rv.ordered_date as ordered_open_date,
	rv.schedule_date,
	rv.complete_date,
	rv.closed_date as final_status_date,
	p.team_id
FROM
	policy p,
	policy_person pp,
	requirement_view rv,
	tl_requirement tlr,
	tl_code tc
WHERE
	pp.policy_id = p.policy_id and
	rv.policy_person_id = pp.policy_person_id and
	tlr.requirement_code = rv.requirement_code and
	(rv.closed_disposition is null or
	rv.closed_disposition<> ''D'') and
	rv.ordered_date is not null and
	tc.language_code = ''en-us'' and
	tc.code_type = ''RequirementStatus'' and
	((rv.closed_disposition is null and tc.code_id = ''O'') or
	tc.code_id = rv.closed_disposition)
UNION
SELECT
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	tlr.requirement_name,
	tc.code_value as requirement_status,
	rv.added_date as ordered_open_date,
	rv.schedule_date,
	rv.complete_date,
	rv.closed_date as final_status_date,
	p.team_id
FROM
	policy p,
	policy_person pp,
	requirement_view rv,
	tl_requirement tlr,
	tl_code tc
WHERE
	pp.policy_id = p.policy_id and
	rv.policy_person_id = pp.policy_person_id and
	tlr.requirement_code = rv.requirement_code and
	(rv.closed_disposition is null or
	rv.closed_disposition<> ''D'') and
	rv.ordered_date is null and
	tc.language_code = ''en-us'' and
	tc.code_type = ''RequirementStatus'' and
	((rv.closed_disposition is null and tc.code_id = ''O'') or
	tc.code_id = rv.closed_disposition)) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetRequirementAging
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	p.underwriter_id,
	p.service_associate_id,
	p.team_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as case_manager_name,
	(select team_name from team where team_id = p.team_id) as team_name,
	p.policy_number,
	ir.requirement_code,
	(select requirement_name from tl_requirement where requirement_code = ir.requirement_code) as requirement_name,
	ir.added_date,
	(select
	tc.code_value
	from
	tl_code tc
	where
	tc.code_type = ''RequirementStatus'' and
	tc.code_id = ir.closed_disposition or
	(ir.closed_disposition is null and tc.code_id = ''O'')
	) as requirement_status,
	(cast(CURRENT_TIMESTAMP - ir.added_date as int)) as days_aging
FROM
	policy p,
	insured i,
	insured_requirement ir
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	(ir.closed_disposition is null or ir.closed_disposition not in (''S'', ''C'', ''W''))) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetUnmatchedLabs
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	dbo.clrLSDecrypt(first_name, ''' + @password + ''') as first_name,
	dbo.clrLSDecrypt(last_name, ''' + @password + ''') as last_name,
	dbo.clrLSDecrypt(birth_date, ''' + @password + ''') as birth_date,
	referrence_number,
	ticket_number,
	drawn_date,
	lab_receive_date,
	-1 as team_id,
	-1 as underwriter_id,
	-1 as service_associate_id
FROM
	lab_header
WHERE
	requirement_information_id not in (
	select
	requirement_information_id
	from
	insured_requirement
	where
	requirement_information_id is not null)) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetUwCaseProductivity
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000) 
SET @sql1= N'SELECT
	p.underwriter_id as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	p.receive_date,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = underwriter_id
	) as user_name,
	p.policy_number,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''NB'') as new_business_date,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''FA'') as final_action_date,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''CLOSED'' and log_date >= (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''FA'')) as closed_date,
	cast((select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''FA'') - (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''NB'') as int) as days_nb_to_fa,
	cast((select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''CLOSED'' and log_date >= (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''FA'')) - (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = ''FA'') as int) as days_fa_to_closed
FROM
	policy p '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetUwReferalRvwProductivity
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000)
SET @sql1= N'SELECT wrap.* FROM (SELECT
	ir.closed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = ir.closed_by
	) as user_name,
	p.policy_number,
	(select requirement_name from tl_requirement where requirement_code = ir.requirement_code) as work_type,
	(select
	tc.code_value
	from
	tl_code tc
	where
	tc.code_type = ''RequirementStatus'' and
	tc.code_id = ir.closed_disposition or
	(ir.closed_disposition is null and tc.code_id = ''O'')
	) as status,
	ir.added_date,
	ir.closed_date
FROM
	policy p,
	insured i,
	insured_requirement ir
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.requirement_code = ''UWINITRVW'' and
	ir.closed_disposition = ''S''
UNION
SELECT
	n.author as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = n.author
	) as user_name,
	p.policy_number,
	''Referral'' as work_type,
	''Added'' as status,
	n.added_date,
	n.reviewed_date as closed_date
FROM
	policy p,
	insured i,
	notes n
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = ''Refer'' and
	n.reviewed_by is null
UNION
SELECT
	n.reviewed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = n.reviewed_by
	) as user_name,
	p.policy_number,
	''Referral'' as work_type,
	''Checked-off'' as status,
	n.added_date,
	n.reviewed_date as closed_date
FROM
	policy p,
	insured i,
	notes n
WHERE
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = ''Refer'' and
	n.reviewed_by is not null) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
			ALTER PROCEDURE uspGetUwReviewMsgProductivity
    @password nvarchar(255),
    @where_clause nvarchar(500)
AS
BEGIN
DECLARE @sql1 nvarchar(4000) 
SET @sql1= N'SELECT wrap.* FROM (SELECT
	rm.checked_off_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
	ltrim(rtrim(dbo.clrLSDecrypt(ps.last_name, ''' + @password + ''')) + '', '' + rtrim(dbo.clrLSDecrypt(ps.first_name, ''' + @password + ''')))
	from
	person ps, aus_user u
	where
	u.person_id = ps.person_id and u.user_id = rm.checked_off_by
	) as user_name,
	p.policy_number,
	''Checkable Review Message'' as work_type,
	rm.message,
	''Closed'' as status,
	rm.check_off_date
FROM
	policy p,
	review_message rm
WHERE
	rm.policy_id = p.policy_id and
	rm.checkoff_flag is not null and
	rm.checkoff_flag <> 0 and
	rm.checked_off_by is not null) AS wrap '
END
BEGIN
EXEC(@sql1 + @where_clause)
END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER PROCEDURE usp_AUS_ProcessReviewMessageNote
(
@authorID as Integer,
@insuredID as Integer,
@noteType as Char(10),
@topic as Char(254),
@visibility as Char(10),
@diaryDate as DateTime,
@note as text,
@messageID as Integer,
@messageType as Integer
)
As
/* Debug
-- Input parameters
Declare	@authorID as Integer
Declare	@policyID as Integer
Declare	@noteType as Char(10)
Declare	@topic as Char(254)
Declare	@visibility as Char(10)
Declare	@addedDate as DateTime
Declare	@updateDate as DateTime
Declare	@diaryDate as DateTime
Declare	@diaryStatus as char(10)
Declare	@note as varchar(4000)
Declare	@messageID as Integer
-- fill parameters
Set @authorID = 1000
Set @policyID = 380750
Set @noteType = 'Review'
Set @topic = 'This is a sample topic entered on ' + Convert(varchar(25), GETDATE())
Set @visibility = 'Internal'
Set @addedDate = GETDATE()
Set @updateDate = null
Set @diaryDate = null
Set @diaryStatus = null
Set @note = ' This is the note text entered on ' + Convert(varchar(25), GETDATE())
Set @rmID = 389068 */
Set NOCOUNT ON
Declare @newNoteID as Integer
Declare @status as Integer
Begin Tran
exec @newNoteID =  usp_AUS_InsertNote @authorID, @insuredID, @noteType, @topic, @visibility, @diaryDate, @note
If (@newNoteID > 0)
Begin
exec @status =  usp_AUS_UpdateReviewMessageNote @newNoteID, @messageID, @messageType
If @@Error = 0
Begin
Commit Tran
Return @newNoteID
End
Else
Begin
Rollback Tran
Return 0
End
End
Else
Begin
Rollback Tran
Return 0
End

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
	    
DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	