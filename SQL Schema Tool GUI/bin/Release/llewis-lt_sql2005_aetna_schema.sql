
-- DB Name: Aetna
-- Output Date: 10/15/2007
-- Output Time: 7:51 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Create SQL'
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[admin_system_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[admin_system_message]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[admin_system_message]
	( 	
		[admin_system_message_id] [int]  NOT NULL,
		[admin_system] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[create_date] [datetime]  NULL,
		[policy_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_id] [int]  NULL,
		[severity] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[message_text] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[admin_system_message]
	ALTER COLUMN [admin_system_message_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'admin_system_message'), N'admin_system_message_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[admin_system_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[admin_system_message] ADD 
	CONSTRAINT [PK_admin_system_message] PRIMARY KEY CLUSTERED 
	(
		[admin_system_message_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): admin_system_message_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TE_CASE__REFERENCE_AGENCY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_case_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[te_case_assignment]  
	DROP CONSTRAINT FK_TE_CASE__REFERENCE_AGENCY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_P_REFERENCE_AGENCY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_agent]  
	DROP CONSTRAINT FK_POLICY_P_REFERENCE_AGENCY
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[agency]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[agency]
	( 	
		[person_id] [int]  NOT NULL,
		[agency_number] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[routing_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[update_date] [datetime]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[agency]
	ALTER COLUMN [person_id] [int] NOT NULL
	ALTER TABLE [dbo].[agency]
	ALTER COLUMN [update_date] [datetime] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'agency'), N'person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[agency] ADD 
	CONSTRAINT [PK_AGENCY] PRIMARY KEY CLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_agency_num] ON [dbo].[agency]([agency_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[agent]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[agent]
	( 	
		[person_id] [int]  NOT NULL,
		[agent_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[routing_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[descriptor] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[agent]
	ALTER COLUMN [person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'agent'), N'person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[agent] ADD 
	CONSTRAINT [PK_AGENT] PRIMARY KEY CLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_agent_number] ON [dbo].[agent]([agent_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[association]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[association]
	( 	
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[name] [char]  (120)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[expiration_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[association]
	ALTER COLUMN [association_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'association'), N'association_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[association]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association] ADD 
	CONSTRAINT [PK_association] PRIMARY KEY CLUSTERED 
	(
		[association_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): association_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[association_plan]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[association_plan]
	( 	
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[tpa_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[g_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[mortality_max] [int]  NULL,
		[auto_approve_requires_member] [int]  NULL,
		[underwrite_child] [int]  NULL,
		[spouse_can_exceed_member] [int]  NULL,
		[allow_jet_issue] [int]  NULL,
		[billing_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[expiration_date] [datetime]  NULL,
		[spouse_coverage_available] [int]  NULL,
		[underwrite_spouse] [int]  NULL,
		[child_coverage_available] [int]  NULL,
		[enrollment_effective_date] [datetime]  NULL,
		[enrollment_num_days] [int]  NULL,
		[employee_eligibility] [int]  NULL,
		[employee_percent_contributory] [numeric]  NULL,
		[add_exclusions] [int]  NULL,
		[replacement_ratio] [numeric]  NULL,
		[plan_max_multiplier] [numeric]  NULL,
		[plan_max_issue] [int]  NULL,
		[plan_min_issue] [int]  NULL,
		[plan_max_participation_amount] [int]  NULL,
		[max_issue_age] [int]  NULL,
		[rounding_flag] [int]  NULL,
		[rounding_amount] [int]  NULL,
		[gsi_plan_max] [int]  NULL,
		[gsi_multiplier] [numeric]  NULL,
		[min_num_hours] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[association_plan]
	ALTER COLUMN [association_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[association_plan]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_event]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_event]
	( 	
		[aus_event_id] [int]  NOT NULL,
		[entry_datetime] [datetime]  NULL,
		[aus_cmd] [int]  NULL,
		[priority] [int]  NULL,
		[added_by] [int]  NULL,
		[schedule_datetime] [datetime]  NULL,
		[param_data] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[status] [int]  NULL,
		[workflow_app_id] [varchar]  (40)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[start_datetime] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_event]
	ALTER COLUMN [aus_event_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_event'), N'aus_event_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_event] ADD 
	CONSTRAINT [PK_aus_event] PRIMARY KEY CLUSTERED 
	(
		[aus_event_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): aus_event_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_aus_event_cmd] ON [dbo].[aus_event]([aus_cmd]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_identity]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_identity]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_identity]
	( 	
		[next_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_identity]
	ALTER COLUMN [next_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_identity'), N'next_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_identity]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_identity] ADD 
	CONSTRAINT [PK_AUS_IDENTITY] PRIMARY KEY CLUSTERED 
	(
		[next_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): next_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_role_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_role_privilege]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_role_privilege]
	( 	
		[role_id] [int]  NOT NULL,
		[privilege_id] [int]  NOT NULL,
		[restriction_level] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_role_privilege]
	ALTER COLUMN [role_id] [int] NOT NULL
	ALTER TABLE [dbo].[aus_role_privilege]
	ALTER COLUMN [privilege_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_role_privilege'), N'role_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_role_privilege'), N'privilege_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_role_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_role_privilege] ADD 
	CONSTRAINT [PK_AUS_ROLE_PRIVILEGE] PRIMARY KEY CLUSTERED 
	(
		[role_id], [privilege_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): role_id, privilege_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AUS_ROLE_REF_8704_AUS_SECU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_role_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_role_privilege]  
	DROP CONSTRAINT FK_AUS_ROLE_REF_8704_AUS_SECU
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_security_privilege]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_security_privilege]
	( 	
		[privilege_id] [int]  NOT NULL,
		[name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL,
		[subsystem_name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_security_privilege]
	ALTER COLUMN [privilege_id] [int] NOT NULL
	ALTER TABLE [dbo].[aus_security_privilege]
	ALTER COLUMN [name] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[aus_security_privilege]
	ALTER COLUMN [subsystem_name] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_privilege'), N'subsystem_name', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_privilege'), N'name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [IX_aus_security_privilege] UNIQUE NONCLUSTERED 
	(
		[subsystem_name], [name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subsystem_name, name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_privilege'), N'privilege_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [PK_AUS_SECURITY_PRIVILEGE] PRIMARY KEY CLUSTERED 
	(
		[privilege_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): privilege_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_aus_user_ref_role]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user]  
	DROP CONSTRAINT fk_aus_user_ref_role
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AUS_ROLE_REF_8700_AUS_SECU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_role_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_role_privilege]  
	DROP CONSTRAINT FK_AUS_ROLE_REF_8700_AUS_SECU
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_roles]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_security_roles]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_security_roles]
	( 	
		[role_id] [int]  NOT NULL,
		[name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL,
		[deleted] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_security_roles]
	ALTER COLUMN [role_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_roles'), N'role_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_security_roles]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_roles] ADD 
	CONSTRAINT [PK_AUS_SECURITY_ROLES] PRIMARY KEY CLUSTERED 
	(
		[role_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): role_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_sec_priv_sec_subsys]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_security_privilege]  
	DROP CONSTRAINT FK_sec_priv_sec_subsys
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_subsystem]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_security_subsystem]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_security_subsystem]
	( 	
		[subsystem_name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[subsystem_description] [char]  (80)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_security_subsystem]
	ALTER COLUMN [subsystem_name] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_subsystem'), N'subsystem_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_security_subsystem]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_subsystem] ADD 
	CONSTRAINT [PK_aus_security_subsystem] PRIMARY KEY CLUSTERED 
	(
		[subsystem_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subsystem_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_requirem_ref_13269_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_info_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_info_request]  
	DROP CONSTRAINT fk_requirem_ref_13269_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TE_CASE__REFERENCE_AUS_USER]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_case_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[te_case_assignment]  
	DROP CONSTRAINT FK_TE_CASE__REFERENCE_AUS_USER
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_REQUIREMENT_ADDED_BY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_requirement]  
	DROP CONSTRAINT FK_TL_REQUIREMENT_ADDED_BY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_REQUIREMENT_UPDATED_BY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_requirement]  
	DROP CONSTRAINT FK_TL_REQUIREMENT_UPDATED_BY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_tr_user_team_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_user_team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_user_team]  
	DROP CONSTRAINT FK_tr_user_team_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_aus_user_limits_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user_limits]  
	DROP CONSTRAINT FK_aus_user_limits_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_requirem_ref_1955_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_information]  
	DROP CONSTRAINT fk_requirem_ref_1955_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AUS_USER_REFERENCE_AUS_USER]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user_recent_files]  
	DROP CONSTRAINT FK_AUS_USER_REFERENCE_AUS_USER
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_491_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_491_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_503_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_503_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_aus_user1]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_aus_user1
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_aus_user2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_aus_user2
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_notes_ref_39_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[notes]  
	DROP CONSTRAINT fk_notes_ref_39_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_paramed_ref_12407_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[paramed]  
	DROP CONSTRAINT fk_paramed_ref_12407_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_paramed_ref_12411_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[paramed]  
	DROP CONSTRAINT fk_paramed_ref_12411_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_ref_1006_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT fk_policy_ref_1006_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_ref_1010_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT fk_policy_ref_1010_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_ref_13937_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT fk_policy_ref_13937_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_ref_992_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT fk_policy_ref_992_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_REFERENCE_AUS_USER]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT FK_POLICY_REFERENCE_AUS_USER
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_policy_service_associate]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy]  
	DROP CONSTRAINT FK_policy_service_associate
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_A_REFERENCE_AUS_USER]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_assignment]  
	DROP CONSTRAINT FK_POLICY_A_REFERENCE_AUS_USER
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_L_REF_8715_AUS_USER]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_log]  
	DROP CONSTRAINT FK_POLICY_L_REF_8715_AUS_USER
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_s_ref_5408_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_status_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_status_history]  
	DROP CONSTRAINT fk_policy_s_ref_5408_aus_user
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_review_m_ref_507_aus_user]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[review_message]  
	DROP CONSTRAINT fk_review_m_ref_507_aus_user
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_user]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_user]
	( 	
		[user_id] [int]  NOT NULL,
		[person_id] [int]  NULL,
		[login_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[password] [char]  (16)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL,
		[level_of_authority] [numeric]  NULL,
		[email_address] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_underwriter] [int]  NULL,
		[restrict_to_teams] [int]  NULL,
		[role_id] [int]  NULL,
		[is_service_associate] [int]  NULL,
		[job_title] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[account_locked] [int]  NULL,
		[account_locked_date] [datetime]  NULL,
		[bad_login_attempt_count] [int]  NULL,
		[last_bad_login_attempt_date] [datetime]  NULL,
		[must_change_password] [int]  NULL,
		[last_password_change_date] [datetime]  NULL,
		[is_agent] [int]  NULL,
		[agent_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_agency] [int]  NULL,
		[agency_number] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[deleted] [int]  NULL,
		[use_single_sign_on] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_user]
	ALTER COLUMN [user_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user'), N'user_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user] ADD 
	CONSTRAINT [PK_AUS_USER] PRIMARY KEY CLUSTERED 
	(
		[user_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): user_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [ix_user_login] ON [dbo].[aus_user]([login_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_user_person] ON [dbo].[aus_user]([person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_user_limits]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_user_limits]
	( 	
		[user_id] [int]  NOT NULL,
		[line_of_business_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[authorization_limit] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_user_limits]
	ALTER COLUMN [user_id] [int] NOT NULL
	ALTER TABLE [dbo].[aus_user_limits]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user_limits'), N'user_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user_limits'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [PK_aus_user_limits] PRIMARY KEY CLUSTERED 
	(
		[user_id], [line_of_business_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): user_id, line_of_business_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[aus_user_recent_files]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[aus_user_recent_files]
	( 	
		[recent_file_id] [int]  NOT NULL,
		[user_id] [int]  NOT NULL,
		[policy_id] [int]  NULL,
		[last_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[date_time] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[aus_user_recent_files]
	ALTER COLUMN [recent_file_id] [int] NOT NULL
	ALTER TABLE [dbo].[aus_user_recent_files]
	ALTER COLUMN [user_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user_recent_files'), N'recent_file_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_recent_files] ADD 
	CONSTRAINT [PK_AUS_USER_RECENT_FILES] PRIMARY KEY CLUSTERED 
	(
		[recent_file_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): recent_file_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_recent_files_user_id] ON [dbo].[aus_user_recent_files]([user_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[benefit_period]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[benefit_period]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[period_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[g_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[period] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [period_id] [char]  (10) NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_benefit_period] ON [dbo].[benefit_period]([language_code], [plan_code_id], [period_id], [g_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[billing_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[billing_code]
	( 	
		[tpa_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[line_of_business_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[us_billing_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[non_us_billing_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[g_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[policy_type] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [tpa_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [g_number] [char]  (15) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'tpa_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'g_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [IX_billing_code] UNIQUE NONCLUSTERED 
	(
		[tpa_code], [line_of_business_code], [g_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tpa_code, line_of_business_code, g_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[cache_sync]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[cache_sync]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[cache_sync]
	( 	
		[category_id] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[cache_version] [varchar]  (40)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[cache_sync]
	ALTER COLUMN [category_id] [varchar]  (5) NOT NULL
	ALTER TABLE [dbo].[cache_sync]
	ALTER COLUMN [cache_version] [varchar]  (40) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'cache_sync'), N'category_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[cache_sync]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[cache_sync] ADD 
	CONSTRAINT [PK_cache_sync] PRIMARY KEY CLUSTERED 
	(
		[category_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): category_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[company]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[company]
	( 	
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[person_id] [int]  NOT NULL,
		[allow_aus_approval_flag] [int]  NULL,
		[correspondence_directory] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[full_time_employee_count] [int]  NULL,
		[percent_eligible_employees] [numeric]  NULL,
		[percent_eligible_dependants] [numeric]  NULL,
		[current_cobra_indicator] [int]  NULL,
		[expiration_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[company]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[company]
	ALTER COLUMN [person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company'), N'person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company] ADD 
	CONSTRAINT [PK_COMPANY] PRIMARY KEY CLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_company_code] ON [dbo].[company]([company_code]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COMPANY__REF_17407_COMPANY_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[company_mib_entry]  
	DROP CONSTRAINT FK_COMPANY__REF_17407_COMPANY_
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[company_mib]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[company_mib]
	( 	
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[mib_company_code] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[destination_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[company_mib]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib'), N'company_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company_mib]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company_mib] ADD 
	CONSTRAINT [PK_COMPANY_MIB] PRIMARY KEY CLUSTERED 
	(
		[company_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[company_mib_entry]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[company_mib_entry]
	( 	
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[entry_type] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[entry_field] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[in_directory] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[out_directory] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[company_mib_entry]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[company_mib_entry]
	ALTER COLUMN [entry_type] [char]  (5) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib_entry'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib_entry'), N'entry_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company_mib_entry] ADD 
	CONSTRAINT [PK_COMPANY_MIB_ENTRY] PRIMARY KEY CLUSTERED 
	(
		[company_code], [entry_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, entry_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_coverage_benefits_party]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_benefits_party]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_benefits_party]  
	DROP CONSTRAINT FK_coverage_benefits_party
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_benefits]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_benefits]
	( 	
		[benefit_id] [int]  NOT NULL,
		[sequence_no] [int]  NULL,
		[description] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amount] [numeric]  NULL,
		[coverage_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[reason_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_coverage_id] [int]  NOT NULL,
		[approved_different_amount_flag] [int]  NULL,
		[approved_amount] [numeric]  NULL,
		[note] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_rating] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_table_rating] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_table_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[flat_extra_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_period] [int]  NULL,
		[issued_times_standard] [numeric]  NULL,
		[reinsurance_flag] [int]  NULL,
		[benefit_duration] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_benefits]
	ALTER COLUMN [benefit_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_benefits]
	ALTER COLUMN [coverage_status] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[coverage_benefits]
	ALTER COLUMN [policy_coverage_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_benefits'), N'benefit_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_benefits'), N'policy_coverage_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_benefits] ADD 
	CONSTRAINT [PK_COVERAGE_BENEFITS] PRIMARY KEY CLUSTERED 
	(
		[benefit_id], [policy_coverage_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): benefit_id, policy_coverage_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_benfit_pers] ON [dbo].[coverage_benefits]([policy_coverage_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_benefits_party]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_benefits_party]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_benefits_party]
	( 	
		[benefit_id] [int]  NOT NULL,
		[policy_coverage_id] [int]  NOT NULL,
		[person_id] [int]  NOT NULL,
		[height_inches] [int]  NULL,
		[weight_pounds] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_benefits_party]
	ALTER COLUMN [benefit_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_benefits_party]
	ALTER COLUMN [policy_coverage_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_benefits_party]
	ALTER COLUMN [person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_benefits_party'), N'benefit_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_benefits_party'), N'policy_coverage_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_benefits_party'), N'person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_benefits_party]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_benefits_party] ADD 
	CONSTRAINT [PK_coverage_benefits_party] PRIMARY KEY CLUSTERED 
	(
		[benefit_id], [policy_coverage_id], [person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): benefit_id, policy_coverage_id, person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_person_extra_info_cp]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_extra_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_extra_info]  
	DROP CONSTRAINT FK_cov_person_extra_info_cp
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_COVERAGE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_beneficiary]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_beneficiary]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_COVERAGE
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REF_COVERAGE2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured]  
	DROP CONSTRAINT FK_COVERAGE_REF_COVERAGE2
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_amendment_cov]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_amendment]  
	DROP CONSTRAINT FK_cov_pers_amendment_cov
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_reinsurer_cov]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_reinsurer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_reinsurer]  
	DROP CONSTRAINT FK_cov_pers_reinsurer_cov
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_fund]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_fund_alloc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_fund_alloc]  
	DROP CONSTRAINT FK_cov_pers_fund
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_cov]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_cov
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person]
	( 	
		[coverage_person_id] [int]  NOT NULL,
		[policy_coverage_id] [int]  NULL,
		[person_id] [int]  NULL,
		[role_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[relationship_to_insured_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person'), N'coverage_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person] ADD 
	CONSTRAINT [PK_COVERAGE_PERSON] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_pers_pid] ON [dbo].[coverage_person]([person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_pers_pol_cov_id] ON [dbo].[coverage_person]([policy_coverage_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_amendment]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_amendment]
	( 	
		[coverage_person_amendment_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[amendment_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amendment_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amendment_text] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_amendment]
	ALTER COLUMN [coverage_person_amendment_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_amendment]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_amendment'), N'coverage_person_amendment_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_amendment] ADD 
	CONSTRAINT [PK_coverage_person_amendment] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_amendment_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_amendment_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_amendment_cov_pers_id] ON [dbo].[coverage_person_amendment]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_beneficiary]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_beneficiary]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_beneficiary]
	( 	
		[coverage_person_id] [int]  NOT NULL,
		[beneficiary_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[percentage] [decimal]  NULL,
		[amount] [numeric]  NULL,
		[irrevokable_indicator] [int]  NULL,
		[age] [int]  NULL,
		[benefit_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_beneficiary]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_beneficiary'), N'coverage_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_beneficiary]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_beneficiary] ADD 
	CONSTRAINT [PK_COVERAGE_PERSON_BENEFICIARY] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_extra_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_extra_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_extra_info]
	( 	
		[coverage_person_extra_info_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[coverage_extra_info_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[applied_ceding_company] [numeric]  NULL,
		[applied_other_company] [numeric]  NULL,
		[amounts_to_be_placed] [numeric]  NULL,
		[total_in_force_all] [numeric]  NULL,
		[total_in_force_tare] [numeric]  NULL,
		[replacement] [numeric]  NULL,
		[cedents_retention] [numeric]  NULL,
		[reinsurance_needed] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_extra_info]
	ALTER COLUMN [coverage_person_extra_info_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_extra_info]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_extra_info'), N'coverage_person_extra_info_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_extra_info'), N'coverage_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_extra_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_extra_info] ADD 
	CONSTRAINT [PK_coverage_person_extra_info] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_extra_info_id], [coverage_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_extra_info_id, coverage_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_extra_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_xtra_person] ON [dbo].[coverage_person_extra_info]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_fund_alloc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_fund_alloc]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_fund_alloc]
	( 	
		[fund_allocation_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[fund_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[percent_allocation] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_fund_alloc]
	ALTER COLUMN [fund_allocation_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_fund_alloc]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_fund_alloc]
	ALTER COLUMN [fund_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_fund_alloc'), N'fund_allocation_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_fund_alloc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_fund_alloc] ADD 
	CONSTRAINT [PK_cov_pers_fund] PRIMARY KEY CLUSTERED 
	(
		[fund_allocation_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): fund_allocation_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_fund_alloc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_fund_cov_person] ON [dbo].[coverage_person_fund_alloc]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_impairment]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_impairment]
	( 	
		[coverage_person_impairment_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[impairment_restriction_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[impairment_text] [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_impairment]
	ALTER COLUMN [coverage_person_impairment_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_impairment]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_impairment'), N'coverage_person_impairment_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [PK_coverage_person_impairment] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_impairment_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_impairment_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_impairment_cov_pers_id] ON [dbo].[coverage_person_impairment]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_insured]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_insured]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[perm_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_period] [int]  NULL,
		[flat_extra_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_rating] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_rating_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class_quoted] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class_approved] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class_issued] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[aviation_exclusion] [int]  NULL,
		[perm_table_rating] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_table_rating_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[coverage_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reason_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_smoker] [int]  NULL,
		[final_action_note] [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[business_ownership_percent] [numeric]  NULL,
		[final_action_by_id] [int]  NULL,
		[final_action_date] [datetime]  NULL,
		[elimination_days] [int]  NULL,
		[payout_frequency] [int]  NULL,
		[waiting_period] [int]  NULL,
		[g_number] [char]  (16)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cola] [int]  NULL,
		[own_occ] [int]  NULL,
		[spo_amount] [int]  NULL,
		[web_quoted_class] [char]  (70)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[issued_times_standard] [numeric]  NULL,
		[jls_flag] [int]  NULL,
		[split_flag] [int]  NULL,
		[split_detail] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reinsurance_company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reinsurance_amount] [numeric]  NULL,
		[rated_up_age] [int]  NULL,
		[paid_amount] [numeric]  NULL,
		[effective_date] [datetime]  NULL,
		[benefit_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[elimination_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[approved_benefit_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[approved_elimination_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class_prior_to_rx] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[past_coverage_indicator] [int]  NULL,
		[reg60_indicator] [int]  NULL,
		[medical_load_percentage] [numeric]  NULL,
		[rx_load_percentage] [numeric]  NULL,
		[industry_load_percentage] [numeric]  NULL,
		[copay_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[deductable_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[coinsurance_limit] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[max_out_pocket_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hsa_indicator] [int]  NULL,
		[rx_drug_option] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[joint_age] [int]  NULL,
		[approved_plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[guarantee_period] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ppo_id] [int]  NULL,
		[coverage_duration] [int]  NULL,
		[do_not_offer_flag] [int]  NULL,
		[premium] [numeric]  NULL,
		[recommended_uw_decision] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[basic_premium] [numeric]  NULL,
		[final_premium] [numeric]  NULL,
		[rating_engine_reason_code] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_up_factor] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_insured]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_insured]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_insured'), N'coverage_person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_insured'), N'policy_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured] ADD 
	CONSTRAINT [PK_COVERAGE_PERSON_INSURED] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_id], [policy_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_id, policy_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_pol_pers_id] ON [dbo].[coverage_person_insured]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_ppo_id] ON [dbo].[coverage_person_insured]([ppo_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_reinsurer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_reinsurer]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_reinsurer]
	( 	
		[coverage_person_reinsurer_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[treaty_type] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cession_number] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reinsurance_type] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[retention_amount] [numeric]  NULL,
		[reinsurance_amount] [numeric]  NULL,
		[adb_reinsured_amount] [numeric]  NULL,
		[placed] [int]  NULL,
		[origin_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
	ALTER COLUMN [coverage_person_reinsurer_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_reinsurer]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_reinsurer]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_reinsurer'), N'coverage_person_reinsurer_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_reinsurer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_reinsurer] ADD 
	CONSTRAINT [PK_coverage_person_reinsurer] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_reinsurer_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_reinsurer_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_reinsurer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_reviewer_cov_pers_id] ON [dbo].[coverage_person_reinsurer]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_worksheet]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_person_worksheet]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_person_worksheet]
	( 	
		[coverage_person_worksheet_id] [int]  NOT NULL,
		[coverage_person_id] [int]  NOT NULL,
		[priority] [int]  NULL,
		[risk_factor] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[result] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[note] [varchar]  (200)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[debit] [numeric]  NULL,
		[perm_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_period] [int]  NULL,
		[table_rating] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[origin_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[alt_note] [varchar]  (200)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_person_worksheet]
	ALTER COLUMN [coverage_person_worksheet_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_person_worksheet]
	ALTER COLUMN [coverage_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_person_worksheet'), N'coverage_person_worksheet_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_worksheet]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_worksheet] ADD 
	CONSTRAINT [PK_coverage_person_worksheet] PRIMARY KEY CLUSTERED 
	(
		[coverage_person_worksheet_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_person_worksheet_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_worksheet]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_cov_wrksht_pid] ON [dbo].[coverage_person_worksheet]([coverage_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[coverage_subaccounts]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[coverage_subaccounts]
	( 	
		[policy_coverage_id] [int]  NOT NULL,
		[subaccount_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[percentage] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[coverage_subaccounts]
	ALTER COLUMN [policy_coverage_id] [int] NOT NULL
	ALTER TABLE [dbo].[coverage_subaccounts]
	ALTER COLUMN [subaccount_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_subaccounts'), N'policy_coverage_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_subaccounts'), N'subaccount_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [PK_COVERAGE_SUBACCOUNTS] PRIMARY KEY CLUSTERED 
	(
		[policy_coverage_id], [subaccount_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_coverage_id, subaccount_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[doc_mgmt_email_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[doc_mgmt_email_history]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[doc_mgmt_email_history]
	( 	
		[document_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[email_address_list] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[subject] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[message] [text]  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY]  TEXTIMAGE_ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[doc_mgmt_email_history]
	ALTER COLUMN [document_name] [varchar]  (255) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'doc_mgmt_email_history'), N'document_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[doc_mgmt_email_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[doc_mgmt_email_history] ADD 
	CONSTRAINT [PK_document_name] PRIMARY KEY CLUSTERED 
	(
		[document_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): document_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[doc_mgmt_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[doc_mgmt_history]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[doc_mgmt_history]
	( 	
		[document_id] [int]  NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[document_type] [int]  NULL,
		[template_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[output_path] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NULL,
		[created_date] [datetime]  NULL,
		[document_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[doc_mgmt_history]
	ALTER COLUMN [document_id] [int] NOT NULL
	ALTER TABLE [dbo].[doc_mgmt_history]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'doc_mgmt_history'), N'document_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[doc_mgmt_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[doc_mgmt_history] ADD 
	CONSTRAINT [PK_document_id] PRIMARY KEY CLUSTERED 
	(
		[document_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): document_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[elimination_period]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[elimination_period]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[period_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[g_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[period] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [period_id] [char]  (10) NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_elimination_period] ON [dbo].[elimination_period]([language_code], [plan_code_id], [period_id], [g_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[employer_plan]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[employer_plan]
	( 	
		[employer_plan_id] [int]  NOT NULL,
		[employer_id] [int]  NULL,
		[plan_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[plan_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[copay_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[deductible_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[coinsurance_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[max_out_pocket_amount] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hsa_indicator] [int]  NULL,
		[rx_drug_option] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[employer_plan]
	ALTER COLUMN [employer_plan_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'employer_plan'), N'employer_plan_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[employer_plan] ADD 
	CONSTRAINT [PK_employer_plan] PRIMARY KEY CLUSTERED 
	(
		[employer_plan_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): employer_plan_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_employer_plan] ON [dbo].[employer_plan]([employer_id], [plan_code]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_employer_plan_employer] ON [dbo].[employer_plan]([employer_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[evidence_status]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[evidence_status]
	( 	
		[evidence_status_id] [int]  NOT NULL,
		[requirement_information_id] [int]  NULL,
		[insured_requirement_id] [int]  NULL,
		[status_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[code_source] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[message_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[status_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[evidence_status]
	ALTER COLUMN [evidence_status_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'evidence_status'), N'evidence_status_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[evidence_status] ADD 
	CONSTRAINT [PK_evidence_status] PRIMARY KEY CLUSTERED 
	(
		[evidence_status_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): evidence_status_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_ev_stat_insured] ON [dbo].[evidence_status]([insured_requirement_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_evidence_status] ON [dbo].[evidence_status]([requirement_information_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[extended_property]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[extended_property]
	( 	
		[policy_id] [int]  NOT NULL,
		[property_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[property_value] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NULL,
		[update_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[extended_property]
	ALTER COLUMN [policy_id] [int] NOT NULL
	ALTER TABLE [dbo].[extended_property]
	ALTER COLUMN [property_name] [varchar]  (255) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'extended_property'), N'policy_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'extended_property'), N'property_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[extended_property] ADD 
	CONSTRAINT [PK_EXTENDED_PROPERTY] PRIMARY KEY CLUSTERED 
	(
		[policy_id], [property_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_id, property_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extract_time]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[extract_time]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[extract_time]
	( 	
		[company_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[extract_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[extract_time] [datetime]  NULL,
		[output_path] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[extract_time]
	ALTER COLUMN [company_code] [char]  (5) NOT NULL
	ALTER TABLE [dbo].[extract_time]
	ALTER COLUMN [extract_type] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'extract_time'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'extract_time'), N'extract_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[extract_time]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[extract_time] ADD 
	CONSTRAINT [PK_EXTRACT_TIME] PRIMARY KEY CLUSTERED 
	(
		[company_code], [extract_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, extract_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[family_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[family_history]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[family_history]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[family_history_id] [int]  NOT NULL,
		[famhist_relationship_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[living_status] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reason_for_death] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[age] [int]  NULL,
		[cancer_flag] [int]  NULL,
		[cancer_age] [int]  NULL,
		[heart_disease_flag] [int]  NULL,
		[heart_disease_age] [int]  NULL,
		[other_disease_flag] [int]  NULL,
		[other_disease_age] [int]  NULL,
		[other_disease_desc] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[family_history]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[family_history]
	ALTER COLUMN [family_history_id] [int] NOT NULL
	ALTER TABLE [dbo].[family_history]
	ALTER COLUMN [famhist_relationship_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'family_history'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'family_history'), N'family_history_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[family_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[family_history] ADD 
	CONSTRAINT [PK_family_history] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id], [family_history_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id, family_history_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[FileStore]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[FileStore]
	( 	
		[Id] [int]  NOT NULL,
		[FileName] [varchar]  (900)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[FileData] [image]  NOT NULL,
		[CreatedDate] [datetime]  NOT NULL,
		[LastModifiedDate] [datetime]  NOT NULL
	)   ON [PRIMARY]  TEXTIMAGE_ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[FileStore]
	ALTER COLUMN [Id] [int] NOT NULL
	ALTER TABLE [dbo].[FileStore]
	ALTER COLUMN [FileName] [varchar]  (900) NOT NULL
	ALTER TABLE [dbo].[FileStore]
	ALTER COLUMN [FileData] [image] NOT NULL
	ALTER TABLE [dbo].[FileStore]
	ALTER COLUMN [CreatedDate] [datetime] NOT NULL
	ALTER TABLE [dbo].[FileStore]
	ALTER COLUMN [LastModifiedDate] [datetime] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'FileStore'), N'Id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[FileStore] ADD 
	CONSTRAINT [PK_FileStore] PRIMARY KEY NONCLUSTERED 
	(
		[Id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): Id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_FileStore_CreateDate] ON [dbo].[FileStore]([CreatedDate]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_FileStore_FileName] ON [dbo].[FileStore]([FileName]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_FileStore_Id] ON [dbo].[FileStore]([Id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[FileStore]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_FileStore_LastModDate] ON [dbo].[FileStore]([LastModifiedDate]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_section_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_section]  
	DROP CONSTRAINT FK_form_section_form
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_te_rulebook_form_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form]  
	DROP CONSTRAINT FK_te_rulebook_form_form
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form]
	( 	
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[form_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[form_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form'), N'form_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form] ADD 
	CONSTRAINT [PK_form] PRIMARY KEY CLUSTERED 
	(
		[form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_section_form_inst]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_section]  
	DROP CONSTRAINT FK_form_inst_section_form_inst
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_instance]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_instance]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[case_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[first_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[middle_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[title] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[suffix] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birthdate] [datetime]  NULL,
		[sex] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tax_id_no] [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[policy_person_id] [int]  NULL,
		[form_data] [text]  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY]  TEXTIMAGE_ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_instance]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_instance'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance] ADD 
	CONSTRAINT [PK_form_instance] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_form_inst_pol_pers] ON [dbo].[form_instance]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_instance_answer]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_instance_answer]
	( 	
		[form_instance_answer_id] [int]  NOT NULL,
		[form_instance_question_grp_id] [int]  NOT NULL,
		[question_id] [int]  NOT NULL,
		[answer_text] [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[answer_comment] [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_instance_answer]
	ALTER COLUMN [form_instance_answer_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_answer]
	ALTER COLUMN [form_instance_question_grp_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_answer]
	ALTER COLUMN [question_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_instance_answer'), N'form_instance_answer_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_answer] ADD 
	CONSTRAINT [PK_form_instance_answer] PRIMARY KEY CLUSTERED 
	(
		[form_instance_answer_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_instance_answer_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_ans_doc_info]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_answer]  
	DROP CONSTRAINT FK_form_inst_ans_doc_info
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_answers_doc_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_instance_answers_doc_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_instance_answers_doc_info]
	( 	
		[form_instance_answer_id] [int]  NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[par_policy_person_id] [int]  NULL,
		[onset_date] [datetime]  NULL,
		[last_treatment_date] [datetime]  NULL,
		[diagnosis] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[treatment] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[medication] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[dosage] [numeric]  NULL,
		[results] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[duration] [int]  NULL,
		[physician_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[physician_address] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[physician_phone] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hospital_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hospital_address] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hospital_phone] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
	ALTER COLUMN [form_instance_answer_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_instance_answers_doc_info'), N'form_instance_answer_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_answers_doc_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_answers_doc_info] ADD 
	CONSTRAINT [PK_form_inst_answers_doc_info] PRIMARY KEY CLUSTERED 
	(
		[form_instance_answer_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_instance_answer_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_ans_q_group]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_answer]  
	DROP CONSTRAINT FK_form_inst_ans_q_group
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_instance_question_group]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_instance_question_group]
	( 	
		[form_instance_section_id] [int]  NOT NULL,
		[form_instance_question_grp_id] [int]  NOT NULL,
		[form_question_group_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[form_section_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_instance_section_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_instance_question_grp_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_question_group_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_section_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_instance_question_group'), N'form_instance_question_grp_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_question_group] ADD 
	CONSTRAINT [PK_form_question_group_inst] PRIMARY KEY CLUSTERED 
	(
		[form_instance_question_grp_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_instance_question_grp_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_q_group_sec]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_question_group]  
	DROP CONSTRAINT FK_form_inst_q_group_sec
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_instance_section]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_instance_section]
	( 	
		[form_instance_section_id] [int]  NOT NULL,
		[form_section_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[requirement_information_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_instance_section]
	ALTER COLUMN [form_instance_section_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_section]
	ALTER COLUMN [form_section_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_instance_section]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_instance_section]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_instance_section'), N'form_instance_section_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_section] ADD 
	CONSTRAINT [PK_form_instance_section] PRIMARY KEY CLUSTERED 
	(
		[form_instance_section_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_instance_section_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_answers_form_ques]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_answer]  
	DROP CONSTRAINT FK_form_inst_answers_form_ques
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_question]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_question]
	( 	
		[question_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[form_section_id] [int]  NOT NULL,
		[question_group_id] [int]  NOT NULL,
		[sequence_number] [int]  NULL,
		[external_question_number] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[question_label] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[question_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[question_type] [int]  NULL,
		[data_type] [int]  NULL,
		[answer_set_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[min_size] [int]  NULL,
		[max_size] [int]  NULL,
		[alt_question_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[required] [int]  NULL,
		[style] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [form_section_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_group_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_label] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_text] [varchar]  (255) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question'), N'form_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question'), N'question_label', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [IX_form_question] UNIQUE NONCLUSTERED 
	(
		[form_code], [question_label]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_code, question_label do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question'), N'question_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [PK_form_question] PRIMARY KEY CLUSTERED 
	(
		[question_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): question_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_q_group_quest]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_question_group]  
	DROP CONSTRAINT FK_form_q_group_quest
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_quest_quest_group]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_quest_quest_group
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_question_group]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_question_group]
	( 	
		[form_question_group_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[form_section_id] [int]  NOT NULL,
		[display_sequence] [int]  NULL,
		[is_repeatable] [int]  NULL,
		[external_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[group_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[min_occur] [int]  NULL,
		[max_occur] [int]  NULL,
		[is_party] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_question_group]
	ALTER COLUMN [form_question_group_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_question_group]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_question_group]
	ALTER COLUMN [form_section_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_question_group_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_section_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question_group] ADD 
	CONSTRAINT [PK_question_group] PRIMARY KEY CLUSTERED 
	(
		[form_question_group_id], [form_code], [form_section_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_question_group_id, form_code, form_section_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_question_group_form_section]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_question_group]  
	DROP CONSTRAINT FK_question_group_form_section
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_section_form_sec]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance_section]  
	DROP CONSTRAINT FK_form_inst_section_form_sec
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[form_section]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[form_section]
	( 	
		[form_section_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[section_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[display_sequence] [int]  NULL,
		[is_repeatable] [int]  NULL,
		[external_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[min_occur] [int]  NULL,
		[max_occur] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[form_section]
	ALTER COLUMN [form_section_id] [int] NOT NULL
	ALTER TABLE [dbo].[form_section]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_section'), N'form_section_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_section'), N'form_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_section] ADD 
	CONSTRAINT [PK_form_section] PRIMARY KEY CLUSTERED 
	(
		[form_section_id], [form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_section_id, form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_code
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[impairment_restriction]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[impairment_restriction]
	( 	
		[impairment_restriction_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[impairment_text] [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_impairment_text] [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[impairment_restriction]
	ALTER COLUMN [impairment_restriction_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[impairment_restriction] ADD 
	CONSTRAINT [PK_impairment_restriction] PRIMARY KEY CLUSTERED 
	(
		[impairment_restriction_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): impairment_restriction_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_medication_insured_application_info1]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medication]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[medication]  
	DROP CONSTRAINT FK_medication_insured_application_info1
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_medical_conditions_insured_application_info]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medical_conditions]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[medical_conditions]  
	DROP CONSTRAINT FK_medical_conditions_insured_application_info
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[insured_application_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[insured_application_info]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[manual_entry_flag] [int]  NULL,
		[income] [numeric]  NULL,
		[net_worth] [numeric]  NULL,
		[total_inforce] [numeric]  NULL,
		[replacement_amount] [numeric]  NULL,
		[replacement_date] [datetime]  NULL,
		[birth_country] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[residence_country] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[residence_state] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[drivers_license_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[drivers_license_country_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[drivers_license_state] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bankruptcy_disposition] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bankruptcy_discharge_date] [datetime]  NULL,
		[occupation] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[height_inches] [int]  NULL,
		[weight_pounds] [int]  NULL,
		[weght_previous_year] [int]  NULL,
		[reason_for_weight_change] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[waist_inches] [int]  NULL,
		[last_md_visit] [datetime]  NULL,
		[last_md_result] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_by] [int]  NULL,
		[added_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[beneficiary_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[medical_authorization_flag] [int]  NULL,
		[citizenship_country_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_addr] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_city] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_zip] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_visit_date] [datetime]  NULL,
		[visit_reason] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[findings] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[treatments] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[still_under_treatment_flag] [int]  NULL,
		[prior_consultations_flag] [int]  NULL,
		[prior_consultation_detail] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[unearned_income] [numeric]  NULL,
		[employer] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[years_at_employer] [int]  NULL,
		[employer_address] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[income_prev_year] [numeric]  NULL,
		[visa_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[job_duties] [varchar]  (150)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birth_state] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[hippa_authorization_flag] [int]  NULL,
		[monthly_expense] [int]  NULL,
		[last_blood_profile_date] [datetime]  NULL,
		[best_day_to_call] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[best_time_to_call] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[systolic_bp_reading] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[diastolic_bp_reading] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cholesterol_reading] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[issue_state] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[business_income] [int]  NULL,
		[business_net_worth] [int]  NULL,
		[book_value] [int]  NULL,
		[market_value] [int]  NULL,
		[inspection_income] [int]  NULL,
		[inspection_net_worth] [int]  NULL,
		[inspection_business_income] [int]  NULL,
		[inspection_business_net_worth] [int]  NULL,
		[inspection_book_value] [int]  NULL,
		[inspection_market_value] [int]  NULL,
		[statement_income] [int]  NULL,
		[statement_net_worth] [int]  NULL,
		[statement_business_income] [int]  NULL,
		[statement_business_net_worth] [int]  NULL,
		[statement_book_value] [int]  NULL,
		[statement_market_value] [int]  NULL,
		[other_income] [int]  NULL,
		[other_net_worth] [int]  NULL,
		[other_business_income] [int]  NULL,
		[other_business_net_worth] [int]  NULL,
		[other_book_value] [int]  NULL,
		[other_market_value] [int]  NULL,
		[employer_hire_date] [datetime]  NULL,
		[employer_hours_worked] [int]  NULL,
		[business_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[business_ownership_percent] [int]  NULL,
		[business_owned_years] [int]  NULL,
		[business_existence_years] [int]  NULL,
		[total_household_income] [numeric]  NULL,
		[occupation_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_phone_areacode] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_phone_prefix] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_phone_suffix] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_phone_extension] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[airmiles_flag] [int]  NULL,
		[airmiles] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[race] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[full_time_student] [int]  NULL,
		[email_communication] [int]  NULL,
		[statement_of_enrollment] [int]  NULL,
		[signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature_date] [datetime]  NULL,
		[ppo_joinder_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ppo_joinder_signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ppo_joinder_signature_date] [datetime]  NULL,
		[translator_relationship] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[translator_signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[translator_signature_date] [datetime]  NULL,
		[translation_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[information_disclosed_by] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[insured_application_info]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[insured_application_info]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'insured_application_info'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [PK_INSURED_APPLICATION_INFO] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_form_insured_birth_country] ON [dbo].[insured_application_info]([birth_country]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_insured] ON [dbo].[insured_application_info]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_benefits_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[insured_benefits_person]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[insured_benefits_person]
	( 	
		[benefit_id] [int]  NULL,
		[person_id] [int]  NULL,
		[role_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_evidence_status_ins_req]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[evidence_status]  
	DROP CONSTRAINT FK_evidence_status_ins_req
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[insured_requirement]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[insured_requirement]
	( 	
		[insured_requirement_id] [int]  NOT NULL,
		[requirement_information_id] [int]  NULL,
		[requirement_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_by] [int]  NULL,
		[added_date] [datetime]  NULL,
		[closed_date] [datetime]  NULL,
		[closed_by] [int]  NULL,
		[closed_disposition] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[needed_for_approval_flag] [int]  NULL,
		[notify_when_satisfied] [int]  NULL,
		[review_message_id] [int]  NULL,
		[policy_person_id] [int]  NULL,
		[followup_date] [datetime]  NULL,
		[ordered_by] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[can_auto_approve] [int]  NULL,
		[notify_when_received] [int]  NULL,
		[received_id] [int]  NULL,
		[note_id] [int]  NULL,
		[received_date] [datetime]  NULL,
		[received_by] [int]  NULL,
		[create_comment] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ordered_date] [datetime]  NULL,
		[provider] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[evidence_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[authorization_required] [int]  NULL,
		[external_requirement_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_followup_date] [datetime]  NULL,
		[manual_or_automatic_entry] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[new_business_until_closed] [int]  NULL,
		[provider_order_id] [int]  NULL,
		[schedule_date] [datetime]  NULL,
		[complete_date] [datetime]  NULL,
		[alt_create_comment] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[status_mode] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[insured_requirement]
	ALTER COLUMN [insured_requirement_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'insured_requirement'), N'insured_requirement_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [PK_INSURED_REQUIREMENT] PRIMARY KEY CLUSTERED 
	(
		[insured_requirement_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): insured_requirement_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_ins_req_followup_date] ON [dbo].[insured_requirement]([followup_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_ins_req_prov_id] ON [dbo].[insured_requirement]([provider_order_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_insured_requirement_22] ON [dbo].[insured_requirement]([insured_requirement_id], [can_auto_approve]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_insured_requirement_23] ON [dbo].[insured_requirement]([requirement_information_id], [requirement_code]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_insured_requirement_24] ON [dbo].[insured_requirement]([requirement_code], [closed_disposition]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_insured_requirement_rvw_msg] ON [dbo].[insured_requirement]([review_message_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_req_pol_pers_id] ON [dbo].[insured_requirement]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[lab_comment]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[lab_comment]
	( 	
		[lab_id_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[requirement_information_id] [int]  NOT NULL,
		[remark_id] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[sequence_no] [int]  NOT NULL,
		[comment_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [remark_id] [char]  (4) NOT NULL
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [sequence_no] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'remark_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'sequence_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_comment] ADD 
	CONSTRAINT [PK_LAB_COMMENT] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id], [remark_id], [sequence_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id, remark_id, sequence_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_configuration]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[lab_configuration]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[lab_configuration]
	( 	
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[request_directory] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[lab_company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[lab_configuration]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_configuration'), N'company_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_configuration]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_configuration] ADD 
	CONSTRAINT [PK_LAB_CONFIGURATION] PRIMARY KEY CLUSTERED 
	(
		[company_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_LAB_COMM_REF_14387_LAB_HEAD]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[lab_comment]  
	DROP CONSTRAINT FK_LAB_COMM_REF_14387_LAB_HEAD
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_lab_resu_ref_10823_lab_head]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[lab_result]  
	DROP CONSTRAINT fk_lab_resu_ref_10823_lab_head
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[lab_header]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[lab_header]
	( 	
		[lab_id_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[requirement_information_id] [int]  NOT NULL,
		[lab_type_id] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[drawn_date] [datetime]  NULL,
		[last_food] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_food_time] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_food_num] [numeric]  NULL,
		[agency_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[special_conditions] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[examiner] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[city] [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[process_type] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[underwriter_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[test_date] [datetime]  NULL,
		[barcode_number] [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[first_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[middle_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ssn] [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birth_date] [datetime]  NULL,
		[sex] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[lab_transmit_date] [datetime]  NULL,
		[lab_receive_date] [datetime]  NULL,
		[ticket_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[company_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ins_type_life] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ins_type_health] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ins_type_disability] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ins_type_group] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ins_type_individual] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[insurance_amount] [numeric]  NULL,
		[drawn_date_serum] [datetime]  NULL,
		[signature_present] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_number] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[completed_date] [datetime]  NULL,
		[agent_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_city] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_zip] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[examiner_company_code] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[examiner_state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[special_status_indicator] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[applicant_address] [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[applicant_zip] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[state_agent] [char]  (14)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[time_collected] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[referrence_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [lab_type_id] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [last_name] [char]  (25) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [first_name] [char]  (25) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_header'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_header] ADD 
	CONSTRAINT [PK_LAB_HEADER] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[lab_result]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[lab_result]
	( 	
		[lab_id_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[requirement_information_id] [int]  NOT NULL,
		[horl_code] [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[indicator] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[result_value] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[high_low] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[sequence_number] [int]  NULL,
		[range_text] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[lab_result]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_result]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[lab_result]
	ALTER COLUMN [horl_code] [char]  (8) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_result'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_result'), N'horl_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [PK_LAB_RESULT] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id], [horl_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id, horl_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lifesuite_version]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[lifesuite_version]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[lifesuite_version]
	( 	
		[lifesuite_version] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[lifesuite_version]
	ALTER COLUMN [lifesuite_version] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lifesuite_version'), N'lifesuite_version', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lifesuite_version]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lifesuite_version] ADD 
	CONSTRAINT [PK_lifesuite_version] PRIMARY KEY CLUSTERED 
	(
		[lifesuite_version]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): lifesuite_version do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_aus_user_limits_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user_limits]  
	DROP CONSTRAINT FK_aus_user_limits_lob
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_plan_code_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_plan_code]  
	DROP CONSTRAINT fk_plan_code_lob
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_line_of_bus]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_line_of_bus
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[line_of_business]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[line_of_business]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[line_of_business]
	( 	
		[line_of_business_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[name] [char]  (120)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[line_of_business]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'line_of_business'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[line_of_business]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[line_of_business] ADD 
	CONSTRAINT [PK_line_of_business] PRIMARY KEY CLUSTERED 
	(
		[line_of_business_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): line_of_business_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ls_file]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ls_file]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ls_file]
	( 	
		[file_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[file_type] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[create_date] [datetime]  NULL,
		[last_modified_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ls_file]
	ALTER COLUMN [file_name] [varchar]  (255) NOT NULL
	ALTER TABLE [dbo].[ls_file]
	ALTER COLUMN [file_type] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ls_file'), N'file_name', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ls_file'), N'file_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ls_file]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ls_file] ADD 
	CONSTRAINT [PK_LSFILE_NAME] PRIMARY KEY CLUSTERED 
	(
		[file_name], [file_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): file_name, file_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[medical_condition_criteria]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[medical_condition_criteria]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[medical_condition_criteria]
	( 	
		[criteria_id] [int]  NOT NULL,
		[bodily_system] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[condition] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[criteria] [varchar] 
    (MAX)
   COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[time_of_criteria] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[points] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [criteria_id] [int] NOT NULL
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [bodily_system] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [condition] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [criteria] [varchar]  (-1) NOT NULL
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [time_of_criteria] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_condition_criteria]
	ALTER COLUMN [points] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'medical_condition_criteria'), N'criteria_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medical_condition_criteria]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medical_condition_criteria] ADD 
	CONSTRAINT [PK_medical_condition_criteria] PRIMARY KEY CLUSTERED 
	(
		[criteria_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): criteria_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[medical_conditions]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[medical_conditions]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[medical_conditions]
	( 	
		[medical_condition_id] [int]  NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[bodily_system] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[condition] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[criteria] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[time_of_criteria] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[points] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[is_system_generated] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[override] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [medical_condition_id] [int] NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [bodily_system] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [condition] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [criteria] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [time_of_criteria] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medical_conditions]
	ALTER COLUMN [points] [varchar]  (5) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'medical_conditions'), N'medical_condition_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medical_conditions]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medical_conditions] ADD 
	CONSTRAINT [PK_medical_conditions] PRIMARY KEY CLUSTERED 
	(
		[medical_condition_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): medical_condition_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[medication]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[medication]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[medication]
	( 	
		[medication_id] [int]  NOT NULL,
		[condition] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[drug_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[points] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[is_system_generated] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[override] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[medication]
	ALTER COLUMN [medication_id] [int] NOT NULL
	ALTER TABLE [dbo].[medication]
	ALTER COLUMN [condition] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medication]
	ALTER COLUMN [drug_name] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medication]
	ALTER COLUMN [points] [varchar]  (5) NOT NULL
	ALTER TABLE [dbo].[medication]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'medication'), N'medication_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medication]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medication] ADD 
	CONSTRAINT [PK_medication_1] PRIMARY KEY CLUSTERED 
	(
		[medication_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): medication_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[medication_points]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[medication_points]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[medication_points]
	( 	
		[prescription_drug_id] [int]  NOT NULL,
		[condition] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[drug_name] [varchar] 
    (MAX)
   COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[points] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[medication_points]
	ALTER COLUMN [prescription_drug_id] [int] NOT NULL
	ALTER TABLE [dbo].[medication_points]
	ALTER COLUMN [condition] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[medication_points]
	ALTER COLUMN [drug_name] [varchar]  (-1) NOT NULL
	ALTER TABLE [dbo].[medication_points]
	ALTER COLUMN [points] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'medication_points'), N'prescription_drug_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[medication_points]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medication_points] ADD 
	CONSTRAINT [PK_medication_points] PRIMARY KEY CLUSTERED 
	(
		[prescription_drug_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): prescription_drug_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[mib_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[mib_code]
	( 	
		[mib_header_id] [int]  NOT NULL,
		[seq_number] [int]  NOT NULL,
		[field_id] [varchar]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[data_item] [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[date_reported] [datetime]  NULL,
		[reported_by] [varchar]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[mib_code]
	ALTER COLUMN [mib_header_id] [int] NOT NULL
	ALTER TABLE [dbo].[mib_code]
	ALTER COLUMN [seq_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'mib_code'), N'mib_header_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'mib_code'), N'seq_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_code] ADD 
	CONSTRAINT [PK_MIB_CODE] PRIMARY KEY CLUSTERED 
	(
		[mib_header_id], [seq_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): mib_header_id, seq_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_coding]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[mib_coding]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[mib_coding]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[sequence_number] [int]  NOT NULL,
		[mib_codes] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[date_added] [datetime]  NULL,
		[date_sent] [datetime]  NULL,
		[added_by] [int]  NULL,
		[effective_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[mib_coding]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[mib_coding]
	ALTER COLUMN [sequence_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'mib_coding'), N'sequence_number', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'mib_coding'), N'policy_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_coding]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_coding] ADD 
	CONSTRAINT [PK_MIB_CODING] PRIMARY KEY CLUSTERED 
	(
		[sequence_number], [policy_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): sequence_number, policy_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_mib_code_ref_598_mib_head]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[mib_code]  
	DROP CONSTRAINT fk_mib_code_ref_598_mib_head
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[mib_header]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[mib_header]
	( 	
		[mib_header_id] [int]  NOT NULL,
		[requirement_information_id] [int]  NOT NULL,
		[policy_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[birth_date] [datetime]  NULL,
		[place_of_birth] [varchar]  (6)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[application_prefix] [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[error_msg_text] [varchar]  (60)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rec_type] [varchar]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[csy] [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[dcode] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[batch_number] [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[inq_number] [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[inq_type] [varchar]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reply_type] [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[first_name] [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[middle_name] [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[inquiry_date] [datetime]  NULL,
		[modify_datetime] [datetime]  NULL,
		[occupation] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [mib_header_id] [int] NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [policy_number] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [csy] [varchar]  (3) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [last_name] [varchar]  (25) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [first_name] [varchar]  (25) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'mib_header'), N'mib_header_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_header] ADD 
	CONSTRAINT [PK_MIB_HEADER] PRIMARY KEY CLUSTERED 
	(
		[mib_header_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): mib_header_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_mib_req_inf_id] ON [dbo].[mib_header]([requirement_information_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[mvr_detail]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[mvr_detail]
	( 	
		[mvr_header_id] [int]  NOT NULL,
		[seq_number] [int]  NOT NULL,
		[record_type] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[data] [char]  (80)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[modify_datetime] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[mvr_detail]
	ALTER COLUMN [mvr_header_id] [int] NOT NULL
	ALTER TABLE [dbo].[mvr_detail]
	ALTER COLUMN [seq_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'mvr_detail'), N'mvr_header_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'mvr_detail'), N'seq_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mvr_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mvr_detail] ADD 
	CONSTRAINT [PK_MVR_DETAIL] PRIMARY KEY CLUSTERED 
	(
		[mvr_header_id], [seq_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): mvr_header_id, seq_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_mvr_deta_ref_9662_mvr_head]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mvr_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[mvr_detail]  
	DROP CONSTRAINT fk_mvr_deta_ref_9662_mvr_head
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[mvr_header]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[mvr_header]
	( 	
		[mvr_header_id] [int]  NOT NULL,
		[requirement_information_id] [int]  NOT NULL,
		[report_date] [datetime]  NULL,
		[state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[license_number] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birth_date] [datetime]  NULL,
		[soc_sec_no] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[license_status] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[license_class] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[issue_date] [datetime]  NULL,
		[expire_date] [datetime]  NULL,
		[restrictions] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[driver_information] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[first_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[middle_name] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[license_address] [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[license_city_state] [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[batch_number] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[batch_sequence] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[modify_datetime] [datetime]  NULL,
		[report_status] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [mvr_header_id] [int] NOT NULL
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [last_name] [char]  (25) NOT NULL
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [first_name] [char]  (25) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'mvr_header'), N'mvr_header_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mvr_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mvr_header] ADD 
	CONSTRAINT [PK_MVR_HEADER] PRIMARY KEY CLUSTERED 
	(
		[mvr_header_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): mvr_header_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mvr_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_mvr_req_inf] ON [dbo].[mvr_header]([requirement_information_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[notes]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[notes]
	( 	
		[note_id] [int]  NOT NULL,
		[author] [int]  NULL,
		[note_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[topic] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[visibility] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NOT NULL,
		[update_date] [datetime]  NULL,
		[diary_date] [datetime]  NULL,
		[note] [text]  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_person_id] [int]  NULL,
		[refer_to_user_id] [int]  NULL,
		[updated_by] [int]  NULL,
		[email_to_list] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reviewed_by] [int]  NULL,
		[reviewed_date] [datetime]  NULL,
		[alt_topic] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_note] [text]  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY]  TEXTIMAGE_ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[notes]
	ALTER COLUMN [note_id] [int] NOT NULL
	ALTER TABLE [dbo].[notes]
	ALTER COLUMN [added_date] [datetime] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'notes'), N'note_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'notes'), N'added_date', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[notes] ADD 
	CONSTRAINT [PK_NOTES] PRIMARY KEY CLUSTERED 
	(
		[note_id], [added_date]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_id, added_date do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_note_auth_comp] ON [dbo].[notes]([author], [diary_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_note_auth_id] ON [dbo].[notes]([author]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_note_diary_date] ON [dbo].[notes]([diary_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_note_refer_id] ON [dbo].[notes]([refer_to_user_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_notes_insured_id] ON [dbo].[notes]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[object_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[object_property]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[object_property]
	( 	
		[object_property_id] [int]  NOT NULL,
		[object_id] [int]  NOT NULL,
		[name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[value] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[object_property]
	ALTER COLUMN [object_property_id] [int] NOT NULL
	ALTER TABLE [dbo].[object_property]
	ALTER COLUMN [object_id] [int] NOT NULL
	ALTER TABLE [dbo].[object_property]
	ALTER COLUMN [name] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'object_property'), N'object_property_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[object_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[object_property] ADD 
	CONSTRAINT [PK_OBJECT_PROPERTY] PRIMARY KEY CLUSTERED 
	(
		[object_property_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): object_property_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[object_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_obj_prop] ON [dbo].[object_property]([object_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[occupation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[occupation]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[occupation]
	( 	
		[occupation] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[is_ratable] [int]  NULL,
		[occupation_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[occupation]
	ALTER COLUMN [occupation] [varchar]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'occupation'), N'occupation', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[occupation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[occupation] ADD 
	CONSTRAINT [PK_OCCUPATION] PRIMARY KEY CLUSTERED 
	(
		[occupation]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): occupation do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[paramed]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[paramed]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[barcode_number] [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birthdate] [datetime]  NULL,
		[sex] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[first_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[middle_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[title] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[suffix] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tax_id_no] [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agency_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agency_name] [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_name] [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[extract_date] [datetime]  NULL,
		[extract_file_name] [varchar]  (128)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[import_date] [datetime]  NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[policy_person_id] [int]  NULL,
		[doctor_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_addr] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_city] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_state] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[doctor_zip] [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_visit_date] [datetime]  NULL,
		[visit_reason] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[findings] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[treatments] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[still_under_treatment_flag] [int]  NULL,
		[prior_consultations_flag] [int]  NULL,
		[prior_consultation_detail] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[manual_entry_flag] [int]  NULL,
		[height_inches] [int]  NULL,
		[did_you_weigh_flag] [int]  NULL,
		[did_you_measure_flag] [int]  NULL,
		[weight_pounds] [int]  NULL,
		[weight_loss_gain] [numeric]  NULL,
		[weight_change_reason] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[waist_size] [numeric]  NULL,
		[chest_exhale] [numeric]  NULL,
		[chest_inhale] [numeric]  NULL,
		[systolic] [int]  NULL,
		[diastolic] [int]  NULL,
		[pulse] [int]  NULL,
		[exam_company_number] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[exam_company_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[examiner_number] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[examiner_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[are_you_a_doctor_flag] [int]  NULL,
		[any_answered_yes] [int]  NULL,
		[any_additional_information] [int]  NULL,
		[any_unanswered_questions] [int]  NULL,
		[any_underlined_words] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[paramed]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'paramed'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[paramed] ADD 
	CONSTRAINT [PK_PARAMED] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_paramed_pol_pers] ON [dbo].[paramed]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_relation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[party_relation]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[party_relation]
	( 	
		[person_id] [int]  NOT NULL,
		[parent_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[party_relation]
	ALTER COLUMN [person_id] [int] NOT NULL
	ALTER TABLE [dbo].[party_relation]
	ALTER COLUMN [parent_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'party_relation'), N'person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'party_relation'), N'parent_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[party_relation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[party_relation] ADD 
	CONSTRAINT [PK_party_relation] PRIMARY KEY CLUSTERED 
	(
		[person_id], [parent_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id, parent_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AGENCY_REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[agency]  
	DROP CONSTRAINT FK_AGENCY_REFERENCE_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AGENT_REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[agent]  
	DROP CONSTRAINT FK_AGENT_REFERENCE_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_aus_user_ref_582_person]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user]  
	DROP CONSTRAINT fk_aus_user_ref_582_person
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COMPANY_REF_8638_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[company]  
	DROP CONSTRAINT FK_COMPANY_REF_8638_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_INSURED__REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_benefits_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_benefits_person]  
	DROP CONSTRAINT FK_INSURED__REFERENCE_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_PERSON_A_REF_9598_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[person_address]  
	DROP CONSTRAINT FK_PERSON_A_REF_9598_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_PERSON_A_REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_alias]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[person_alias]  
	DROP CONSTRAINT FK_PERSON_A_REFERENCE_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_PERSON_P_REF_6967_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[person_phone]  
	DROP CONSTRAINT FK_PERSON_P_REF_6967_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_EMPLOYER_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[employer_plan]  
	DROP CONSTRAINT FK_EMPLOYER_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_party_relation_person]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[party_relation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[party_relation]  
	DROP CONSTRAINT FK_party_relation_person
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_party_relation_person1]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[party_relation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[party_relation]  
	DROP CONSTRAINT FK_party_relation_person1
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_requirem_ref_574_person]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_information]  
	DROP CONSTRAINT fk_requirem_ref_574_person
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_tpa_person_id]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tpa]  
	DROP CONSTRAINT fk_tpa_person_id
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_PERSON
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_ppo_id]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured]  
	DROP CONSTRAINT FK_cov_ppo_id
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_P_REFERENCE_PERSON]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person]  
	DROP CONSTRAINT FK_POLICY_P_REFERENCE_PERSON
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[person]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[person]
	( 	
		[person_id] [int]  NOT NULL,
		[party_id] [int]  NULL,
		[last_name] [char]  (150)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[first_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[middle_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birth_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[title] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[suffix] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tax_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tax_type_id] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[birth_date] [datetime]  NULL,
		[sex] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[person_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[preferred_language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[email_address] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[marital_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[client_id] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_email_address] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[preferred_contact_mode] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[class_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[field1] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[field2] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[field3] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[field4] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[field5] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[person]
	ALTER COLUMN [person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person'), N'person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person] ADD 
	CONSTRAINT [PK_PERSON] PRIMARY KEY CLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_client_id] ON [dbo].[person]([client_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_party_id] ON [dbo].[person]([party_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_person_dob] ON [dbo].[person]([birth_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_person_last_name] ON [dbo].[person]([last_name]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_tax_id] ON [dbo].[person]([tax_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[person_address]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[person_address]
	( 	
		[person_id] [int]  NOT NULL,
		[address_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[city] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[country_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[postal_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[country_state_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[address_line1] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[address_line2] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[address_line3] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[mailing_address_flag] [int]  NULL,
		[county] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[person_address]
	ALTER COLUMN [person_id] [int] NOT NULL
	ALTER TABLE [dbo].[person_address]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_address'), N'person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_address'), N'address_type_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [PK_PERSON_ADDRESS] PRIMARY KEY CLUSTERED 
	(
		[person_id], [address_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id, address_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_alias]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[person_alias]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[person_alias]
	( 	
		[person_name_id] [int]  NOT NULL,
		[person_id] [int]  NULL,
		[title] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[first_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[middle_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[suffix] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[person_alias]
	ALTER COLUMN [person_name_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_alias'), N'person_name_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_alias]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_alias] ADD 
	CONSTRAINT [PK_PERSON_ALIAS] PRIMARY KEY CLUSTERED 
	(
		[person_name_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_name_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[person_phone]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[person_phone]
	( 	
		[person_id] [int]  NOT NULL,
		[phone_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[country_calling_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[area_code] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[prefix] [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[suffix] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[extension] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[pin] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_preferred] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[person_phone]
	ALTER COLUMN [person_id] [int] NOT NULL
	ALTER TABLE [dbo].[person_phone]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_phone'), N'person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_phone'), N'phone_type_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_phone] ADD 
	CONSTRAINT [PK_PERSON_PHONE] PRIMARY KEY CLUSTERED 
	(
		[person_id], [phone_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id, phone_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[plan_benefit]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[plan_benefit]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[benefit_id] [int]  NOT NULL,
		[g_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[plan_benefit]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[plan_benefit]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[plan_benefit]
	ALTER COLUMN [benefit_id] [int] NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_plan_benefit] ON [dbo].[plan_benefit]([language_code], [plan_code_id], [benefit_id], [g_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_policy_admin_status_policy]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_admin_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_admin_status]  
	DROP CONSTRAINT FK_policy_admin_status_policy
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_policy_id_policy_syssearch]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[system_search_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[system_search_info]  
	DROP CONSTRAINT FK_policy_id_policy_syssearch
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_AUS_USER_REFERENCE_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[aus_user_recent_files]  
	DROP CONSTRAINT FK_AUS_USER_REFERENCE_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_EXTENDED_REFERENCE_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[extended_property]  
	DROP CONSTRAINT FK_EXTENDED_REFERENCE_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_A_REFERENCE_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_assignment]  
	DROP CONSTRAINT FK_POLICY_A_REFERENCE_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_C_REFERENCE_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_coverage]  
	DROP CONSTRAINT FK_POLICY_C_REFERENCE_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_L_REF_20862_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_log]  
	DROP CONSTRAINT FK_POLICY_L_REF_20862_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_P_REFERENCE_POLICY]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person]  
	DROP CONSTRAINT FK_POLICY_P_REFERENCE_POLICY
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_policy_s_ref_5389_policy]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_status_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_status_history]  
	DROP CONSTRAINT fk_policy_s_ref_5389_policy
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_review_m_ref_278_policy]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[review_message]  
	DROP CONSTRAINT fk_review_m_ref_278_policy
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy]
	( 	
		[policy_id] [int]  NOT NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[application_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[issue_date] [datetime]  NULL,
		[underwriter_id] [int]  NULL,
		[team_id] [int]  NULL,
		[application_date] [datetime]  NULL,
		[agent_signed_date] [datetime]  NULL,
		[policy_status_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_status_date] [datetime]  NULL,
		[receive_date] [datetime]  NULL,
		[policy_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[dirty_flag] [int]  NULL,
		[current_edit_user_id] [int]  NULL,
		[current_edit_date] [datetime]  NULL,
		[payment_mode_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[last_underwrite_date] [datetime]  NULL,
		[allow_aus_approval] [int]  NULL,
		[final_action_date] [datetime]  NULL,
		[reinsurance_indicator] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reinsurance_vendor_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[final_action_note_id] [int]  NULL,
		[updated_by] [int]  NULL,
		[updated_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[final_action_by] [int]  NULL,
		[added_date] [datetime]  NULL,
		[cwa_amount] [numeric]  NULL,
		[cwa_date] [datetime]  NULL,
		[payment_method_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[priority] [int]  NULL,
		[reason_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[final_action_note] [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bank_rounting_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bank_account_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[credit_card_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[credit_card_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[credit_card_expiration_year] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[credit_card_expiration_month] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[list_bill_location] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[list_bill_employee_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bill_day] [int]  NULL,
		[marketing_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[mode_premium] [numeric]  NULL,
		[requested_issue_date] [datetime]  NULL,
		[version] [int]  NULL,
		[case_group_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[service_associate_id] [int]  NULL,
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tpa_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amex_account] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[performed_jet_issue_flag] [int]  NULL,
		[source_info] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[lead_number_id] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[distributor_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alternate_case_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cedent_policy_number] [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cedent_company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cedent_fax_number] [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cedent_underwriter_id] [int]  NULL,
		[cedent_contact_id] [int]  NULL,
		[cedent_date_sent] [datetime]  NULL,
		[international_or_domestic] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[idb_flag] [int]  NULL,
		[currency_code] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[preferred_language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[partner_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[application_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bank_account_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[back_date_policy] [int]  NULL,
		[agent_staff_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_team_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[commission_override] [int]  NULL,
		[ppo_network] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[employer_id] [int]  NULL,
		[group_indicator] [int]  NULL,
		[product_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[trust_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[case_clock_flag] [int]  NULL,
		[tia_indicator] [int]  NULL,
		[bank_transaction_number] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bank_name_on_account] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[sales_director_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[sales_director_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bank_trans_num_is_valid_flag] [int]  NULL,
		[bank_routing_num_is_valid_flag] [int]  NULL,
		[marketing_key_is_valid_flag] [int]  NULL,
		[dcn] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[overall_premium] [numeric]  NULL,
		[rate_up_amount] [numeric]  NULL,
		[credit_card_verification_code] [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[account_holder_name] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[enrollment_statement] [int]  NULL,
		[credit_card_billing_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[user_case_opened] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy]
	ALTER COLUMN [policy_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy]
	ALTER COLUMN [policy_number] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy'), N'policy_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [PK_POLICY] PRIMARY KEY CLUSTERED 
	(
		[policy_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_case_grp] ON [dbo].[policy]([case_group_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_sa_id] ON [dbo].[policy]([service_associate_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_stat_code] ON [dbo].[policy]([policy_status_code]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_stat_user] ON [dbo].[policy]([policy_status_code], [underwriter_id], [service_associate_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_un_id] ON [dbo].[policy]([underwriter_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_policy_priority] ON [dbo].[policy]([priority]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_policy_receive_date] ON [dbo].[policy]([receive_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [policy_number_ak] ON [dbo].[policy]([policy_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [update_date_ak] ON [dbo].[policy]([updated_date]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_admin_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_admin_status]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_admin_status]
	( 	
		[policy_id] [int]  NOT NULL,
		[policy_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[issue_date] [datetime]  NULL,
		[inforce_date] [datetime]  NULL,
		[agent_status] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cwa_amount] [decimal]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_admin_status]
	ALTER COLUMN [policy_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_admin_status'), N'policy_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_admin_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_admin_status] ADD 
	CONSTRAINT [PK_policy_admin_status] PRIMARY KEY CLUSTERED 
	(
		[policy_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_assignment]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_assignment]
	( 	
		[policy_id] [int]  NULL,
		[user_id] [int]  NULL,
		[assignment_role] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[assign_date] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REF_POLICY_C2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_benefits]  
	DROP CONSTRAINT FK_COVERAGE_REF_POLICY_C2
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REF_POLICY_C3]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person]  
	DROP CONSTRAINT FK_COVERAGE_REF_POLICY_C3
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_POLICY_C]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_POLICY_C
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_coverage]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_coverage]
	( 	
		[policy_coverage_id] [int]  NOT NULL,
		[policy_id] [int]  NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[death_benefit_option_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[purpose_of_coverage_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[coverage_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[indicator_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amount] [numeric]  NULL,
		[coverage_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[premium_mode] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[investment_objective] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[pref_date_of_withdrawl] [datetime]  NULL,
		[planned_premium] [numeric]  NULL,
		[initial_planned_premium] [numeric]  NULL,
		[equivalent_age] [int]  NULL,
		[can_take_final_action_flag] [int]  NULL,
		[temp_flat_extra_period] [int]  NULL,
		[perm_flat_extra_amount] [numeric]  NULL,
		[temp_flat_extra_amount] [numeric]  NULL,
		[flat_extra_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_rating] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[temp_table_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_table_rating] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[perm_table_reason] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[dividend_option] [int]  NULL,
		[approved_amount] [numeric]  NULL,
		[benefit_amount_basis] [int]  NULL,
		[modal_premium_amount] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_coverage]
	ALTER COLUMN [policy_coverage_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_coverage'), N'policy_coverage_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_coverage] ADD 
	CONSTRAINT [PK_POLICY_COVERAGE] PRIMARY KEY CLUSTERED 
	(
		[policy_coverage_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_coverage_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_cov_pol_id] ON [dbo].[policy_coverage]([policy_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_extract]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_extract]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_extract]
	( 	
		[policy_id] [int]  NOT NULL,
		[company_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[will_update] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[life_pro_crc] [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[nailba_100_crc] [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[nailba_200_crc] [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_extract]
	ALTER COLUMN [policy_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_extract'), N'policy_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_extract]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_extract] ADD 
	CONSTRAINT [PK_POLICY_EXTRACT] PRIMARY KEY CLUSTERED 
	(
		[policy_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_log]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_log]
	( 	
		[policy_log_id] [int]  NOT NULL,
		[policy_id] [int]  NOT NULL,
		[log_text] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[user_id] [int]  NULL,
		[log_date] [datetime]  NOT NULL,
		[log_reason_type] [int]  NULL,
		[log_reason_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_log]
	ALTER COLUMN [policy_log_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy_log]
	ALTER COLUMN [policy_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy_log]
	ALTER COLUMN [log_date] [datetime] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_log'), N'policy_log_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_log] ADD 
	CONSTRAINT [PK_policy_log] PRIMARY KEY CLUSTERED 
	(
		[policy_log_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_log_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_policy_log] ON [dbo].[policy_log]([policy_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_policy_person_retro_info_pp]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_retro_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_retro_info]  
	DROP CONSTRAINT FK_policy_person_retro_info_pp
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_PERSON_AGENT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_agent]  
	DROP CONSTRAINT FK_POLICY_PERSON_AGENT
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_P_REFERENCE_POLICY_P]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_POLICY_P_REFERENCE_POLICY_P
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_PRIMARY_REFERENCE_ID]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_PRIMARY_REFERENCE_ID
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_person]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_person]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[policy_id] [int]  NULL,
		[person_id] [int]  NULL,
		[role_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[relationship_to_insured] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_person]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_person'), N'policy_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person] ADD 
	CONSTRAINT [PK_POLICY_PERSON] PRIMARY KEY CLUSTERED 
	(
		[policy_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_pers_comp] ON [dbo].[policy_person]([policy_person_id], [policy_id], [person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_policy_person] ON [dbo].[policy_person]([policy_id], [person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_policy_person_personid] ON [dbo].[policy_person]([person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_policy_person_policyid] ON [dbo].[policy_person]([policy_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_person_agent]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_person_agent]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[agency_id] [int]  NULL,
		[commission_split] [int]  NULL,
		[commission_option] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[market_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[agent_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[firm_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[level5_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[signature_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_person_agent]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_person_agent'), N'policy_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_agent] ADD 
	CONSTRAINT [PK_POLICY_PERSON_AGENT] PRIMARY KEY CLUSTERED 
	(
		[policy_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_agent_num2] ON [dbo].[policy_person_agent]([agent_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_POLICY_P]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_POLICY_P
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_5982_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_5982_insured
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_MIB_CODI_REF_3419_INSURED]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_coding]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[mib_coding]  
	DROP CONSTRAINT FK_MIB_CODI_REF_3419_INSURED
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_notes_policy_person_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[notes]  
	DROP CONSTRAINT FK_notes_policy_person_insured
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_paramed_ref_5986_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[paramed]  
	DROP CONSTRAINT fk_paramed_ref_5986_insured
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_related_pol_pers_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[related_policies]  
	DROP CONSTRAINT FK_related_pol_pers_insured
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_review_m_ref_13931_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[review_message]  
	DROP CONSTRAINT fk_review_m_ref_13931_insured
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_DOC_APPLICANT_ID]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[doc_mgmt_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[doc_mgmt_history]  
	DROP CONSTRAINT FK_DOC_APPLICANT_ID
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_person_insured]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_person_insured]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[signed_state_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[underwriting_amount] [numeric]  NULL,
		[issue_age] [int]  NULL,
		[primary_insured_flag] [int]  NULL,
		[aviation_exclusion] [int]  NULL,
		[add_uw_amt] [numeric]  NULL,
		[applicant_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[applicant_status_date] [datetime]  NULL,
		[is_member] [int]  NULL,
		[allow_auto_approval] [int]  NULL,
		[adverse_history] [int]  NULL,
		[und_allow_auto_approval] [int]  NULL,
		[und_allow_jet_issue] [int]  NULL,
		[und_allow_auto_ordering] [int]  NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[reopen_date] [datetime]  NULL,
		[retro_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[aviation_flag] [int]  NULL,
		[entertainer_flag] [int]  NULL,
		[sports_flag] [int]  NULL,
		[foreign_flag] [int]  NULL,
		[additional_in_force] [int]  NULL,
		[signed_country_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rx_threshold] [int]  NULL,
		[primary_reference_id] [int]  NULL,
		[medical_coverage_indicator] [int]  NULL,
		[dental_coverage_indicator] [int]  NULL,
		[vision_coverage_indicator] [int]  NULL,
		[applicant_type_id] [int]  NULL,
		[appeal_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rerate_status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[bmi] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_person_insured]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_person_insured'), N'policy_person_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [PK_POLICY_PERSON_INSURED] PRIMARY KEY CLUSTERED 
	(
		[policy_person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_pol_pers_ins_stat] ON [dbo].[policy_person_insured]([applicant_status]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_retro_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_person_retro_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_person_retro_info]
	( 	
		[retro_info_id] [int]  NOT NULL,
		[policy_person_id] [int]  NOT NULL,
		[retro_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[date_sent] [datetime]  NULL,
		[papers_sent] [datetime]  NULL,
		[date_replied] [datetime]  NULL,
		[action] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rating] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amount] [int]  NULL,
		[comments] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[product] [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_person_retro_info]
	ALTER COLUMN [retro_info_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy_person_retro_info]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_person_retro_info'), N'retro_info_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_retro_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_retro_info] ADD 
	CONSTRAINT [PK_policy_person_retro_info] PRIMARY KEY CLUSTERED 
	(
		[retro_info_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): retro_info_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_retro_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_retro_pol_pers] ON [dbo].[policy_person_retro_info]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_relations]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_relations]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_relations]
	( 	
		[policy_relation_id] [int]  NOT NULL,
		[policy_id] [int]  NOT NULL,
		[related_policy_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_relations]
	ALTER COLUMN [policy_relation_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy_relations]
	ALTER COLUMN [policy_id] [int] NOT NULL
	ALTER TABLE [dbo].[policy_relations]
	ALTER COLUMN [related_policy_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_relations'), N'policy_relation_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_relations]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_relations] ADD 
	CONSTRAINT [PK_policy_relations2] PRIMARY KEY CLUSTERED 
	(
		[policy_relation_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_relation_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_status_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[policy_status_history]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[policy_status_history]
	( 	
		[policy_status_history_id] [numeric]  NOT NULL,
		[policy_id] [int]  NULL,
		[policy_status_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[user_id] [int]  NULL,
		[effective_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[policy_status_history]
	ALTER COLUMN [policy_status_history_id] [numeric] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'policy_status_history'), N'policy_status_history_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_status_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_status_history] ADD 
	CONSTRAINT [PK_POLICY_STATUS_HISTORY] PRIMARY KEY CLUSTERED 
	(
		[policy_status_history_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_status_history_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_tl_requirement_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_requirement]  
	DROP CONSTRAINT FK_tl_requirement_provider
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_provider
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[provider]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[provider]
	( 	
		[provider] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[provider_class] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[evidence_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[evidence_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[us_vendor] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[non_us_vendor] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[provider_type] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[caseone_schedulenow] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[provider]
	ALTER COLUMN [provider] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[provider]
	ALTER COLUMN [evidence_type] [char]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'provider'), N'provider', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'provider'), N'evidence_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[provider]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[provider] ADD 
	CONSTRAINT [PK_provider] PRIMARY KEY CLUSTERED 
	(
		[provider], [evidence_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): provider, evidence_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_provider_order]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_provider_order
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[provider_order]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[provider_order]
	( 	
		[provider_order_id] [int]  NOT NULL,
		[ordered_date] [datetime]  NULL,
		[closed_date] [datetime]  NULL,
		[tracking_number] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alternate_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[provider_order]
	ALTER COLUMN [provider_order_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'provider_order'), N'provider_order_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[provider_order] ADD 
	CONSTRAINT [PK_provider_order] PRIMARY KEY CLUSTERED 
	(
		[provider_order_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): provider_order_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_tracking_number] ON [dbo].[provider_order]([tracking_number]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[reinsurance_vendor]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[reinsurance_vendor]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[reinsurance_vendor]
	( 	
		[reinsurance_vendor_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[reinsurance_vendor]
	ALTER COLUMN [reinsurance_vendor_code] [char]  (10) NOT NULL
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[related_policies]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[related_policies]
	( 	
		[policy_person_id] [int]  NOT NULL,
		[sequence_number] [int]  NOT NULL,
		[company] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_number] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[status] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[amount] [numeric]  NULL,
		[replacement_flag] [int]  NULL,
		[replacement_date] [datetime]  NULL,
		[comment_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[relationship] [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[relation_type] [int]  NULL,
		[adb_amount] [numeric]  NULL,
		[issue_date] [datetime]  NULL,
		[purpose_of_coverage] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[underwrite_flag] [int]  NULL,
		[line_of_business] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[benefit_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[elimination_period] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[employer_paid_percent] [int]  NULL,
		[replacement_type] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[decision] [numeric]  NULL,
		[bill_status] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reinsurance_amount] [numeric]  NULL,
		[reinsurance_type] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[person_id] [int]  NULL,
		[termination_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[related_policies]
	ALTER COLUMN [policy_person_id] [int] NOT NULL
	ALTER TABLE [dbo].[related_policies]
	ALTER COLUMN [sequence_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'related_policies'), N'policy_person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'related_policies'), N'sequence_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[related_policies] ADD 
	CONSTRAINT [PK_RELATED_POLICIES] PRIMARY KEY CLUSTERED 
	(
		[policy_person_id], [sequence_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_person_id, sequence_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_requirem_ref_15525_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_information]  
	DROP CONSTRAINT fk_requirem_ref_15525_requirem
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_info_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[requirement_info_request]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[requirement_info_request]
	( 	
		[requirement_request_id] [int]  NOT NULL,
		[requested_by_id] [int]  NULL,
		[date_requested] [datetime]  NULL,
		[status] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[received_date] [datetime]  NULL,
		[vendor_id] [int]  NULL,
		[followup_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[requirement_info_request]
	ALTER COLUMN [requirement_request_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_info_request'), N'requirement_request_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_info_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_info_request] ADD 
	CONSTRAINT [PK_REQUIREMENT_INFO_REQUEST] PRIMARY KEY CLUSTERED 
	(
		[requirement_request_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_request_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_evidence_status_req_info]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[evidence_status]  
	DROP CONSTRAINT FK_evidence_status_req_info
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_family_h_ref_8276_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[family_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[family_history]  
	DROP CONSTRAINT fk_family_h_ref_8276_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_lab_head_ref_542_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[lab_header]  
	DROP CONSTRAINT fk_lab_head_ref_542_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_mib_head_ref_559_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mib_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[mib_header]  
	DROP CONSTRAINT fk_mib_head_ref_559_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_mvr_head_ref_9647_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[mvr_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[mvr_header]  
	DROP CONSTRAINT fk_mvr_head_ref_9647_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_tobacco_ref_8267_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tobacco]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tobacco]  
	DROP CONSTRAINT fk_tobacco_ref_8267_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_INSURED__REFERENCE_REQUIREM]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_INSURED__REFERENCE_REQUIREM
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_req_information]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_req_information
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_paramed_ref_602_requirem]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[paramed]  
	DROP CONSTRAINT fk_paramed_ref_602_requirem
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_instance_reqt_info]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_instance]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_instance]  
	DROP CONSTRAINT FK_form_instance_reqt_info
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[requirement_information]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[requirement_information]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[person_id] [int]  NULL,
		[create_date] [datetime]  NULL,
		[match_method] [int]  NULL,
		[status] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[vendor_id] [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[manual_or_electronic_entry] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[expiration_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[requirement_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[requirement_request_id] [int]  NULL,
		[lifespan_days] [int]  NULL,
		[insured_requirement_id] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[requirement_information]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_information'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_information] ADD 
	CONSTRAINT [PK_REQUIREMENT_INFORMATION] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_req_inf_ins_req] ON [dbo].[requirement_information]([insured_requirement_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[requirement_match]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[requirement_match]
	( 	
		[requirement_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[lab_specimen_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[requirement_match]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[requirement_match]
	ALTER COLUMN [lab_specimen_id] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_match'), N'requirement_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_match'), N'lab_specimen_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [PK_requirement_match] PRIMARY KEY CLUSTERED 
	(
		[requirement_code], [lab_specimen_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_code, lab_specimen_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_request_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[requirement_request_event]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[requirement_request_event]
	( 	
		[requirement_request_id] [int]  NOT NULL,
		[entry_datetime] [datetime]  NULL,
		[policy_id] [int]  NULL,
		[party_id] [int]  NULL,
		[insured_requirement_id] [int]  NULL,
		[provider_class] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[request_cmd] [int]  NULL,
		[request_thread_id] [int]  NULL,
		[hierarchy] [int]  NULL,
		[provider_service_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[vendor_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[billing_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[document_service_provider] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_ordered_separate] [int]  NULL,
		[retry_datetime] [datetime]  NULL,
		[attempt_count] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[requirement_request_event]
	ALTER COLUMN [requirement_request_id] [int] NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_request_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_request_thread] ON [dbo].[requirement_request_event]([request_thread_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_review_message]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_review_message
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[review_message]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[review_message]
	( 	
		[review_message_id] [int]  NOT NULL,
		[note_id] [int]  NULL,
		[policy_id] [int]  NULL,
		[sequence_number] [int]  NULL,
		[message_type] [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[message] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[origin_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[checkoff_flag] [int]  NULL,
		[message_number] [int]  NULL,
		[added_date] [datetime]  NULL,
		[check_off_date] [datetime]  NULL,
		[checked_off_by] [int]  NULL,
		[policy_person_id] [int]  NULL,
		[rule_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[review_message_comment] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_message] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_comment] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[user_role_type] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[review_message]
	ALTER COLUMN [review_message_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'review_message'), N'review_message_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[review_message] ADD 
	CONSTRAINT [PK_REVIEW_MESSAGE] PRIMARY KEY CLUSTERED 
	(
		[review_message_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): review_message_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_review_message_policy_ins] ON [dbo].[review_message]([policy_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [IX_review_message_policy_rule] ON [dbo].[review_message]([policy_id], [rule_name]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_rvw_msg_type] ON [dbo].[review_message]([message_type], [user_role_type]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_rvw_msg_user_role] ON [dbo].[review_message]([user_role_type]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_rvwmsg_pol_pers_id] ON [dbo].[review_message]([policy_person_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sequence_number]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[sequence_number]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[sequence_number]
	( 	
		[id] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[next_num] [int]  NOT NULL,
		[prefix] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[sequence_number]
	ALTER COLUMN [id] [char]  (5) NOT NULL
	ALTER TABLE [dbo].[sequence_number]
	ALTER COLUMN [next_num] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'sequence_number'), N'id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sequence_number]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[sequence_number] ADD 
	CONSTRAINT [pk_sequence_number] PRIMARY KEY CLUSTERED 
	(
		[id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[service_associate_range]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[service_associate_range]
	( 	
		[service_associate_login_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[from_string] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[to_string] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [service_associate_login_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [from_string] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [to_string] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'service_associate_range'), N'service_associate_login_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'service_associate_range'), N'from_string', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[service_associate_range] ADD 
	CONSTRAINT [PK_service_associate_range] PRIMARY KEY CLUSTERED 
	(
		[service_associate_login_id], [from_string]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): service_associate_login_id, from_string do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_service_associate_range] ON [dbo].[service_associate_range]([from_string], [to_string]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sysdiagrams]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[sysdiagrams]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[sysdiagrams]
	( 	
		[name] [nvarchar]  (128)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[principal_id] [int]  NOT NULL,
		[diagram_id] [int]  Identity (1 ,1) NOT NULL,
		[version] [int]  NULL,
		[definition] [varbinary]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[sysdiagrams]
	ALTER COLUMN [name] [sysname] NOT NULL
	ALTER TABLE [dbo].[sysdiagrams]
	ALTER COLUMN [principal_id] [int] NOT NULL
	ALTER TABLE [dbo].[sysdiagrams]
	ALTER COLUMN [diagram_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'sysdiagrams'), N'diagram_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sysdiagrams]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[sysdiagrams] ADD 
	CONSTRAINT [PK__sysdiagrams__03317E3D] PRIMARY KEY CLUSTERED 
	(
		[diagram_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): diagram_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'sysdiagrams'), N'principal_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'sysdiagrams'), N'name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sysdiagrams]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[sysdiagrams] ADD 
	CONSTRAINT [UK_principal_name] UNIQUE NONCLUSTERED 
	(
		[principal_id], [name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): principal_id, name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[system_search_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[system_search_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[system_search_info]
	( 	
		[system_search_id] [int]  NOT NULL,
		[policy_id] [int]  NULL,
		[system_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_number] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cedent_company] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[decision_amount] [numeric]  NULL,
		[action] [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[action_date] [datetime]  NULL,
		[retained_amount] [numeric]  NULL,
		[retro_amount] [numeric]  NULL,
		[rating] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[smoker] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[policy_date] [datetime]  NULL,
		[policy_status] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[uw_basis] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[net_amount_at_risk] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[system_search_info]
	ALTER COLUMN [system_search_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'system_search_info'), N'system_search_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[system_search_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[system_search_info] ADD 
	CONSTRAINT [PK_system_search_info] PRIMARY KEY CLUSTERED 
	(
		[system_search_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): system_search_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_AGE_F_REF_4178_TA_AGE_B]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_age_face_amount_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]  
	DROP CONSTRAINT FK_TR_AGE_F_REF_4178_TA_AGE_B
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_age_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_age_band]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_age_band]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[age_band_seq_no] [int]  NOT NULL,
		[age_from] [numeric]  NULL,
		[age_to] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_age_band]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[ta_age_band]
	ALTER COLUMN [age_band_seq_no] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_age_band'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_age_band'), N'age_band_seq_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_age_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_age_band] ADD 
	CONSTRAINT [PK_TA_AGE_BAND] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [age_band_seq_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, age_band_seq_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_band_level]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_band_level]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_band_level]
	( 	
		[band_level_id] [int]  NOT NULL,
		[sequence_number] [int]  NOT NULL,
		[value_from] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[value_to] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[point_id] [int]  NULL,
		[next_band_level_id] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_band_level]
	ALTER COLUMN [band_level_id] [int] NOT NULL
	ALTER TABLE [dbo].[ta_band_level]
	ALTER COLUMN [sequence_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_band_level'), N'band_level_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_band_level'), N'sequence_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_band_level]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_band_level] ADD 
	CONSTRAINT [PK_TA_BAND_LEVEL] PRIMARY KEY CLUSTERED 
	(
		[band_level_id], [sequence_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): band_level_id, sequence_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_AGE_F_REF_4185_TA_FACE_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_age_face_amount_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]  
	DROP CONSTRAINT FK_TR_AGE_F_REF_4185_TA_FACE_
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_face_amount_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_face_amount_band]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_face_amount_band]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[face_amount_seq_no] [int]  NOT NULL,
		[face_amount_from] [numeric]  NULL,
		[face_amount_to] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_face_amount_band]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[ta_face_amount_band]
	ALTER COLUMN [face_amount_seq_no] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_face_amount_band'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_face_amount_band'), N'face_amount_seq_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_face_amount_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_face_amount_band] ADD 
	CONSTRAINT [PK_TA_FACE_AMOUNT_BAND] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [face_amount_seq_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, face_amount_seq_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_BAND__REF_570_TA_POINT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_band_level]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_band_level]  
	DROP CONSTRAINT FK_TA_BAND__REF_570_TA_POINT
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_point_allocation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_point_allocation]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_point_allocation]
	( 	
		[point_id] [int]  NOT NULL,
		[can_points_from] [numeric]  NULL,
		[can_points_to] [numeric]  NULL,
		[cad_points_from] [numeric]  NULL,
		[cad_points_to] [numeric]  NULL,
		[ao_points_from] [numeric]  NULL,
		[ao_points_to] [numeric]  NULL,
		[kickout_flag] [int]  NULL,
		[rate_class] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[smoking_rate_class] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[review_message] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[assign_points] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_point_allocation]
	ALTER COLUMN [point_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_point_allocation'), N'point_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_point_allocation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_point_allocation] ADD 
	CONSTRAINT [PK_TA_POINT_ALLOCATION] PRIMARY KEY CLUSTERED 
	(
		[point_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): point_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_UNDERWRI_REF_5297_TA_POINT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[underwriting_detail]  
	DROP CONSTRAINT FK_UNDERWRI_REF_5297_TA_POINT
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_point_rule]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_point_rule]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[rule_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[first_band_id] [int]  NULL,
		[male_can_points] [numeric]  NULL,
		[male_cad_points] [numeric]  NULL,
		[male_ao_points] [numeric]  NULL,
		[female_can_points] [numeric]  NULL,
		[female_cad_points] [numeric]  NULL,
		[female_ao_points] [numeric]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_point_rule]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[ta_point_rule]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_point_rule'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_point_rule'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_point_rule] ADD 
	CONSTRAINT [PK_TA_POINT_RULE] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_rate_table_class]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_rate_table_class]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_rate_table_class]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[sequence_no] [numeric]  NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[smoking_class] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[allow_aus_approval] [int]  NULL,
		[male_can_pct] [numeric]  NULL,
		[male_cad_pct] [numeric]  NULL,
		[male_ao_pct] [numeric]  NULL,
		[female_can_pct] [numeric]  NULL,
		[female_cad_pct] [numeric]  NULL,
		[female_ao_pct] [numeric]  NULL,
		[comment_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_rate_table_class]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[ta_rate_table_class]
	ALTER COLUMN [sequence_no] [numeric] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_rate_table_class'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_rate_table_class'), N'sequence_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_rate_table_class]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_rate_table_class] ADD 
	CONSTRAINT [PK_TA_RATE_TABLE_CLASS] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [sequence_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, sequence_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_rule_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[ta_rule_option]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[ta_rule_option]
	( 	
		[rule_id] [numeric]  NOT NULL,
		[option_type] [int]  NOT NULL,
		[sequence_no] [numeric]  NOT NULL,
		[review_message] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[comment_text] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[requirement_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[requirement_group_id] [int]  NULL,
		[rate_class] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[rate_class_smoking] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_checkable] [int]  NULL,
		[decline_policy_flag] [int]  NULL,
		[is_smoker_flag] [int]  NULL,
		[points] [int]  NULL,
		[priority] [int]  NULL,
		[allow_jet_issue] [int]  NULL,
		[allow_auto_approval] [int]  NULL,
		[allow_auto_ordering] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[ta_rule_option]
	ALTER COLUMN [rule_id] [numeric] NOT NULL
	ALTER TABLE [dbo].[ta_rule_option]
	ALTER COLUMN [option_type] [int] NOT NULL
	ALTER TABLE [dbo].[ta_rule_option]
	ALTER COLUMN [sequence_no] [numeric] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_rule_option'), N'rule_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_rule_option'), N'option_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_rule_option'), N'sequence_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_rule_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_rule_option] ADD 
	CONSTRAINT [PK_TA_RULE_OPTION] PRIMARY KEY CLUSTERED 
	(
		[rule_id], [option_type], [sequence_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rule_id, option_type, sequence_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_BAND__REF_566_TE_BAND]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_band_level]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_band_level]  
	DROP CONSTRAINT FK_TA_BAND__REF_566_TE_BAND
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_POINT_REF_574_TE_BAND]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_point_rule]  
	DROP CONSTRAINT FK_TA_POINT_REF_574_TE_BAND
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[te_band]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[te_band]
	( 	
		[band_id] [int]  NOT NULL,
		[based_on] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[te_band]
	ALTER COLUMN [band_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_band'), N'band_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_band] ADD 
	CONSTRAINT [PK_TE_BAND] PRIMARY KEY CLUSTERED 
	(
		[band_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): band_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_case_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[te_case_assignment]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[te_case_assignment]
	( 	
		[user_id] [int]  NULL,
		[person_id] [int]  NULL,
		[criteria_from] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[criteria_to] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[te_rule]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[te_rule]
	( 	
		[rule_id] [int]  NOT NULL,
		[rule_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[rulebook_id] [int]  NULL,
		[description] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[rule_text] [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[te_rule]
	ALTER COLUMN [rule_id] [int] NOT NULL
	ALTER TABLE [dbo].[te_rule]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rule'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rule'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rule] ADD 
	CONSTRAINT [AK_IX_RULE_NAME_TE_RULE] UNIQUE NONCLUSTERED 
	(
		[rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rule'), N'rule_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rule] ADD 
	CONSTRAINT [PK_TE_RULE] PRIMARY KEY CLUSTERED 
	(
		[rule_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rule_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_PLAN__REFERENCE_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_plan_code_rulebook]  
	DROP CONSTRAINT FK_TR_PLAN__REFERENCE_TE_RULEB
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_te_rulebook_form_te_rb]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form]  
	DROP CONSTRAINT FK_te_rulebook_form_te_rb
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_AGE_B_REF_4168_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_age_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_age_band]  
	DROP CONSTRAINT FK_TA_AGE_B_REF_4168_TE_RULEB
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_FACE__REF_4164_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_face_amount_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_face_amount_band]  
	DROP CONSTRAINT FK_TA_FACE__REF_4164_TE_RULEB
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_POINT_REF_534_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_point_rule]  
	DROP CONSTRAINT FK_TA_POINT_REF_534_TE_RULEB
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TA_RATE__REF_530_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[ta_rate_table_class]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[ta_rate_table_class]  
	DROP CONSTRAINT FK_TA_RATE__REF_530_TE_RULEB
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TE_RULE_REFERENCE_TE_RULEB]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[te_rule]  
	DROP CONSTRAINT FK_TE_RULE_REFERENCE_TE_RULEB
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[te_rulebook]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[te_rulebook]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[rulebook_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[effective_date] [datetime]  NULL,
		[is_active] [int]  NULL,
		[non_smoking_classes] [int]  NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[age_calc_rule] [int]  NULL,
		[rulebook_script] [text]  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[smoker_quit_months_duration] [int]  NULL,
		[smoker_if_positive_test] [int]  NULL,
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[type] [int]  NULL
	)   ON [PRIMARY]  TEXTIMAGE_ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[te_rulebook]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[te_rulebook]
	ALTER COLUMN [rulebook_name] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rulebook'), N'rulebook_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rulebook] ADD 
	CONSTRAINT [PK_TE_RULEBOOK] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_rulebook_type_effdate] ON [dbo].[te_rulebook]([effective_date], [type]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[te_rulebook_form]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[te_rulebook_form]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[form_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[te_rulebook_form]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[te_rulebook_form]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rulebook_form'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rulebook_form'), N'form_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [PK_te_rulebook_form] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_tr_user_team_team]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_user_team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_user_team]  
	DROP CONSTRAINT FK_tr_user_team_team
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[team]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[team]
	( 	
		[team_id] [int]  NOT NULL,
		[team_name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[description] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL,
		[deleted] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[team]
	ALTER COLUMN [team_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'team'), N'team_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[team] ADD 
	CONSTRAINT [PK_TEAM] PRIMARY KEY CLUSTERED 
	(
		[team_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): team_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_acord_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_acord_codes]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_acord_codes]
	( 	
		[code_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[code_id] [int]  NOT NULL,
		[code_value] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_acord_codes]
	ALTER COLUMN [code_type] [char]  (50) NOT NULL
	ALTER TABLE [dbo].[tl_acord_codes]
	ALTER COLUMN [code_id] [int] NOT NULL
	ALTER TABLE [dbo].[tl_acord_codes]
	ALTER COLUMN [code_value] [char]  (100) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_acord_codes'), N'code_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_acord_codes'), N'code_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_acord_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_acord_codes] ADD 
	CONSTRAINT [PK_acord_codes_valuelist] PRIMARY KEY CLUSTERED 
	(
		[code_type], [code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code_type, code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_ADDRE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_ADDRE
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_address_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_address_type]
	( 	
		[address_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_address_type]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type'), N'address_type_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_address_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type] ADD 
	CONSTRAINT [PK_TL_ADDRESS_TYPE] PRIMARY KEY CLUSTERED 
	(
		[address_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): address_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_address_type_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_address_type_description]
	( 	
		[address_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_address_type_description]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_address_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type_description'), N'address_type_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [PK_TL_ADDRESS_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[address_type_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): address_type_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_lab_resu_ref_9315_tl_ansi_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[lab_result]  
	DROP CONSTRAINT fk_lab_resu_ref_9315_tl_ansi_
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_ansi_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_ansi_code]
	( 	
		[horl_code] [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[sequence_number] [int]  NULL,
		[lab_specimen_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[ansi] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[lis] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[lnrm] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[capsco] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[cna] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[low_male] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[high_male] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[low_female] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[high_female] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[unit] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_ansi_code]
	ALTER COLUMN [horl_code] [char]  (8) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_ansi_code'), N'horl_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_ansi_code] ADD 
	CONSTRAINT [PK_TL_ANSI_CODE] PRIMARY KEY CLUSTERED 
	(
		[horl_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): horl_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_question_tl_answer_set]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_question_tl_answer_set
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ANSWE_REFERENCE_TL_ANSWE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_answer_set_answers]  
	DROP CONSTRAINT FK_TL_ANSWE_REFERENCE_TL_ANSWE
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_answer_set]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_answer_set]
	( 	
		[answer_set_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_answer_set]
	ALTER COLUMN [answer_set_name] [varchar]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set'), N'answer_set_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_answer_set]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_answer_set] ADD 
	CONSTRAINT [PK_TL_ANSWER_SET] PRIMARY KEY CLUSTERED 
	(
		[answer_set_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): answer_set_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_answer_set_answers]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_answer_set_answers]
	( 	
		[answer_set_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[sequence_number] [numeric]  NOT NULL,
		[answer_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_answer_text] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_answer_set_answers]
	ALTER COLUMN [answer_set_name] [varchar]  (50) NOT NULL
	ALTER TABLE [dbo].[tl_answer_set_answers]
	ALTER COLUMN [sequence_number] [numeric] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set_answers'), N'sequence_number', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set_answers'), N'answer_set_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_answer_set_answers] ADD 
	CONSTRAINT [PK_TL_ANSWER_SET_ANSWERS] PRIMARY KEY CLUSTERED 
	(
		[sequence_number], [answer_set_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): sequence_number, answer_set_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_applicant_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_applicant_status]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_applicant_status]
	( 	
		[applicant_status_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_applicant_status]
	ALTER COLUMN [applicant_status_code] [char]  (20) NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_BENEF]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_BENEF
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_beneficiary_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_beneficiary_type]
	( 	
		[beneficiary_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_beneficiary_type]
	ALTER COLUMN [beneficiary_type] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type'), N'beneficiary_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_beneficiary_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type] ADD 
	CONSTRAINT [PK_TL_BENEFICIARY_TYPE] PRIMARY KEY CLUSTERED 
	(
		[beneficiary_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): beneficiary_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_beneficiary_type_desc]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_beneficiary_type_desc]
	( 	
		[beneficiary_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
	ALTER COLUMN [beneficiary_type] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type_desc'), N'beneficiary_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [PK_TL_BENEFICIARY_TYPE_DESCRIP] PRIMARY KEY CLUSTERED 
	(
		[beneficiary_type], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): beneficiary_type, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_FK_TL_BEN_TL_BENEF]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description]  
	DROP CONSTRAINT FK_TL_BENEF_FK_TL_BEN_TL_BENEF
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_benefit_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_benefit_type]
	( 	
		[benefit_id] [int]  NOT NULL,
		[name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[base_coverage_flag] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_benefit_type]
	ALTER COLUMN [benefit_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_benefit_type'), N'benefit_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_benefit_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type] ADD 
	CONSTRAINT [PK_TL_BENEFIT_TYPE] PRIMARY KEY CLUSTERED 
	(
		[benefit_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): benefit_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_benefit_type_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_benefit_type_description]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[benefit_id] [int]  NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_benefit_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_benefit_type_description]
	ALTER COLUMN [benefit_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_benefit_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_benefit_type_description'), N'benefit_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [PK_TL_BENEFIT_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[language_code], [benefit_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, benefit_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_code]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[code_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[code_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[code_value] [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_type] [char]  (50) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_id] [char]  (30) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_value] [varchar]  (1000) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_code] ADD 
	CONSTRAINT [pk_code_valuelist] PRIMARY KEY CLUSTERED 
	(
		[language_code], [code_type], [code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, code_type, code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_COUNT_REF_9601_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_country_state]  
	DROP CONSTRAINT FK_TL_COUNT_REF_9601_TL_COUNT
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1047_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1047_tl_count
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1059_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1059_tl_count
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REF_14466_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REF_14466_TL_COUNT
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REFERENCE_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REFERENCE_TL_COUNT
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_ppi_sci_REF_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_ppi_sci_REF_TL_COUNT
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_country]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_country]
	( 	
		[country_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[country_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[country_name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[mib_country] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_country_name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_country]
	ALTER COLUMN [country_id] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country'), N'country_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country] ADD 
	CONSTRAINT [PK_TL_COUNTRY] PRIMARY KEY CLUSTERED 
	(
		[country_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_person_a_ref_2023_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[person_address]  
	DROP CONSTRAINT fk_person_a_ref_2023_tl_count
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1051_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1051_tl_count
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1055_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1055_tl_count
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_INSURED_REF_14420_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_INSURED_REF_14420_TL_COUNT
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_country_state]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_country_state]
	( 	
		[country_state_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[country_id] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[state_code] [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[state_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_state_name] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [country_state_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [country_id] [char]  (30) NOT NULL
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [state_code] [char]  (5) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country_state'), N'country_state_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [PK_TL_COUNTRY_STATE] PRIMARY KEY CLUSTERED 
	(
		[country_state_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_state_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_indicator_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_coverage_indicator_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_coverage_indicator_code]
	( 	
		[indicator_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_coverage_indicator_code]
	ALTER COLUMN [indicator_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_coverage_indicator_code'), N'indicator_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_coverage_indicator_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_coverage_indicator_code] ADD 
	CONSTRAINT [PK_TL_COVERAGE_INDICATOR_CODE] PRIMARY KEY CLUSTERED 
	(
		[indicator_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): indicator_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_coverage_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_coverage_type]
	( 	
		[coverage_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_coverage_type]
	ALTER COLUMN [coverage_type] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_coverage_type'), N'coverage_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_coverage_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_coverage_type] ADD 
	CONSTRAINT [PK_TL_COVERAGE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[coverage_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_DEATH]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_DEATH
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_death_benefit_option]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_death_benefit_option]
	( 	
		[death_benefit_option_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_death_benefit_option]
	ALTER COLUMN [death_benefit_option_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option'), N'death_benefit_option_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_death_benefit_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option] ADD 
	CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION] PRIMARY KEY CLUSTERED 
	(
		[death_benefit_option_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): death_benefit_option_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_death_benefit_option_desc]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_death_benefit_option_desc]
	( 	
		[death_benefit_option_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
	ALTER COLUMN [death_benefit_option_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option_desc'), N'death_benefit_option_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION_DES] PRIMARY KEY CLUSTERED 
	(
		[death_benefit_option_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): death_benefit_option_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_distributor_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_distributor_codes]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_distributor_codes]
	( 	
		[distributor_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[distributor_description] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_distributor_codes]
	ALTER COLUMN [distributor_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_distributor_codes]
	ALTER COLUMN [distributor_description] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_distributor_codes'), N'distributor_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_distributor_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_distributor_codes] ADD 
	CONSTRAINT [PK_distributor] PRIMARY KEY CLUSTERED 
	(
		[distributor_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): distributor_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_extended_property]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_extended_property]
	( 	
		[property_name] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[data_type] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_extended_property]
	ALTER COLUMN [property_name] [varchar]  (255) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_extended_property'), N'property_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_extended_property] ADD 
	CONSTRAINT [PK_TL_EXTENDED_PROPERTY] PRIMARY KEY CLUSTERED 
	(
		[property_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): property_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_family_history_relationship]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_family_history_relationship]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_family_history_relationship]
	( 	
		[famhist_relationship_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_family_history_relationship]
	ALTER COLUMN [famhist_relationship_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_family_history_relationship'), N'famhist_relationship_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_family_history_relationship]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_family_history_relationship] ADD 
	CONSTRAINT [PK_TL_FAMILY_HISTORY_RELATIONS] PRIMARY KEY CLUSTERED 
	(
		[famhist_relationship_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): famhist_relationship_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_final_action_reason]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_final_action_reason]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_final_action_reason]
	( 	
		[reason_status] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reason_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[alt_reason_text] [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[reason_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_final_action_reason]
	ALTER COLUMN [reason_text] [varchar]  (100) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_final_action_reason'), N'reason_text', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_final_action_reason]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_final_action_reason] ADD 
	CONSTRAINT [PK_TL_FINAL_ACTION_REASON] PRIMARY KEY CLUSTERED 
	(
		[reason_text]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): reason_text do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_form_tl_form_type]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[form]  
	DROP CONSTRAINT FK_form_tl_form_type
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_form_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_form_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_form_type]
	( 	
		[form_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[form_name] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[form_desc] [char]  (250)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_form_type]
	ALTER COLUMN [form_type] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_form_type'), N'form_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_form_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_form_type] ADD 
	CONSTRAINT [PK_tl_form_type] PRIMARY KEY CLUSTERED 
	(
		[form_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_lab_request]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_lab_request]
	( 	
		[request_code] [varchar]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_lab_request]
	ALTER COLUMN [request_code] [varchar]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_lab_request'), N'request_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_lab_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_lab_request] ADD 
	CONSTRAINT [PK_TL_LAB_REQUEST] PRIMARY KEY CLUSTERED 
	(
		[request_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): request_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_lab_specimen_id]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_match]  
	DROP CONSTRAINT FK_lab_specimen_id
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[fk_tl_ansi__ref_10810_tl_lab_s]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_ansi_code]  
	DROP CONSTRAINT fk_tl_ansi__ref_10810_tl_lab_s
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_specimen]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_lab_specimen]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_lab_specimen]
	( 	
		[lab_specimin_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[can_match] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_lab_specimen]
	ALTER COLUMN [lab_specimin_id] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_lab_specimen]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_lab_specimen] ADD 
	CONSTRAINT [PK_TL_LAB_SPECIMEN] PRIMARY KEY CLUSTERED 
	(
		[lab_specimin_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): lab_specimin_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description]  
	DROP CONSTRAINT FK_TL_BENEF_REF_TL_LANGU2
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_LANGU2
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_LANGU
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_LANGU2
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_language]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_language]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_language]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_language]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_language'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_language]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_language] ADD 
	CONSTRAINT [PK_TL_LANGUAGE] PRIMARY KEY CLUSTERED 
	(
		[language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_marital_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_marital_status]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_marital_status]
	( 	
		[marital_status_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[external_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_marital_status]
	ALTER COLUMN [marital_status_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_marital_status'), N'marital_status_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_marital_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_marital_status] ADD 
	CONSTRAINT [PK_tl_marital_status] PRIMARY KEY CLUSTERED 
	(
		[marital_status_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): marital_status_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_NOTE_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_NOTE_
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_note_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_note_type]
	( 	
		[note_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_note_type]
	ALTER COLUMN [note_type] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type'), N'note_type', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_note_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type] ADD 
	CONSTRAINT [PK_TL_NOTE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[note_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_note_type_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_note_type_description]
	( 	
		[note_type] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_note_type_description]
	ALTER COLUMN [note_type] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_note_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type_description'), N'note_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [PK_TL_NOTE_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[note_type], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_type, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_person_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_person_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_person_type]
	( 	
		[person_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_person_type]
	ALTER COLUMN [person_type_id] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_person_type'), N'person_type_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_person_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_person_type] ADD 
	CONSTRAINT [PK_TL_PERSON_TYPE] PRIMARY KEY CLUSTERED 
	(
		[person_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_PHONE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_PHONE
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_phone_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_phone_type]
	( 	
		[phone_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_phone_type]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type'), N'phone_type_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_phone_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type] ADD 
	CONSTRAINT [PK_TL_PHONE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[phone_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): phone_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_phone_type_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_phone_type_description]
	( 	
		[phone_type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_phone_type_description]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_phone_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type_description'), N'phone_type_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [PK_TL_PHONE_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[phone_type_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): phone_type_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_PLAN__REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_plan_code_rulebook]  
	DROP CONSTRAINT FK_TR_PLAN__REFERENCE_TL_PLAN_
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_EMPLOYER_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[employer_plan]  
	DROP CONSTRAINT FK_EMPLOYER_PLAN_CODE
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_plan_benefit_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[plan_benefit]  
	DROP CONSTRAINT FK_plan_benefit_plan
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_benefit_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[benefit_period]  
	DROP CONSTRAINT FK_benefit_period_plan
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_elimination_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[elimination_period]  
	DROP CONSTRAINT FK_elimination_period_plan
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_plan
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PLAN_OPTION_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_plan_option]  
	DROP CONSTRAINT FK_TL_PLAN_OPTION_PLAN_CODE
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_C_REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_coverage]  
	DROP CONSTRAINT FK_POLICY_C_REFERENCE_TL_PLAN_
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_plan_code]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_plan_code]
	( 	
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[line_of_business_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_lang] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_description] [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_plan_code]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_code'), N'plan_code_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_code] ADD 
	CONSTRAINT [PK_TL_PLAN_CODE] PRIMARY KEY CLUSTERED 
	(
		[plan_code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): plan_code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_plan_option]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_plan_option]
	( 	
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[option_type] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[sequence_number] [int]  NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [option_type] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [sequence_number] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'option_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'plan_code_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'sequence_number', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_option] ADD 
	CONSTRAINT [PK_tl_plan_option] PRIMARY KEY CLUSTERED 
	(
		[language_code], [option_type], [plan_code_id], [sequence_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, option_type, plan_code_id, sequence_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_POLIC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_POLIC
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_policy_role]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_policy_role]
	( 	
		[code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_policy_role]
	ALTER COLUMN [code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role'), N'code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_role]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role] ADD 
	CONSTRAINT [PK_TL_POLICY_ROLE] PRIMARY KEY CLUSTERED 
	(
		[code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_policy_role_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_policy_role_description]
	( 	
		[code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_policy_role_description]
	ALTER COLUMN [code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_policy_role_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role_description'), N'code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [PK_TL_POLICY_ROLE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_POLIC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_POLIC2
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_policy_status]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_policy_status]
	( 	
		[policy_status_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[short_code] [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_policy_status]
	ALTER COLUMN [policy_status_code] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status'), N'policy_status_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status] ADD 
	CONSTRAINT [PK_TL_POLICY_STATUS] PRIMARY KEY CLUSTERED 
	(
		[policy_status_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_status_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_policy_status_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_policy_status_description]
	( 	
		[policy_status_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_policy_status_description]
	ALTER COLUMN [policy_status_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_policy_status_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status_description'), N'policy_status_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [PK_TL_POLICY_STATUS_DESCRIPTIO] PRIMARY KEY CLUSTERED 
	(
		[policy_status_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_status_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_PURPO]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_PURPO
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_purpose_of_coverage]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_purpose_of_coverage]
	( 	
		[purpose_of_coverage_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_purpose_of_coverage]
	ALTER COLUMN [purpose_of_coverage_id] [char]  (20) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage'), N'purpose_of_coverage_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_purpose_of_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage] ADD 
	CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE] PRIMARY KEY CLUSTERED 
	(
		[purpose_of_coverage_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): purpose_of_coverage_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_purpose_of_coverage_desc]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_purpose_of_coverage_desc]
	( 	
		[purpose_of_coverage_id] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
	ALTER COLUMN [purpose_of_coverage_id] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage_desc'), N'purpose_of_coverage_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE_DESC] PRIMARY KEY CLUSTERED 
	(
		[purpose_of_coverage_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): purpose_of_coverage_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_requirement_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[requirement_match]  
	DROP CONSTRAINT FK_requirement_code
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_GROUP_REF_1197_TL_REQUI]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements]  
	DROP CONSTRAINT FK_TR_GROUP_REF_1197_TL_REQUI
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_tl_requirement]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_tl_requirement
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_requirement]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_requirement]
	( 	
		[requirement_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[requirement_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[requirement_category] [int]  NULL,
		[notify_when_satisfied] [int]  NULL,
		[can_auto_approve] [int]  NULL,
		[expiration_days] [int]  NULL,
		[followup_days] [int]  NULL,
		[requirement_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[default_ordered_by] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[notify_when_received] [int]  NULL,
		[is_active] [int]  NULL,
		[added_date] [datetime]  NULL,
		[added_by] [int]  NULL,
		[update_date] [datetime]  NULL,
		[updated_by] [int]  NULL,
		[external_requirement_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[provider] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[evidence_type] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[authorization_required] [int]  NULL,
		[hippa_auth_required] [int]  NULL,
		[external_followup_days] [int]  NULL,
		[hierarchy] [int]  NULL,
		[new_business_until_closed] [int]  NULL,
		[alt_lang] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[alt_name] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[notify_cm_when_received] [int]  NULL,
		[notify_cm_when_satisfied] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_requirement]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement'), N'requirement_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [PK_TL_REQUIREMENT] PRIMARY KEY CLUSTERED 
	(
		[requirement_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_AGE_F_REF_4196_TL_REQUI]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_age_face_amount_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]  
	DROP CONSTRAINT FK_TR_AGE_F_REF_4196_TL_REQUI
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_GROUP_REF_1194_TL_REQUI]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements]  
	DROP CONSTRAINT FK_TR_GROUP_REF_1194_TL_REQUI
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_requirement_group]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_requirement_group]
	( 	
		[requirement_group_id] [int]  NOT NULL,
		[name] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[description] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_active] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_requirement_group]
	ALTER COLUMN [requirement_group_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement_group'), N'requirement_group_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement_group] ADD 
	CONSTRAINT [PK_TL_REQUIREMENT_GROUP] PRIMARY KEY CLUSTERED 
	(
		[requirement_group_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_group_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement_group'), N'name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement_group] ADD 
	CONSTRAINT [unique_requirement_group_name] UNIQUE NONCLUSTERED 
	(
		[name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_requirement_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_requirement_type]
	( 	
		[requirement_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_requirement_type]
	ALTER COLUMN [requirement_type_id] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement_type'), N'requirement_type_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_requirement_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement_type] ADD 
	CONSTRAINT [PK_TL_REQUIREMENT_TYPE] PRIMARY KEY CLUSTERED 
	(
		[requirement_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_source_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_source_info]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_source_info]
	( 	
		[source_info] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[source_description] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[partner_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_source_info]
	ALTER COLUMN [source_info] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_source_info]
	ALTER COLUMN [source_description] [char]  (30) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_source_info'), N'source_info', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_source_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_source_info] ADD 
	CONSTRAINT [PK_source_info] PRIMARY KEY CLUSTERED 
	(
		[source_info]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): source_info do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_TL_SUBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_TL_SUBAC
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_subaccount]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_subaccount]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_subaccount]
	( 	
		[subaccount_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[full_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[product_symbol] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[effective_date] [datetime]  NULL,
		[stop_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_subaccount]
	ALTER COLUMN [subaccount_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_subaccount'), N'subaccount_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_subaccount]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_subaccount] ADD 
	CONSTRAINT [PK_TL_SUBACCOUNT] PRIMARY KEY CLUSTERED 
	(
		[subaccount_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subaccount_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tax_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_tax_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_tax_type]
	( 	
		[tax_type_id] [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_tax_type]
	ALTER COLUMN [tax_type_id] [char]  (4) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tax_type'), N'tax_type_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tax_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tax_type] ADD 
	CONSTRAINT [PK_TL_TAX_TYPE] PRIMARY KEY CLUSTERED 
	(
		[tax_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tax_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_TOBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_TOBAC
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_tobacco_type]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_tobacco_type]
	( 	
		[tobacco_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_tobacco_type]
	ALTER COLUMN [tobacco_type_id] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type'), N'tobacco_type_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type] ADD 
	CONSTRAINT [PK_TL_TOBACCO_TYPE] PRIMARY KEY CLUSTERED 
	(
		[tobacco_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_tobacco_type_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_tobacco_type_description]
	( 	
		[tobacco_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_tobacco_type_description]
	ALTER COLUMN [tobacco_type_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_tobacco_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type_description'), N'tobacco_type_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [PK_TL_TOBACCO_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[tobacco_type_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_type_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_TOBAC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_TOBAC2
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_tobacco_use]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_tobacco_use]
	( 	
		[tobacco_use_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[external_code] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_tobacco_use]
	ALTER COLUMN [tobacco_use_id] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use'), N'tobacco_use_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_use]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use] ADD 
	CONSTRAINT [PK_TL_TOBACCO_USE] PRIMARY KEY CLUSTERED 
	(
		[tobacco_use_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_use_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_tobacco_use_description]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_tobacco_use_description]
	( 	
		[tobacco_use_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[language_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[description] [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tl_tobacco_use_description]
	ALTER COLUMN [tobacco_use_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_tobacco_use_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use_description'), N'tobacco_use_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [PK_TL_TOBACCO_USE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[tobacco_use_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_use_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tobacco]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tobacco]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tobacco]
	( 	
		[requirement_information_id] [int]  NOT NULL,
		[tobacco_use_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[tobacco_type_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[years_quit] [numeric]  NULL,
		[years_smoked] [numeric]  NULL,
		[packs_per_day] [numeric]  NULL,
		[quit_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tobacco]
	ALTER COLUMN [requirement_information_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tobacco'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tobacco]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tobacco] ADD 
	CONSTRAINT [PK_TOBACCO] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_tpa
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) AND EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_tpa
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tpa]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tpa]
	( 	
		[tpa_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[tpa_short_name] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[person_id] [int]  NOT NULL,
		[contact_last_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[contact_first_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[auto_closure_days] [int]  NULL,
		[expiration_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tpa]
	ALTER COLUMN [tpa_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tpa]
	ALTER COLUMN [tpa_short_name] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tpa]
	ALTER COLUMN [person_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tpa'), N'tpa_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tpa] ADD 
	CONSTRAINT [PK_tpa] PRIMARY KEY CLUSTERED 
	(
		[tpa_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tpa_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE UNIQUE INDEX [IX_tpa_acronym] ON [dbo].[tpa]([tpa_short_name]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_age_face_amount_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tr_age_face_amount_requirement]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tr_age_face_amount_requirement]
	( 	
		[rulebook_id] [int]  NOT NULL,
		[age_band_seq_no] [int]  NOT NULL,
		[face_amount_seq_no] [int]  NOT NULL,
		[requirement_group_id] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]
	ALTER COLUMN [age_band_seq_no] [int] NOT NULL
	ALTER TABLE [dbo].[tr_age_face_amount_requirement]
	ALTER COLUMN [face_amount_seq_no] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_age_face_amount_requirement'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_age_face_amount_requirement'), N'age_band_seq_no', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_age_face_amount_requirement'), N'face_amount_seq_no', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_age_face_amount_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement] ADD 
	CONSTRAINT [PK_TR_AGE_FACE_AMOUNT_REQUIREM] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [age_band_seq_no], [face_amount_seq_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, age_band_seq_no, face_amount_seq_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tr_group_requirements]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tr_group_requirements]
	( 	
		[requirement_group_id] [int]  NOT NULL,
		[requirement_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tr_group_requirements]
	ALTER COLUMN [requirement_group_id] [int] NOT NULL
	ALTER TABLE [dbo].[tr_group_requirements]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_group_requirements'), N'requirement_group_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_group_requirements'), N'requirement_code', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [PK_TR_GROUP_REQUIREMENTS] PRIMARY KEY CLUSTERED 
	(
		[requirement_group_id], [requirement_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_group_id, requirement_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tr_plan_code_rulebook]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tr_plan_code_rulebook]
	( 	
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[effective_date] [datetime]  NULL,
		[rulebook_id] [int]  NOT NULL,
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tr_plan_code_rulebook]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tr_plan_code_rulebook]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	CREATE  INDEX [ix_plan_code_rulebook] ON [dbo].[tr_plan_code_rulebook]([plan_code_id], [rulebook_id]) ON [PRIMARY]
END
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_user_team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tr_user_team]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tr_user_team]
	( 	
		[user_id] [int]  NOT NULL,
		[team_id] [int]  NOT NULL,
		[auto_assign] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[tr_user_team]
	ALTER COLUMN [user_id] [int] NOT NULL
	ALTER TABLE [dbo].[tr_user_team]
	ALTER COLUMN [team_id] [int] NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_user_team'), N'user_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_user_team'), N'team_id', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_user_team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_user_team] ADD 
	CONSTRAINT [PK_tr_user_team] PRIMARY KEY NONCLUSTERED 
	(
		[user_id], [team_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): user_id, team_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[underwriting_detail]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[underwriting_detail]
	( 	
		[insured_id] [int]  NOT NULL,
		[rulebook_id] [int]  NOT NULL,
		[rule_name] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[based_on] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[result_text] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[can_points] [real]  NULL,
		[cad_points] [real]  NULL,
		[ao_points] [real]  NULL,
		[can_class] [int]  NULL,
		[cad_class] [int]  NULL,
		[ao_class] [int]  NULL,
		[kickout_flag] [int]  NULL,
		[added_date] [datetime]  NULL,
		[run_status] [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[review_message_comment] [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[underwriting_detail]
	ALTER COLUMN [insured_id] [int] NOT NULL
	ALTER TABLE [dbo].[underwriting_detail]
	ALTER COLUMN [rulebook_id] [int] NOT NULL
	ALTER TABLE [dbo].[underwriting_detail]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'insured_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) and EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[underwriting_detail] ADD 
	CONSTRAINT [PK_UNDERWRITING_DETAIL] PRIMARY KEY CLUSTERED 
	(
		[insured_id], [rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): insured_id, rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[webpost_retry_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[webpost_retry_event]
END	
GO

IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[webpost_retry_event]
	( 	
		[webpost_retry_id] [int]  NOT NULL,
		[entry_datetime] [datetime]  NULL,
		[policy_id] [int]  NULL,
		[uri] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[soap_action] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[param_data] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[retry_datetime] [datetime]  NULL,
		[retry_count] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO

		--2nd pass thru after add/alter table columns to handle those columns having UDDTs or Not Nulls 
	ALTER TABLE [dbo].[webpost_retry_event]
	ALTER COLUMN [webpost_retry_id] [int] NOT NULL
GO


IF object_id(N'te_case_assignment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'agency'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_case_assignment] ADD 
	CONSTRAINT [FK_TE_CASE__REFERENCE_AGENCY] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[agency] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_case_assignment, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_agent') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'agency'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_agent] ADD 
	CONSTRAINT [FK_POLICY_P_REFERENCE_AGENCY] FOREIGN KEY 
	(	
		[agency_id]
	) REFERENCES [dbo].[agency] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_agent, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_role_privilege') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_privilege'), N'privilege_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_role_privilege] ADD 
	CONSTRAINT [FK_AUS_ROLE_REF_8704_AUS_SECU] FOREIGN KEY 
	(	
		[privilege_id]
	) REFERENCES [dbo].[aus_security_privilege] ( 
		[privilege_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_role_privilege, or the related column: privilege_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_roles'), N'role_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user] ADD 
	CONSTRAINT [fk_aus_user_ref_role] FOREIGN KEY 
	(	
		[role_id]
	) REFERENCES [dbo].[aus_security_roles] ( 
		[role_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user, or the related column: role_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_role_privilege') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_roles'), N'role_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_role_privilege] ADD 
	CONSTRAINT [FK_AUS_ROLE_REF_8700_AUS_SECU] FOREIGN KEY 
	(	
		[role_id]
	) REFERENCES [dbo].[aus_security_roles] ( 
		[role_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_role_privilege, or the related column: role_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_security_privilege') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_subsystem'), N'subsystem_name', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [FK_sec_priv_sec_subsys] FOREIGN KEY 
	(	
		[subsystem_name]
	) REFERENCES [dbo].[aus_security_subsystem] ( 
		[subsystem_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_security_privilege, or the related column: subsystem_name does not exist', 16, 1)
GO
	
IF object_id(N'requirement_info_request') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_info_request] ADD 
	CONSTRAINT [fk_requirem_ref_13269_aus_user] FOREIGN KEY 
	(	
		[requested_by_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_info_request, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'te_case_assignment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_case_assignment] ADD 
	CONSTRAINT [FK_TE_CASE__REFERENCE_AUS_USER] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_case_assignment, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [FK_TL_REQUIREMENT_ADDED_BY] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_requirement, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [FK_TL_REQUIREMENT_UPDATED_BY] FOREIGN KEY 
	(	
		[updated_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_requirement, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_user_team') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_user_team] ADD 
	CONSTRAINT [FK_tr_user_team_aus_user] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_user_team, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user_limits') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [FK_aus_user_limits_user] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_limits, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'requirement_information') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_information] ADD 
	CONSTRAINT [fk_requirem_ref_1955_aus_user] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_information, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user_recent_files') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_recent_files] ADD 
	CONSTRAINT [FK_AUS_USER_REFERENCE_AUS_USER] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_recent_files, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_491_aus_user] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_503_aus_user] FOREIGN KEY 
	(	
		[updated_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_aus_user] FOREIGN KEY 
	(	
		[received_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_aus_user1] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_aus_user2] FOREIGN KEY 
	(	
		[closed_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'notes') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[notes] ADD 
	CONSTRAINT [fk_notes_ref_39_aus_user] FOREIGN KEY 
	(	
		[author]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: notes, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'paramed') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[paramed] ADD 
	CONSTRAINT [fk_paramed_ref_12407_aus_user] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: paramed, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'paramed') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[paramed] ADD 
	CONSTRAINT [fk_paramed_ref_12411_aus_user] FOREIGN KEY 
	(	
		[updated_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: paramed, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [fk_policy_ref_1006_aus_user] FOREIGN KEY 
	(	
		[added_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [fk_policy_ref_1010_aus_user] FOREIGN KEY 
	(	
		[updated_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [fk_policy_ref_13937_aus_user] FOREIGN KEY 
	(	
		[current_edit_user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [fk_policy_ref_992_aus_user] FOREIGN KEY 
	(	
		[underwriter_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [FK_POLICY_REFERENCE_AUS_USER] FOREIGN KEY 
	(	
		[final_action_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy] ADD 
	CONSTRAINT [FK_policy_service_associate] FOREIGN KEY 
	(	
		[service_associate_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_assignment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_assignment] ADD 
	CONSTRAINT [FK_POLICY_A_REFERENCE_AUS_USER] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_assignment, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_log') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_log] ADD 
	CONSTRAINT [FK_POLICY_L_REF_8715_AUS_USER] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_log, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_status_history') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_status_history] ADD 
	CONSTRAINT [fk_policy_s_ref_5408_aus_user] FOREIGN KEY 
	(	
		[user_id]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_status_history, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'review_message') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_user'), N'user_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[review_message] ADD 
	CONSTRAINT [fk_review_m_ref_507_aus_user] FOREIGN KEY 
	(	
		[checked_off_by]
	) REFERENCES [dbo].[aus_user] ( 
		[user_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: review_message, or the related column: user_id does not exist', 16, 1)
GO
	
IF object_id(N'company_mib_entry') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'company_mib'), N'company_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company_mib_entry] ADD 
	CONSTRAINT [FK_COMPANY__REF_17407_COMPANY_] FOREIGN KEY 
	(	
		[company_code]
	) REFERENCES [dbo].[company_mib] ( 
		[company_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: company_mib_entry, or the related column: company_code does not exist', 16, 1)
GO
	
IF object_id(N'coverage_benefits_party') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_benefits'), N'benefit_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_benefits_party] ADD 
	CONSTRAINT [FK_coverage_benefits_party] FOREIGN KEY 
	(	
		[benefit_id],
		[policy_coverage_id]
	) REFERENCES [dbo].[coverage_benefits] ( 
		[benefit_id],
		[policy_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_benefits_party, or the related column: benefit_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_extra_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_extra_info] ADD 
	CONSTRAINT [FK_cov_person_extra_info_cp] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_extra_info, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_beneficiary') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_beneficiary] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_COVERAGE] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_beneficiary, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured] ADD 
	CONSTRAINT [FK_COVERAGE_REF_COVERAGE2] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_insured, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_amendment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_amendment] ADD 
	CONSTRAINT [FK_cov_pers_amendment_cov] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_amendment, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_reinsurer') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_reinsurer] ADD 
	CONSTRAINT [FK_cov_pers_reinsurer_cov] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_reinsurer, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_fund_alloc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_fund_alloc] ADD 
	CONSTRAINT [FK_cov_pers_fund] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_fund_alloc, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'coverage_person'), N'coverage_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_cov] FOREIGN KEY 
	(	
		[coverage_person_id]
	) REFERENCES [dbo].[coverage_person] ( 
		[coverage_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: coverage_person_id does not exist', 16, 1)
GO
	
IF object_id(N'form_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_section] ADD 
	CONSTRAINT [FK_form_section_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_section, or the related column: form_code does not exist', 16, 1)
GO
	
IF object_id(N'te_rulebook_form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [FK_te_rulebook_form_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_rulebook_form, or the related column: form_code does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_instance'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_section] ADD 
	CONSTRAINT [FK_form_inst_section_form_inst] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[form_instance] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_section, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_answer') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_instance_answers_doc_info'), N'form_instance_answer_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_answer] ADD 
	CONSTRAINT [FK_form_inst_ans_doc_info] FOREIGN KEY 
	(	
		[form_instance_answer_id]
	) REFERENCES [dbo].[form_instance_answers_doc_info] ( 
		[form_instance_answer_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_answer, or the related column: form_instance_answer_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_answer') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_instance_question_group'), N'form_instance_question_grp_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_answer] ADD 
	CONSTRAINT [FK_form_inst_ans_q_group] FOREIGN KEY 
	(	
		[form_instance_question_grp_id]
	) REFERENCES [dbo].[form_instance_question_group] ( 
		[form_instance_question_grp_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_answer, or the related column: form_instance_question_grp_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_instance_section'), N'form_instance_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_question_group] ADD 
	CONSTRAINT [FK_form_inst_q_group_sec] FOREIGN KEY 
	(	
		[form_instance_section_id]
	) REFERENCES [dbo].[form_instance_section] ( 
		[form_instance_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_question_group, or the related column: form_instance_section_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_answer') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question'), N'question_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_answer] ADD 
	CONSTRAINT [FK_form_inst_answers_form_ques] FOREIGN KEY 
	(	
		[question_id]
	) REFERENCES [dbo].[form_question] ( 
		[question_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_answer, or the related column: question_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_question_group] ADD 
	CONSTRAINT [FK_form_q_group_quest] FOREIGN KEY 
	(	
		[form_question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_question_group, or the related column: form_question_group_id does not exist', 16, 1)
GO
	
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_quest_quest_group] FOREIGN KEY 
	(	
		[question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: form_question_group_id does not exist', 16, 1)
GO
	
IF object_id(N'form_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question_group] ADD 
	CONSTRAINT [FK_question_group_form_section] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question_group, or the related column: form_section_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance_section] ADD 
	CONSTRAINT [FK_form_inst_section_form_sec] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_section, or the related column: form_section_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_code] FOREIGN KEY 
	(	
		[impairment_restriction_code]
	) REFERENCES [dbo].[impairment_restriction] ( 
		[impairment_restriction_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: impairment_restriction_code does not exist', 16, 1)
GO
	
IF object_id(N'medication') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'insured_application_info'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medication] ADD 
	CONSTRAINT [FK_medication_insured_application_info1] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[insured_application_info] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: medication, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'medical_conditions') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'insured_application_info'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[medical_conditions] ADD 
	CONSTRAINT [FK_medical_conditions_insured_application_info] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[insured_application_info] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: medical_conditions, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'evidence_status') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'insured_requirement'), N'insured_requirement_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[evidence_status] ADD 
	CONSTRAINT [FK_evidence_status_ins_req] FOREIGN KEY 
	(	
		[insured_requirement_id]
	) REFERENCES [dbo].[insured_requirement] ( 
		[insured_requirement_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: evidence_status, or the related column: insured_requirement_id does not exist', 16, 1)
GO
	
IF object_id(N'lab_comment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'lab_header'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_comment] ADD 
	CONSTRAINT [FK_LAB_COMM_REF_14387_LAB_HEAD] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[lab_header] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_comment, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'lab_result') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'lab_header'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [fk_lab_resu_ref_10823_lab_head] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[lab_header] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_result, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user_limits') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [FK_aus_user_limits_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_limits, or the related column: line_of_business_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_plan_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_code] ADD 
	CONSTRAINT [fk_plan_code_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
	
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_line_of_bus] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
	
IF object_id(N'mib_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'mib_header'), N'mib_header_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_code] ADD 
	CONSTRAINT [fk_mib_code_ref_598_mib_head] FOREIGN KEY 
	(	
		[mib_header_id]
	) REFERENCES [dbo].[mib_header] ( 
		[mib_header_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: mib_code, or the related column: mib_header_id does not exist', 16, 1)
GO
	
IF object_id(N'mvr_detail') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'mvr_header'), N'mvr_header_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mvr_detail] ADD 
	CONSTRAINT [fk_mvr_deta_ref_9662_mvr_head] FOREIGN KEY 
	(	
		[mvr_header_id]
	) REFERENCES [dbo].[mvr_header] ( 
		[mvr_header_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: mvr_detail, or the related column: mvr_header_id does not exist', 16, 1)
GO
	
IF object_id(N'agency') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[agency] ADD 
	CONSTRAINT [FK_AGENCY_REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: agency, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'agent') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[agent] ADD 
	CONSTRAINT [FK_AGENT_REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: agent, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user] ADD 
	CONSTRAINT [fk_aus_user_ref_582_person] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'company') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company] ADD 
	CONSTRAINT [FK_COMPANY_REF_8638_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: company, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_benefits_person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_benefits_person] ADD 
	CONSTRAINT [FK_INSURED__REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_benefits_person, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'person_address') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [FK_PERSON_A_REF_9598_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_address, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'person_alias') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_alias] ADD 
	CONSTRAINT [FK_PERSON_A_REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_alias, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'person_phone') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_phone] ADD 
	CONSTRAINT [FK_PERSON_P_REF_6967_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_phone, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'employer_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[employer_plan] ADD 
	CONSTRAINT [FK_EMPLOYER_PERSON] FOREIGN KEY 
	(	
		[employer_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: employer_plan, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'party_relation') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[party_relation] ADD 
	CONSTRAINT [FK_party_relation_person] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: party_relation, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'party_relation') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[party_relation] ADD 
	CONSTRAINT [FK_party_relation_person1] FOREIGN KEY 
	(	
		[parent_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: party_relation, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'requirement_information') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_information] ADD 
	CONSTRAINT [fk_requirem_ref_574_person] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_information, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'tpa') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tpa] ADD 
	CONSTRAINT [fk_tpa_person_id] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tpa, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured] ADD 
	CONSTRAINT [FK_cov_ppo_id] FOREIGN KEY 
	(	
		[ppo_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_insured, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person] ADD 
	CONSTRAINT [FK_POLICY_P_REFERENCE_PERSON] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person, or the related column: person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_admin_status') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_admin_status] ADD 
	CONSTRAINT [FK_policy_admin_status_policy] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_admin_status, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'system_search_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[system_search_info] ADD 
	CONSTRAINT [FK_policy_id_policy_syssearch] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: system_search_info, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'aus_user_recent_files') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_recent_files] ADD 
	CONSTRAINT [FK_AUS_USER_REFERENCE_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_recent_files, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'extended_property') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[extended_property] ADD 
	CONSTRAINT [FK_EXTENDED_REFERENCE_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: extended_property, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_assignment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_assignment] ADD 
	CONSTRAINT [FK_POLICY_A_REFERENCE_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_assignment, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_coverage') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_coverage] ADD 
	CONSTRAINT [FK_POLICY_C_REFERENCE_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_coverage, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_log') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_log] ADD 
	CONSTRAINT [FK_POLICY_L_REF_20862_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_log, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person] ADD 
	CONSTRAINT [FK_POLICY_P_REFERENCE_POLICY] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_status_history') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_status_history] ADD 
	CONSTRAINT [fk_policy_s_ref_5389_policy] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_status_history, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'review_message') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy'), N'policy_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[review_message] ADD 
	CONSTRAINT [fk_review_m_ref_278_policy] FOREIGN KEY 
	(	
		[policy_id]
	) REFERENCES [dbo].[policy] ( 
		[policy_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: review_message, or the related column: policy_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_benefits') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_coverage'), N'policy_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_benefits] ADD 
	CONSTRAINT [FK_COVERAGE_REF_POLICY_C2] FOREIGN KEY 
	(	
		[policy_coverage_id]
	) REFERENCES [dbo].[policy_coverage] ( 
		[policy_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_benefits, or the related column: policy_coverage_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_coverage'), N'policy_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person] ADD 
	CONSTRAINT [FK_COVERAGE_REF_POLICY_C3] FOREIGN KEY 
	(	
		[policy_coverage_id]
	) REFERENCES [dbo].[policy_coverage] ( 
		[policy_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person, or the related column: policy_coverage_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_subaccounts') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_coverage'), N'policy_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_POLICY_C] FOREIGN KEY 
	(	
		[policy_coverage_id]
	) REFERENCES [dbo].[policy_coverage] ( 
		[policy_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_subaccounts, or the related column: policy_coverage_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_retro_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_retro_info] ADD 
	CONSTRAINT [FK_policy_person_retro_info_pp] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_retro_info, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_agent') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_agent] ADD 
	CONSTRAINT [FK_POLICY_PERSON_AGENT] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_agent, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_POLICY_P_REFERENCE_POLICY_P] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_PRIMARY_REFERENCE_ID] FOREIGN KEY 
	(	
		[primary_reference_id]
	) REFERENCES [dbo].[policy_person] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_person_insured] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_POLICY_P] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_insured, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_5982_insured] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'mib_coding') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_coding] ADD 
	CONSTRAINT [FK_MIB_CODI_REF_3419_INSURED] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: mib_coding, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'notes') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[notes] ADD 
	CONSTRAINT [FK_notes_policy_person_insured] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: notes, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'paramed') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[paramed] ADD 
	CONSTRAINT [fk_paramed_ref_5986_insured] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: paramed, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'related_policies') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[related_policies] ADD 
	CONSTRAINT [FK_related_pol_pers_insured] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: related_policies, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'review_message') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[review_message] ADD 
	CONSTRAINT [fk_review_m_ref_13931_insured] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: review_message, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'doc_mgmt_history') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'policy_person_insured'), N'policy_person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[doc_mgmt_history] ADD 
	CONSTRAINT [FK_DOC_APPLICANT_ID] FOREIGN KEY 
	(	
		[policy_person_id]
	) REFERENCES [dbo].[policy_person_insured] ( 
		[policy_person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: doc_mgmt_history, or the related column: policy_person_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [FK_tl_requirement_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_requirement, or the related column: provider does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: provider does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider_order'), N'provider_order_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_provider_order] FOREIGN KEY 
	(	
		[provider_order_id]
	) REFERENCES [dbo].[provider_order] ( 
		[provider_order_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: provider_order_id does not exist', 16, 1)
GO
	
IF object_id(N'requirement_information') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_info_request'), N'requirement_request_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_information] ADD 
	CONSTRAINT [fk_requirem_ref_15525_requirem] FOREIGN KEY 
	(	
		[requirement_request_id]
	) REFERENCES [dbo].[requirement_info_request] ( 
		[requirement_request_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_information, or the related column: requirement_request_id does not exist', 16, 1)
GO
	
IF object_id(N'evidence_status') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[evidence_status] ADD 
	CONSTRAINT [FK_evidence_status_req_info] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: evidence_status, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'family_history') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[family_history] ADD 
	CONSTRAINT [fk_family_h_ref_8276_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: family_history, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'lab_header') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_header] ADD 
	CONSTRAINT [fk_lab_head_ref_542_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_header, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'mib_header') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mib_header] ADD 
	CONSTRAINT [fk_mib_head_ref_559_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: mib_header, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'mvr_header') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[mvr_header] ADD 
	CONSTRAINT [fk_mvr_head_ref_9647_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: mvr_header, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'tobacco') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tobacco] ADD 
	CONSTRAINT [fk_tobacco_ref_8267_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tobacco, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_INSURED__REFERENCE_REQUIREM] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_req_information] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'paramed') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[paramed] ADD 
	CONSTRAINT [fk_paramed_ref_602_requirem] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: paramed, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'form_instance') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'requirement_information'), N'requirement_information_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_instance] ADD 
	CONSTRAINT [FK_form_instance_reqt_info] FOREIGN KEY 
	(	
		[requirement_information_id]
	) REFERENCES [dbo].[requirement_information] ( 
		[requirement_information_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance, or the related column: requirement_information_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'review_message'), N'review_message_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_review_message] FOREIGN KEY 
	(	
		[review_message_id]
	) REFERENCES [dbo].[review_message] ( 
		[review_message_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: review_message_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_age_face_amount_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_age_band'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement] ADD 
	CONSTRAINT [FK_TR_AGE_F_REF_4178_TA_AGE_B] FOREIGN KEY 
	(	
		[rulebook_id],
		[age_band_seq_no]
	) REFERENCES [dbo].[ta_age_band] ( 
		[rulebook_id],
		[age_band_seq_no]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_age_face_amount_requirement, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_age_face_amount_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_face_amount_band'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement] ADD 
	CONSTRAINT [FK_TR_AGE_F_REF_4185_TA_FACE_] FOREIGN KEY 
	(	
		[rulebook_id],
		[face_amount_seq_no]
	) REFERENCES [dbo].[ta_face_amount_band] ( 
		[rulebook_id],
		[face_amount_seq_no]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_age_face_amount_requirement, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_band_level') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_point_allocation'), N'point_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_band_level] ADD 
	CONSTRAINT [FK_TA_BAND__REF_570_TA_POINT] FOREIGN KEY 
	(	
		[point_id]
	) REFERENCES [dbo].[ta_point_allocation] ( 
		[point_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_band_level, or the related column: point_id does not exist', 16, 1)
GO
	
IF object_id(N'underwriting_detail') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_point_rule'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[underwriting_detail] ADD 
	CONSTRAINT [FK_UNDERWRI_REF_5297_TA_POINT] FOREIGN KEY 
	(	
		[rulebook_id],
		[rule_name]
	) REFERENCES [dbo].[ta_point_rule] ( 
		[rulebook_id],
		[rule_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: underwriting_detail, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_band_level') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_band'), N'band_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_band_level] ADD 
	CONSTRAINT [FK_TA_BAND__REF_566_TE_BAND] FOREIGN KEY 
	(	
		[band_level_id]
	) REFERENCES [dbo].[te_band] ( 
		[band_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_band_level, or the related column: band_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_point_rule') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_band'), N'band_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_point_rule] ADD 
	CONSTRAINT [FK_TA_POINT_REF_574_TE_BAND] FOREIGN KEY 
	(	
		[first_band_id]
	) REFERENCES [dbo].[te_band] ( 
		[band_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_point_rule, or the related column: band_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_plan_code_rulebook') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_plan_code_rulebook] ADD 
	CONSTRAINT [FK_TR_PLAN__REFERENCE_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_plan_code_rulebook, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'te_rulebook_form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [FK_te_rulebook_form_te_rb] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_rulebook_form, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_age_band') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_age_band] ADD 
	CONSTRAINT [FK_TA_AGE_B_REF_4168_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_age_band, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_face_amount_band') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_face_amount_band] ADD 
	CONSTRAINT [FK_TA_FACE__REF_4164_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_face_amount_band, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_point_rule') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_point_rule] ADD 
	CONSTRAINT [FK_TA_POINT_REF_534_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_point_rule, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'ta_rate_table_class') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_rate_table_class] ADD 
	CONSTRAINT [FK_TA_RATE__REF_530_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: ta_rate_table_class, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'te_rule') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'te_rulebook'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rule] ADD 
	CONSTRAINT [FK_TE_RULE_REFERENCE_TE_RULEB] FOREIGN KEY 
	(	
		[rulebook_id]
	) REFERENCES [dbo].[te_rulebook] ( 
		[rulebook_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_rule, or the related column: rulebook_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_user_team') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'team'), N'team_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_user_team] ADD 
	CONSTRAINT [FK_tr_user_team_team] FOREIGN KEY 
	(	
		[team_id]
	) REFERENCES [dbo].[team] ( 
		[team_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_user_team, or the related column: team_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_address_type'), N'address_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_ADDRE] FOREIGN KEY 
	(	
		[address_type_code]
	) REFERENCES [dbo].[tl_address_type] ( 
		[address_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: address_type_code does not exist', 16, 1)
GO
	
IF object_id(N'lab_result') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_ansi_code'), N'horl_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [fk_lab_resu_ref_9315_tl_ansi_] FOREIGN KEY 
	(	
		[horl_code]
	) REFERENCES [dbo].[tl_ansi_code] ( 
		[horl_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_result, or the related column: horl_code does not exist', 16, 1)
GO
	
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_question_tl_answer_set] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: answer_set_name does not exist', 16, 1)
GO
	
IF object_id(N'tl_answer_set_answers') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_answer_set_answers] ADD 
	CONSTRAINT [FK_TL_ANSWE_REFERENCE_TL_ANSWE] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_answer_set_answers, or the related column: answer_set_name does not exist', 16, 1)
GO
	
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_beneficiary_type'), N'beneficiary_type', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_BENEF] FOREIGN KEY 
	(	
		[beneficiary_type]
	) REFERENCES [dbo].[tl_beneficiary_type] ( 
		[beneficiary_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: beneficiary_type does not exist', 16, 1)
GO
	
IF object_id(N'tl_benefit_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_benefit_type'), N'benefit_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [FK_TL_BENEF_FK_TL_BEN_TL_BENEF] FOREIGN KEY 
	(	
		[benefit_id]
	) REFERENCES [dbo].[tl_benefit_type] ( 
		[benefit_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_benefit_type_description, or the related column: benefit_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_country_state') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [FK_TL_COUNT_REF_9601_TL_COUNT] FOREIGN KEY 
	(	
		[country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_country_state, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1047_tl_count] FOREIGN KEY 
	(	
		[residence_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1059_tl_count] FOREIGN KEY 
	(	
		[birth_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REF_14466_TL_COUNT] FOREIGN KEY 
	(	
		[drivers_license_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REFERENCE_TL_COUNT] FOREIGN KEY 
	(	
		[citizenship_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_ppi_sci_REF_TL_COUNT] FOREIGN KEY 
	(	
		[signed_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_id does not exist', 16, 1)
GO
	
IF object_id(N'person_address') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [fk_person_a_ref_2023_tl_count] FOREIGN KEY 
	(	
		[country_state_id]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_address, or the related column: country_state_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1051_tl_count] FOREIGN KEY 
	(	
		[residence_state]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_state_id does not exist', 16, 1)
GO
	
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1055_tl_count] FOREIGN KEY 
	(	
		[drivers_license_state]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_state_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_INSURED_REF_14420_TL_COUNT] FOREIGN KEY 
	(	
		[signed_state_id]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_state_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_death_benefit_option'), N'death_benefit_option_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_DEATH] FOREIGN KEY 
	(	
		[death_benefit_option_code]
	) REFERENCES [dbo].[tl_death_benefit_option] ( 
		[death_benefit_option_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: death_benefit_option_code does not exist', 16, 1)
GO
	
IF object_id(N'form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_form_type'), N'form_type', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form] ADD 
	CONSTRAINT [FK_form_tl_form_type] FOREIGN KEY 
	(	
		[form_type]
	) REFERENCES [dbo].[tl_form_type] ( 
		[form_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form, or the related column: form_type does not exist', 16, 1)
GO
	
IF object_id(N'requirement_match') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [FK_lab_specimen_id] FOREIGN KEY 
	(	
		[lab_specimen_id]
	) REFERENCES [dbo].[tl_lab_specimen] ( 
		[lab_specimin_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_match, or the related column: lab_specimin_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_ansi_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_ansi_code] ADD 
	CONSTRAINT [fk_tl_ansi__ref_10810_tl_lab_s] FOREIGN KEY 
	(	
		[lab_specimen_id]
	) REFERENCES [dbo].[tl_lab_specimen] ( 
		[lab_specimin_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_ansi_code, or the related column: lab_specimin_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_benefit_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [FK_TL_BENEF_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_benefit_type_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: language_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_note_type'), N'note_type', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_NOTE_] FOREIGN KEY 
	(	
		[note_type]
	) REFERENCES [dbo].[tl_note_type] ( 
		[note_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: note_type does not exist', 16, 1)
GO
	
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_phone_type'), N'phone_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_PHONE] FOREIGN KEY 
	(	
		[phone_type_code]
	) REFERENCES [dbo].[tl_phone_type] ( 
		[phone_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: phone_type_code does not exist', 16, 1)
GO
	
IF object_id(N'tr_plan_code_rulebook') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_plan_code_rulebook] ADD 
	CONSTRAINT [FK_TR_PLAN__REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_plan_code_rulebook, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'employer_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[employer_plan] ADD 
	CONSTRAINT [FK_EMPLOYER_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: employer_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'plan_benefit') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[plan_benefit] ADD 
	CONSTRAINT [FK_plan_benefit_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: plan_benefit, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'benefit_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[benefit_period] ADD 
	CONSTRAINT [FK_benefit_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: benefit_period, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'elimination_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[elimination_period] ADD 
	CONSTRAINT [FK_elimination_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: elimination_period, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_plan_option') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_option] ADD 
	CONSTRAINT [FK_TL_PLAN_OPTION_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_option, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'policy_coverage') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_coverage] ADD 
	CONSTRAINT [FK_POLICY_C_REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_coverage, or the related column: plan_code_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_role'), N'code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_POLIC] FOREIGN KEY 
	(	
		[code]
	) REFERENCES [dbo].[tl_policy_role] ( 
		[code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: code does not exist', 16, 1)
GO
	
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_status'), N'policy_status_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_POLIC2] FOREIGN KEY 
	(	
		[policy_status_code]
	) REFERENCES [dbo].[tl_policy_status] ( 
		[policy_status_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: policy_status_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_purpose_of_coverage'), N'purpose_of_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_PURPO] FOREIGN KEY 
	(	
		[purpose_of_coverage_id]
	) REFERENCES [dbo].[tl_purpose_of_coverage] ( 
		[purpose_of_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: purpose_of_coverage_id does not exist', 16, 1)
GO
	
IF object_id(N'requirement_match') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [FK_requirement_code] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_match, or the related column: requirement_code does not exist', 16, 1)
GO
	
IF object_id(N'tr_group_requirements') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [FK_TR_GROUP_REF_1197_TL_REQUI] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_group_requirements, or the related column: requirement_code does not exist', 16, 1)
GO
	
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_tl_requirement] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: requirement_code does not exist', 16, 1)
GO
	
IF object_id(N'tr_age_face_amount_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement_group'), N'requirement_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_age_face_amount_requirement] ADD 
	CONSTRAINT [FK_TR_AGE_F_REF_4196_TL_REQUI] FOREIGN KEY 
	(	
		[requirement_group_id]
	) REFERENCES [dbo].[tl_requirement_group] ( 
		[requirement_group_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_age_face_amount_requirement, or the related column: requirement_group_id does not exist', 16, 1)
GO
	
IF object_id(N'tr_group_requirements') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement_group'), N'requirement_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [FK_TR_GROUP_REF_1194_TL_REQUI] FOREIGN KEY 
	(	
		[requirement_group_id]
	) REFERENCES [dbo].[tl_requirement_group] ( 
		[requirement_group_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_group_requirements, or the related column: requirement_group_id does not exist', 16, 1)
GO
	
IF object_id(N'coverage_subaccounts') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_subaccount'), N'subaccount_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_TL_SUBAC] FOREIGN KEY 
	(	
		[subaccount_code]
	) REFERENCES [dbo].[tl_subaccount] ( 
		[subaccount_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_subaccounts, or the related column: subaccount_code does not exist', 16, 1)
GO
	
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_type'), N'tobacco_type_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_TOBAC] FOREIGN KEY 
	(	
		[tobacco_type_id]
	) REFERENCES [dbo].[tl_tobacco_type] ( 
		[tobacco_type_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: tobacco_type_id does not exist', 16, 1)
GO
	
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_use'), N'tobacco_use_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_TOBAC2] FOREIGN KEY 
	(	
		[tobacco_use_id]
	) REFERENCES [dbo].[tl_tobacco_use] ( 
		[tobacco_use_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: tobacco_use_id does not exist', 16, 1)
GO
	
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: tpa_code does not exist', 16, 1)
GO
	
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: tpa_code does not exist', 16, 1)
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agency_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agency_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[agency_proxy_view] as
select
	person.*,
	agency.agency_number,
	agency.routing_number,
	agency.update_date
from
	agency,
	person
where
	person.person_id = agency.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agency_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agency_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[agency_view] as
select
	agency.agency_number,
	agency.routing_number,
	agency.update_date,
	person.*,
	policy_person.policy_id,
	policy_person.role_id,
	policy_person.policy_person_id,
	policy_person.[signature],
	policy_person.[signature_date]
from
	agency,
	person,
	policy_person
WHERE
	(policy_person.role_id like 'agency%' or policy_person.role_id like 'agency%') and
	policy_person.person_id = person.person_id and
	policy_person.person_id = agency.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent_policy_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agent_policy_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view agent_policy_proxy_view as
select
	pa.agent_number,
	p.policy_id,
	p.team_id,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	p.company_code,
	p.priority,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.case_group_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.alternate_case_id,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.policy_person_id,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	ppi.underwriting_amount as insured_underwriting_amount,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.tax_id as insured_tax_id,
	i.client_id as insured_client_id,
	p.receive_date,
	p.added_date,
	p.application_number,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	policy_person_agent pa,
	policy_person ppa,
	person i
where
	pa.policy_person_id = ppa.policy_person_id and
	ppa.policy_id = p.policy_id and
	p.policy_id = pp.policy_id and
	pp.policy_person_id = ppi.policy_person_id and
	pp.person_id = i.person_id and 
	pa.agent_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agent_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[agent_proxy_view] as
select
	person.*,
	agent.[agent_number],
    agent.[routing_number],
    agent.[company_code],
    agent.[descriptor]
from
	person,
	agent
where
	person.person_id = agent.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent_requirements_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agent_requirements_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view agent_requirements_proxy_view as
select
	pa.agent_number,
	rpv.*
from
	policy p,
	policy_person_agent pa,	
	policy_person ppa,
	requirement_proxy_view rpv
where
	pa.policy_person_id = ppa.policy_person_id and		
	ppa.policy_id = p.policy_id and
	p.policy_id = rpv.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[agent_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[agent_view] as
select
	person.*,
	agent.agent_number,
	agent.routing_number,
	agent.company_code,
	agent.descriptor,
	policy_person_agent.policy_person_id,
	policy_person_agent.agency_id,
	policy_person_agent.commission_split,
	policy_person_agent.commission_option,
	policy_person_agent.market_code,
	policy_person_agent.firm_name,
	policy_person_agent.level5_code,
	policy_person.policy_id,
	policy_person.role_id,
    policy_person_agent.[signature],
    policy_person_agent.[signature_date]
from
	person,
	agent,
	policy_person_agent,
	policy_person
where
	policy_person_agent.policy_person_id = policy_person.policy_person_id and
	(policy_person.role_id like 'agent%' or policy_person.role_id like 'Agent%') and
	policy_person.person_id = person.person_id and
	policy_person.person_id = agent.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[application_info_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[application_info_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[application_info_view] as
select
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	ri.insured_requirement_id,
	ai.*,
	'' as last_name,
	'' as middle_name,
	'' as first_name
from
	requirement_information ri, insured_application_info ai
where
	ri.requirement_information_id = ai.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[association_plan_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view association_plan_proxy_view as
select
	ap.association_code,
	ap.plan_code_id,
	tpa_code,
	g_number,
	pc.line_of_business_code,
	mortality_max,
	billing_code,
	expiration_date
from
	association_plan ap,
	tl_plan_code pc
where
	pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[aus_user_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view aus_user_view as
select
	person.*,
	au.user_id,
	au.login_id,
	au.password,
	au.is_active,
	au.level_of_authority,
	au.is_underwriter,
	au.restrict_to_teams,
	au.role_id,
	au.is_service_associate,
	au.job_title,
	au.account_locked,
	au.account_locked_date,
	au.bad_login_attempt_count,
	au.last_bad_login_attempt_date,
	au.must_change_password,
	au.last_password_change_date,
	au.is_agent,
	au.agent_number,
	au.is_agency,
	au.agency_number,
	au.deleted,
	au.use_single_sign_on
from
	person,
	aus_user au
where
	au.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[auto_closure_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[auto_closure_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view auto_closure_proxy_view as
select
		*
from
		policy_proxy_view
where
	applicant_status_short in ('PE', 'PM', 'NB', 'FA') and
	policy_person_id in
		(select
			ir.policy_person_id
		 from
			insured_requirement ir
		 where
			((ir.closed_disposition is null or
	 		  ir.closed_disposition in('O', 'H')) and
			 ir.ordered_date is not null) or
			ir.closed_disposition = 'OR'
	 	)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[automation_event_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[automation_event_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view automation_event_view as
select
	*
from
	aus_event
where
	aus_cmd >= 1100 and aus_cmd < 1200

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_amount_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[benefit_amount_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view benefit_amount_operand_view as
select
	'getBenefitAmount(' + rtrim(code_value) + ')' as name,
	'dec' as type,
	'Benifit ' + rtrim(code_value) + ' Amount' as display,
	'The amount of the ' + rtrim(code_value) + ' Benefit on the coverage.'  as description,
	'' as value_list
from
	codes_view
where
	code_type = 'benefit_type' and
	language_code = 'en-us'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_exists_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[benefit_exists_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view benefit_exists_operand_view as
select
	'getBenefitExists(' + rtrim(code_value) + ')' as name,
	'bool' as type,
	'Benifit ' + rtrim(code_value) + ' Exists' as display,
	'Determines if ' + rtrim(code_value) + ' Benefit exists on the coverage.'  as description,
	'Boolean' as value_list
from
	codes_view
where
	code_type = 'benefit_type' and
	language_code = 'en-us'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_party_dob_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[benefit_party_dob_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view benefit_party_dob_operand_view as
select
	'getBenefitMaxPartyDOB(' + rtrim(name) + ')' as name,
	'date' as type,
	'Benifit ' + rtrim(name) + ' Max Party DOB' as display,
	'The birthdate of the youngest party on the ' + rtrim(name) + ' Benefit.'  as description,
	'' as value_list
from
	tl_benefit_type
union
select
	'getBenefitMinPartyDOB(' + rtrim(name) + ')' as name,
	'date' as type,
	'Benifit ' + rtrim(name) + ' Min Party DOB' as display,
	'The birthdate of the oldest party on the ' + rtrim(name) + ' Benefit.'  as description,
	'' as value_list
from
	tl_benefit_type

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[case_event_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[case_event_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view case_event_view as
select
	*
from
	aus_event
where
	aus_cmd >= 100 and aus_cmd < 1000

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[codes_view2]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[codes_view2]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE VIEW [dbo].[codes_view2]
AS
SELECT DISTINCT 
                      'en-us' AS language_code, 'ppo_trust_state_' + LOWER(RTRIM(t.company_code)) + '_' + LOWER(RTRIM(pa.country_state_id)) AS code_type, 
                      CAST(p.person_id AS char(30)) AS code_id, p.last_name AS code_value, CAST(c.expiration_date AS char(30)) AS external_code
FROM         dbo.company AS c INNER JOIN
                      dbo.person AS p ON c.person_id = p.person_id INNER JOIN
                      dbo.person_address AS pa ON p.person_id = pa.person_id INNER JOIN
                      dbo.party_relation AS pr ON p.person_id = pr.parent_id INNER JOIN
                      dbo.company AS t ON pr.person_id = t.person_id
WHERE     (p.class_type = 'PPO') AND (c.expiration_date =
                          (SELECT     MIN(dbo.company.expiration_date) AS Expr1
                            FROM          dbo.company INNER JOIN
                                                   dbo.person_address ON dbo.company.person_id = dbo.person_address.person_id
                            WHERE      (dbo.company.company_code = c.company_code) AND (dbo.person_address.country_state_id = pa.country_state_id) AND 
                                                   (dbo.company.expiration_date > CURRENT_TIMESTAMP)))
UNION
SELECT DISTINCT 'en-us' AS language_code, 'trust_state_' + LOWER(RTRIM(c.company_code)) AS code_type, pa.country_state_id AS code_id,
                          (SELECT     state_name
                            FROM          dbo.tl_country_state
                            WHERE      (country_state_id = pa.country_state_id)) AS code_value, '' AS external_code
FROM         dbo.company AS c INNER JOIN
                      dbo.person AS p ON c.person_id = p.person_id INNER JOIN
                      dbo.party_relation AS pr ON p.person_id = pr.person_id INNER JOIN
                      dbo.company AS ppo ON pr.parent_id = ppo.person_id INNER JOIN
                      dbo.person_address AS pa ON ppo.person_id = pa.person_id
WHERE     (p.class_type = 'Trust') AND (ppo.expiration_date > CURRENT_TIMESTAMP)
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'plan_gnum_' + SUBSTRING(ap.g_number, 1, 6) + '_' + SUBSTRING(ap.g_number, 8, 4) + '_' + SUBSTRING(ap.g_number, 
                      13, 4) AS code_type, ap.plan_code_id AS code_id, pc.description AS code_value, pc.line_of_business_code AS external_code
FROM         dbo.association_plan AS ap INNER JOIN
                      dbo.tl_plan_code AS pc ON ap.plan_code_id = pc.plan_code_id
WHERE     (LEN(ap.g_number) >= 16)
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medical_criteria' AS code_type, bodily_system AS code_id, bodily_system AS code_value, '' AS external_code
FROM         dbo.medical_condition_criteria AS medical_condition_criteria_2
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medical_criteria' + '_' + LOWER(bodily_system) AS code_type, condition AS code_id, condition AS code_value, 
                      '' AS external_code
FROM         dbo.medical_condition_criteria AS medical_condition_criteria_3
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medical_criteria' + '_' + LOWER(bodily_system) + '_' + LOWER(condition) AS code_type, criteria AS code_id, 
                      criteria AS code_value, '' AS external_code
FROM         dbo.medical_condition_criteria AS medical_condition_criteria_4
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medical_criteria' + '_' + LOWER(bodily_system) + '_' + LOWER(condition) + '_' + LOWER(criteria) AS code_type, 
                      time_of_criteria AS code_id, time_of_criteria AS code_value, '' AS external_code
FROM         dbo.medical_condition_criteria AS medical_condition_criteria_5
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medical_criteria' + '_' + LOWER(bodily_system) + '_' + LOWER(condition) + '_' + LOWER(criteria) 
                      + '_' + LOWER(time_of_criteria) AS code_type, CAST(points AS char(5)) AS code_id, CAST(points AS char(5)) AS code_value, '' AS external_code
FROM         dbo.medical_condition_criteria AS medical_condition_criteria_6
UNION
SELECT DISTINCT 'en-us' AS language_code, 'medication_condition' AS code_type, condition AS code_id, condition AS code_value, '' AS external_code
FROM         dbo.medication_points
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medication_condition' + '_' + LOWER(condition) AS code_type, drug_name AS code_id, drug_name AS code_value, 
                      '' AS external_code
FROM         dbo.medication_points AS medication_points_1
UNION
SELECT DISTINCT 
                      'en-us' AS language_code, 'medication_condition' + '_' + LOWER(condition) + '_' + LOWER(drug_name) AS code_type, CAST(points AS char(5)) 
                      AS code_id, CAST(points AS char(5)) AS code_value, '' AS external_code
FROM         dbo.medication_points AS medication_points_2

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[company_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view company_view as
select
	person.*,
	company.company_code,
	company.allow_aus_approval_flag,
	company.correspondence_directory,
	company.full_time_employee_count,
	company.percent_eligible_employees,
	company.percent_eligible_dependants,
	company.current_cobra_indicator,
	company.expiration_date
from
	person,
	company
where
	company.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[correspondence_event_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[correspondence_event_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view correspondence_event_view as
select
	*
from
	aus_event
where
	aus_cmd >= 1000 and aus_cmd < 1100

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_benefits_party_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[coverage_benefits_party_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view coverage_benefits_party_view as
select
	bp.benefit_id ,
	bp.policy_coverage_id ,
	bp.height_inches,
	bp.weight_pounds,
	p.*
from
	coverage_benefits_party bp,
	person p
where
	bp.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccount_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[coverage_subaccount_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view coverage_subaccount_view as
select
	coverage_subaccounts.policy_coverage_id,
	tl_subaccount.*,
	coverage_subaccounts.percentage
from
	coverage_subaccounts,
	tl_subaccount
where
	tl_subaccount.subaccount_code = coverage_subaccounts.subaccount_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_address]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_address]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_address as
select distinct
	p.person_id,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as residence_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as business_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as billing_country_name
from
	person p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_case_log]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_case_log]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_case_log as
select
	policy_log_id as case_log_id,
	policy_id as case_id,
	log_text,
	user_id,
	log_date
from
	policy_log

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_codes]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_codes]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_codes as
select
	*
from
	codes_view

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_condition]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_condition]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_condition as
Select
	mc.medical_condition_id As condition_id,
	mc.policy_person_id As applicant_id,
	mc.bodily_system,
	mc.condition,
	mc.criteria,
	mc.time_of_criteria,
	mc.points,
	mc.is_system_generated,
	mc.override
From
	dbo.medical_conditions mc

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_evidence]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_evidence]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_evidence as
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	cast(lab.lab_id_number as int) as evidence_id,
	'LAB' as requirement_type_id,
	lab.last_name,
	lab.first_name,
	lab.ssn,
	lab.birth_date
from
	lab_header lab, requirement_information ev
where
	lab.requirement_information_id = ev.requirement_information_id
union
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	mvr.mvr_header_id as evidence_id,
	'MVR' as requirement_type_id,
	mvr.last_name,
	mvr.first_name,
	mvr.soc_sec_no as ssn,
	mvr.birth_date
from
	mvr_header mvr, requirement_information ev
where
	mvr.requirement_information_id = ev.requirement_information_id
union
select
	ev.requirement_information_id,
	ev.insured_requirement_id,
	ev.create_date,
	ev.match_method,
	mib.mib_header_id as evidence_id,
	'MIB' as requirement_type_id,
	mib.last_name,
	mib.first_name,
	'' as ssn,
	mib.birth_date
from
	mib_header mib, requirement_information ev
where
	mib.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_impairment]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_impairment]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_impairment as
select
	coverage_person_impairment_id as impairment_id,
	coverage_person_id as coverage_id,
	impairment_restriction_code as impairment_code,
	impairment_text
from
	coverage_person_impairment

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_lab_result]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_lab_result]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_lab_result as
select 
	p.policy_number,
	lh.lab_receive_date,
	lh.last_name,
	lh.first_name,
	lh.birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	insured_requirement ir,
	tl_ansi_code ac,
	policy_person pp,
	policy p
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id = ir.requirement_information_id and
	ir.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id
union
select 
	' ' as policy_number,
	lh.lab_receive_date,
	lh.last_name,
	lh.first_name,
	lh.birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	tl_ansi_code ac
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id not in (select requirement_information_id from insured_requirement where requirement_information_id is not null)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_medical_criteria]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_medical_criteria]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_medical_criteria as
Select
   mcc.criteria_id as criteria_id,
   mcc.bodily_system as bodily_system,
   mcc.condition as condition,
   mcc.criteria as criteris,
   mcc.time_of_criteria as time_of_criteria,
   mcc.points as points
From
	dbo.medical_condition_criteria mcc

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_phone]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_phone]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_phone as
select distinct
	p.person_id,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = p.person_id) as home_phone_pin,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = p.person_id) as work_phone_pin,
	(select ph.country_calling_code from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_country_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_suffix,
	(select ph.extension from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_extension,
	(select ph.pin from person_phone ph
	 where ph.phone_type_code = 'FAX'
	 and ph.person_id = p.person_id) as fax_pin
from
	person p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_requirement]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_requirement]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_requirement as
select
	rv.insured_requirement_id as requirement_id,
	rv.requirement_information_id,
	rv.requirement_code,
	rv.added_by,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.added_by
	) as added_by_name,
	rv.added_date,
	rv.closed_by,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.closed_by
	) as closed_by_name,
	rv.closed_date,
	(select
		tc.code_id
	 from
	 	tl_code tc
	 where
		tc.language_code = 'en-us' and
		tc.code_type = 'RequirementStatus' and
		((tc.code_id = rv.closed_disposition) or
		(rv.closed_disposition is null and tc.code_id = 'O'))
	) as closed_disposition,
	(select
		tc.code_value
	 from
	 	tl_code tc
	 where
		tc.language_code = 'en-us' and
		tc.code_type = 'RequirementStatus' and
		((tc.code_id = rv.closed_disposition) or
		(rv.closed_disposition is null and tc.code_id = 'O'))
	) as requirement_status,
	rv.needed_for_approval_flag,
	rv.notify_when_satisfied,
	rv.review_message_id,
	rv.policy_person_id as applicant_id,
	rv.followup_date,
	rv.ordered_by,
	rv.ordered_date,
	rv.can_auto_approve,
	rv.received_id,
	rv.note_id,
	rv.received_by,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rv.received_by
	) as received_by_name,
	rv.received_date,
	rv.create_comment,
	rv.provider,
	rv.evidence_type,
	rv.authorization_required,
	rv.external_requirement_code,
	rv.last_followup_date,
	rv.manual_or_automatic_entry,
	rv.new_business_until_closed,
	rv.provider_order_id,
	rv.schedule_date,
	rv.complete_date,
	rv.alt_create_comment,
	tlr.requirement_name,
	tlr.requirement_category,
	tlr.expiration_days,
	tlr.followup_days,
	tlr.requirement_type_id,
	tlr.notify_when_received,
	tlr.is_active,
	tlr.updated_by,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = tlr.updated_by
	) as updated_by_name,
	tlr.update_date,
	tlr.hippa_auth_required,
	tlr.external_followup_days,
	tlr.hierarchy,
	tlr.alt_lang,
	(select description from tl_language where language_code = tlr.alt_lang
	 union
	 select code_value from tl_code where code_type = 'language' and code_id = tlr.alt_lang) as alt_lang_description,
	tlr.alt_name
from
	requirement_view rv,
	tl_requirement tlr
where
	tlr.requirement_code = rv.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[diary_activity_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[diary_activity_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view diary_activity_proxy_view as
select
	n.author as user_id,
	(select login_id from aus_user where user_id = n.author) as user_login_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.topic,
	p.team_id
from
	policy p,
	policy_person pp,
	person i,
	notes n
where
	n.diary_date is not NULL and
	(n.note_type='Req' or n.note_type='Refer' or n.note_type='Review') and
	p.policy_id = pp.policy_id and
	pp.person_id = i.person_id and
	pp.policy_person_id = n.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[evidence_status_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[evidence_status_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view evidence_status_view as
select
	ri.requirement_information_id,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.added_by,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	es.evidence_status_id,
	es.insured_requirement_id,
	es.status_id,
	es.code_source,
	es.code,
	es.message_text,
	es.status_date,
	'' as last_name,
	'' as middle_name,
	'' as first_name
from
	requirement_information ri,
	evidence_status es
where
	ri.requirement_information_id = es.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_data_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[form_data_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view form_data_proxy_view as
select
	fi.requirement_information_id,
	0 as team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id
union select
	fi.requirement_information_id,
	tu.team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u,
	tr_user_team tu
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id and
	tu.user_id = fi.added_by

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_data_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[form_data_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view form_data_view as
select
	fi.*,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	ri.insured_requirement_id
from
	requirement_information ri,
	form_instance fi
where
	fi.requirement_information_id = ri.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_cmt_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[form_question_cmt_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view form_question_cmt_operand_view as
select
	'getInsured.getFormQuestionComments(Form' + rtrim(form_code) + 'Question' + rtrim(question_label) + ')' as name,
	'str' as type,
	'Form ' + rtrim(form_code) + ' Question ' + rtrim(question_label) + ' (Comments)' as display,
	'Comment for Question ' + rtrim(question_label) + ': ' + rtrim(question_text) as description,
	'' as value_list
from
	form_question

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[form_question_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view form_question_operand_view as
select
	'getInsured.getFormQuestionValue(Form' + rtrim(form_code) + 'Question' + rtrim(question_label) + ')' as name,
	'str' as type,
	'Form ' + rtrim(form_code) + ' Question ' + rtrim(question_label) as display,
	'Question ' + rtrim(question_label) + ': ' + rtrim(question_text) as description,
	'Answer Set ' + rtrim(answer_set_name) as value_list
from
	form_question

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[form_question_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view form_question_proxy_view as
select
	grp.form_question_group_id,
	grp.form_code,
	grp.form_section_id,
	grp.display_sequence,
	grp.group_name,
	q.question_id,
	q.sequence_number,
	q.question_label,
	q.question_text,
	q.question_type,
	q.data_type,
	q.answer_set_name,
	q.min_size,
	q.max_size,
	q.external_question_number,
	q.alt_question_text,
	q.required,
	q.style
from
	form_question_group grp,
	form_question q
where
	grp.form_question_group_id = q.question_group_id and
	grp.form_code = q.form_code and
	grp.form_section_id = q.form_section_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ins_open_post_issue_req_count]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[ins_open_post_issue_req_count]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view ins_open_post_issue_req_count as
select
	ir.policy_person_id,
	count(ir.insured_requirement_id) as open_pi_req
from
	insured_requirement ir,
	tl_requirement t
where
	(ir.closed_disposition is null or ir.closed_disposition in ('O', 'OR', 'H', 'R')) and
	ir.requirement_code = t.requirement_code and
	t.requirement_category = 0
group by
	ir.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[insured]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[insured] as
select
	policy_person.policy_id,
	person.*,
	policy_person_insured.*,
	policy_person.role_id,
	policy_person.relationship_to_insured
from
	person, policy_person, policy_person_insured
where
	policy_person_insured.policy_person_id = policy_person.policy_person_id and
	policy_person.role_id = 'insured' and
	policy_person.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_cov_beneficiary_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[insured_cov_beneficiary_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[insured_cov_beneficiary_view] as
select
	coverage_person.policy_coverage_id,
	coverage_person.role_id,
	coverage_person.relationship_to_insured_code,
	coverage_person_beneficiary.*,
	person.*
from
	coverage_person_beneficiary,
	coverage_person,
	person
where
	(coverage_person.role_id = 'primarybeneficiary' or
	coverage_person.role_id = 'contigbeneficiary') and
	person.person_id = coverage_person.person_id and
	coverage_person_beneficiary.coverage_person_id = coverage_person.coverage_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_coverages_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[insured_coverages_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

/*recompile coverage view so that new added columns can take effect*/
CREATE view insured_coverages_view as
select
	pc.policy_coverage_id,
	pc.policy_id,
	pc.plan_code_id,
	pc.death_benefit_option_code,
	pc.purpose_of_coverage_id,
	pc.coverage_type,
	pc.indicator_code,
	pc.amount,
	pc.premium_mode,
	pc.investment_objective,
	pc.pref_date_of_withdrawl,
	pc.planned_premium,
	pc.initial_planned_premium,
	pc.equivalent_age,
	pc.can_take_final_action_flag,
	pc.dividend_option,
	pc.approved_amount,
	pc.benefit_amount_basis,
	pc.modal_premium_amount,
	cp.person_id,
	cp.role_id,
	cp.relationship_to_insured_code,
	cpi.*
from
	policy_coverage pc,
	coverage_person cp,
	coverage_person_insured cpi
where
	cpi.coverage_person_id = cp.coverage_person_id and
	cp.policy_coverage_id = pc.policy_coverage_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lab_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view lab_proxy_view as
select
	ev.requirement_information_id,
	ev.create_date,
	ev.expiration_date,
	ev.insured_requirement_id,
	lab.lab_id_number,
	lab.lab_type_id,
	lab.drawn_date,
	lab.test_date,
	lab.last_name,
	lab.first_name,
	lab.middle_name,
	lab.ssn,
	lab.birth_date,
	lab.sex,
	lab.lab_receive_date,
	lab.company_code
from
	lab_header lab, requirement_information ev
where
	lab.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lab_result_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view lab_result_operand_view as
select
	'getInsured.getLabResultValueById(' + rtrim(horl_code) + ')' as name,
	'dec' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) as display,
	(rtrim(horl_code) + ' ' + rtrim(description) + ', Male: ' + rtrim(low_male) + ' - ' + rtrim(high_male) + ' ' + rtrim(unit) + ', Female: ' + rtrim(low_female) + ' - ' + rtrim(high_female) + ' ' + rtrim(unit)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is not null
union
select
	'getInsured.getLabResultValueById(' + rtrim(horl_code) + ')' as name,
	'dec' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) as display,
	(rtrim(horl_code) + ' ' + rtrim(description)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result_text_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lab_result_text_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view lab_result_text_operand_view as
select
	'getInsured.getLabResultTextById(' + rtrim(horl_code) + ')' as name,
	'str' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) + ' (Text)' as display,
	(rtrim(horl_code) + ' ' + rtrim(description) + ' (Text), Male: ' + rtrim(low_male) + ' - ' + rtrim(high_male) +
	' ' + rtrim(unit) + ', Female: ' + rtrim(low_female) + ' - ' + rtrim(high_female) + ' ' + rtrim(unit)) as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is not null
union
select
	'getInsured.getLabResultTextById(' + rtrim(horl_code) + ')' as name,
	'str' as type,
	'Lab Result ' + rtrim(horl_code) + ': ' + rtrim(description) + ' (Text)' as display,
	(rtrim(horl_code) + ' ' + rtrim(description)) + '(Text)' as description,
	'' as value_list
from
	tl_ansi_code
where
	low_male is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_specimen_match_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lab_specimen_match_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view lab_specimen_match_view as
select
	lab_specimin_id as lab_specimen_id
from
	tl_lab_specimen
where
	can_match is not null and
	can_match <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lab_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view lab_view as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	lab.*
from
	insured_requirement req, requirement_information ev, lab_header lab
where
	req.requirement_information_id = ev.requirement_information_id and
	ev.requirement_information_id = lab.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[log_event_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[log_event_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view log_event_view as
select
	*
from
	aus_event
where
	aus_cmd >= 20 and aus_cmd < 30

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ls_system_search_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[ls_system_search_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view ls_system_search_view as
select p.policy_number as policy_number,
       per.last_name,
       per.first_name ,
       per.birth_date,
       per.tax_id,
      (select per2.last_name from company c, person per2 where  p.cedent_company_code = c.company_code and c.person_id = per2.person_id) as cedent_company,
         pc.approved_amount as decision_amount,
       cpi.coverage_status as action,
       cpi.perm_table_rating as rating,
      (select 'yes'from coverage_person_insured cpi2 where cpi.policy_person_id = cpi2.policy_person_id and cpi.coverage_person_id = cpi2.coverage_person_id and cpi.is_smoker = -1
       union select 'no'from coverage_person_insured cpi2 where cpi.policy_person_id = cpi2.policy_person_id and cpi.coverage_person_id = cpi2.coverage_person_id and cpi.is_smoker = 0
       )  as smoker,
       cpi.final_action_date as action_date,
       p.updated_date as policy_date,
       p.policy_status
from policy p, policy_person pp, person per, coverage_person_insured cpi, policy_coverage pc, coverage_person cp
where p.policy_id = pp.policy_id
and p.policy_id = pc.policy_id
and pp.role_id = 'insured'
and pp.person_id = per.person_id
and pc.policy_coverage_id = cp.policy_coverage_id
and cpi.coverage_person_id = cp.coverage_person_id
and pp.policy_person_id = cpi.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[mib_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view mib_proxy_view as
select
	mib.*,
	ev.expiration_date,
	ev.create_date,
	ev.person_id,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id
from
	mib_header mib, requirement_information ev
where
	mib.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[mib_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view mib_view as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	mib.*
from
	insured_requirement req, requirement_information ev, mib_header mib
where
	req.insured_requirement_id = ev.insured_requirement_id and
	ev.requirement_information_id = mib.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[mvr_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view mvr_proxy_view as
select
	mvr.*,
	ev.expiration_date,
	ev.create_date,
	ev.insured_requirement_id
from
	mvr_header mvr, requirement_information ev
where
	mvr.requirement_information_id = ev.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[mvr_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view mvr_view as
select distinct
	req.policy_person_id,
	ev.create_date,
	ev.match_method,
	ev.status,
	ev.vendor_id,
	ev.manual_or_electronic_entry,
	ev.expiration_date,
	ev.added_by,
	ev.requirement_type_id,
	ev.requirement_request_id,
	ev.lifespan_days,
	ev.insured_requirement_id,
	mvr.*
from
	insured_requirement req, requirement_information ev, mvr_header mvr
where
	req.requirement_information_id = ev.requirement_information_id and
	ev.requirement_information_id = mvr.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[owner_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[owner_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view owner_view as
select
	policy_person.policy_id,
	policy_person.policy_person_id,
	policy_person.relationship_to_insured,
	policy_person.role_id,
	person.*
from
	person,
	policy_person
where
	policy_person.person_id = person.person_id and
	policy_person.role_id = 'owner'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[paramed_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[paramed_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view paramed_view as
select
	p.*,
	ri.create_date,
	ri.match_method,
	ri.status,
	ri.vendor_id,
	ri.manual_or_electronic_entry,
	ri.expiration_date,
	ri.requirement_type_id,
	ri.requirement_request_id,
	ri.lifespan_days,
	ri.insured_requirement_id
from
	requirement_information ri,
	paramed p
where
	p.requirement_information_id = ri.requirement_information_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_proxy_person_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[party_proxy_person_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view party_proxy_person_view as
select
  '' as case_party_id,
  '' as case_id,
  '' as party_type,
  '' as relation,
  '' as case_group_id,
  person.*
from
  person
where
  (person_type_id is null or person_type_id <> 'Company')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[party_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[party_proxy_view] as
select
  policy_person.policy_person_id as case_party_id,
  policy_person.policy_id as case_id,
  policy_person.role_id as party_type,
  policy_person.relationship_to_insured as relation,
  policy.case_group_id,
  person.*,
  (select primary_insured_flag from policy_person_insured where policy_person_id = policy_person.policy_person_id) as primary_flag
from
  policy,
  policy_person,
  person
where
  policy_person.policy_id = policy.policy_id and
  policy_person.person_id = person.person_id and
  (person_type_id is null or person_type_id <> 'Company')
union
select
  coverage_person.coverage_person_id as case_party_id,
  policy_coverage.policy_id as case_id,
  coverage_person.role_id as party_type,
  coverage_person.relationship_to_insured_code as relation,
  policy.case_group_id,
  person.*,
  0 as primary_flag
from
  policy_coverage,
  coverage_person,
  person,
  policy
where
  person.person_id = coverage_person.person_id and
  coverage_person.policy_coverage_id = policy_coverage.policy_coverage_id and
  policy_coverage.policy_id = policy.policy_id and
  (coverage_person.role_id is null or coverage_person.role_id <> 'insured') and
  (person_type_id is null or person_type_id <> 'Company')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_relation_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[party_relation_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view party_relation_view as
select pr.parent_id ,p.*
from party_relation pr, person p
where pr.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_requirement_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[party_requirement_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view party_requirement_view as
select
	p.party_id,
	ir.policy_person_id,
	ir.insured_requirement_id,
	ir.ordered_date,
	ir.manual_or_automatic_entry,
	ir.requirement_code,
	ir.provider,
	ir.evidence_type,
	ir.provider_order_id,
	'' as closed_date
from
	person p,
	policy_person pp,
	insured_requirement ir
where
	p.person_id = pp.person_id and
	ir.policy_person_id = pp.policy_person_id and
	ir.provider_order_id is null
union
select
	p.party_id,
	ir.policy_person_id,
	ir.insured_requirement_id,
	ir.ordered_date,
	ir.manual_or_automatic_entry,
	ir.requirement_code,
	ir.provider,
	ir.evidence_type,
	ir.provider_order_id,
	po.closed_date
from
	person p,
	policy_person pp,
	insured_requirement ir,
	provider_order po
where
	p.person_id = pp.person_id and
	ir.policy_person_id = pp.policy_person_id and
	po.provider_order_id = ir.provider_order_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[party_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[party_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view party_view as
select * from person where class_type is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[payor_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[payor_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view payor_view as
select
	policy_person.policy_id,
	policy_person.policy_person_id,
	policy_person.relationship_to_insured,
	policy_person.role_id,
	person.*
from
	person,
	policy_person
where
	policy_person.person_id = person.person_id and
	policy_person.role_id = 'payor'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_proxy_slow_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[policy_proxy_slow_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE VIEW [dbo].[policy_proxy_slow_view] as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	p.requested_issue_date,	
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	(select country_state_id from person_address pa where pa.person_id = i.person_id and address_type_code = 'RESIDENCE') as insured_state,
	(select 
	 (case when len(ltrim(rtrim(isnull(pp.area_code, '')))) > 0  then '(' else '' end) + ltrim(rtrim(isnull(pp.area_code, ''))) + (case when len(ltrim(rtrim(isnull(pp.area_code, '')))) > 0  then ') ' else '' end) + 
	 ltrim(rtrim(isnull(pp.prefix, ''))) + (case when len(ltrim(rtrim(isnull(pp.prefix, '')))) > 0 then '-' else '' end) + 
	 ltrim(rtrim(isnull(pp.suffix, ''))) + (case when len(ltrim(rtrim(isnull(pp.extension, '')))) > 0 then ' Ext. ' else '' end) + 
     ltrim(rtrim(isnull(pp.extension, '')))
     from person_phone pp where pp.person_id = i.person_id and phone_type_code = 'HOME') as home_phone,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	p.alternate_case_id,
	p.source_info,
	p.distributor_code,
	(select top 1 a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null) as agent_number,
	(select top 1 a.agency_number from agency a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agency_number is not null) as agency_number,
    -- fields added for new search and display - see policy_proxy_view_slow for insured phone and state fields and agent name fields
    ppi.rerate_status,
	ppi.appeal_status,
    p.issue_date as final_effective_date
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[policy_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE VIEW [dbo].[policy_proxy_view] as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	p.requested_issue_date,	
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	(select country_state_id from person_address pa where pa.person_id = i.person_id and address_type_code = 'RESIDENCE') as insured_state,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	p.alternate_case_id,
	p.source_info,
	p.distributor_code,
	(select top 1 a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null) as agent_number,
	(select top 1 a.agency_number from agency a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agency_number is not null) as agency_number,
    -- fields added for new search and display - see policy_proxy_view_slow for insured phone and state fields and agent name fields
    ppi.rerate_status,
	ppi.appeal_status,
    p.issue_date as final_effective_date
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[portal_policy_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[portal_policy_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE view portal_policy_proxy_view as
select
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	(select top 1 a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null) as agent_number,
	(select top 1 a.agency_number from agency a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agency_number is not null) as agency_number,
	(select top 1 rtrim(b.last_name) from person b, agent c where b.person_id = c.person_id and c.agent_number in (select a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null)) as agent_lastname,
	(select top 1 rtrim(b.first_name) from person b, agent c where b.person_id = c.person_id and c.agent_number in (select a.agent_number from agent a, policy_person pp2 where pp2.policy_id = p.policy_id and pp2.person_id = a.person_id and a.agent_number is not null)) as agent_firstname,
	pp.policy_person_id,
	rtrim(i.last_name) + ', ' + rtrim(i.first_name) as insured_name,
	p.receive_date,
	p.application_number,
	p.underwriter_id,
	(select rtrim (u.last_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_last_name,
	(select rtrim (u.first_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_first_name,
	(select count(*) from insured_requirement ir, tl_requirement  tr
	 where pp.policy_person_id = ir.policy_person_id and (ir.requirement_code = tr.requirement_code and tr.requirement_category = 0))
	 as pi_req,
	(select count(*) from insured_requirement ir, tl_requirement  tr
	 where pp.policy_person_id = ir.policy_person_id and (ir.closed_disposition is null or ir.closed_disposition <> 'S' )
	 and (ir.requirement_code = tr.requirement_code and tr.requirement_category = 0))
	 as open_pi_req
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[product_assoc_gnum_lob_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[product_assoc_gnum_lob_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE view product_assoc_gnum_lob_view as
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type,
	pc.plan_code_id as code_id,
	rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, 1 as active_flag
	from association_plan ap, line_of_business lb, tl_plan_code pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id and
	lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'product_' + rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code as code_type,
	pc.plan_code_id as code_id,
	rtrim( pc.plan_code_id ) + '-' + 'Inactive' + pc.description as code_value, 0 as active_flag
	from association_plan ap, line_of_business lb, tl_plan_code pc
	where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id and
	lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ratable_occupations_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[ratable_occupations_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view ratable_occupations_view as
select
	code_value
from
	codes_view
where
	code_type = 'occupation' and
	external_code is not null and
	external_code <> '0'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[recent_cases_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[recent_cases_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view recent_cases_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	rc.user_id,
	(select login_id from aus_user where user_id = rc.user_id) as user_login_id,
	rc.date_time as access_date_time,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	aus_user_recent_files rc
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	rc.policy_id = p.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[recommended_requirements_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[recommended_requirements_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view recommended_requirements_view as
select
	te_rulebook.rulebook_id,
	tr_plan_code_rulebook.plan_code_id,
	ta_face_amount_band.face_amount_from,
	ta_face_amount_band.face_amount_to,
	ta_age_band.age_from,
	ta_age_band.age_to,
	tl_requirement.*
from
	te_rulebook,
	tr_plan_code_rulebook,
	ta_face_amount_band,
	ta_age_band,
	tr_age_face_amount_requirement,
	tr_group_requirements,
	tl_requirement,
	tl_requirement_group
where
	tr_plan_code_rulebook.rulebook_id = te_rulebook.rulebook_id and
	ta_face_amount_band.rulebook_id = te_rulebook.rulebook_id and
	ta_age_band.rulebook_id = te_rulebook.rulebook_id and
	tr_age_face_amount_requirement.rulebook_id = te_rulebook.rulebook_id and
	tr_age_face_amount_requirement.age_band_seq_no = ta_age_band.age_band_seq_no and
	tr_age_face_amount_requirement.face_amount_seq_no = ta_face_amount_band.face_amount_seq_no and
	tr_group_requirements.requirement_group_id = tr_age_face_amount_requirement.requirement_group_id and
	tl_requirement.requirement_code = tr_group_requirements.requirement_code and
	tl_requirement_group.requirement_group_id = tr_group_requirements.requirement_group_id and
	tl_requirement_group.is_active is not null and
	tl_requirement_group.is_active <> 0 and
	tl_requirement.is_active is not null and
	tl_requirement.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[referral_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[referral_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view referral_proxy_view as
select
	n.note_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.author as author_id,
	(select login_id from aus_user where user_id = n.author) as author_login_id,
	n.refer_to_user_id as referred_to_id,
	(select login_id from aus_user where user_id = n.refer_to_user_id) as referred_to_login_id,
	n.topic,
	p.team_id
from
	notes n,
	policy_person pp,
	policy p,
	person i
where
	n.refer_to_user_id > 0 and
	n.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id and
	pp.person_id = i.person_id and
	n.diary_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[req_exists_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[req_exists_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view req_exists_operand_view as
select
	'getInsured.requirementExists(' + rtrim(requirement_code) + ')' as name,
	'bool' as type,
	'Requirement ' + rtrim(requirement_code) + ' Exists' as display,
	'Determines if ' + rtrim(requirement_name) + ' Requirement exists on the Applicant.'  as description,
	'Boolean' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[req_status_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[req_status_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view req_status_operand_view as
select
	'getInsured.requirementStatus(' + rtrim(requirement_code) + ')' as name,
	'string' as type,
	'Requirement ' + rtrim(requirement_code) + ' Status' as display,
	'Status of ' + rtrim(requirement_name) + ' Requirement on the Applicant.'  as description,
	'RequirementStatus' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_group_requirements]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[requirement_group_requirements]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view requirement_group_requirements as
select
	tl_requirement_group.requirement_group_id,
	tl_requirement_group.name as requirement_group_name,
	tl_requirement.*
from
	tl_requirement,
	tr_group_requirements,
	tl_requirement_group
where
	tr_group_requirements.requirement_code = tl_requirement.requirement_code and
	tl_requirement_group.requirement_group_id = tr_group_requirements.requirement_group_id and
	tl_requirement.is_active is not null and tl_requirement.is_active <> 0 and
	tl_requirement_group.is_active is not null and tl_requirement_group.is_active <> 0

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_open_operand_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[requirement_open_operand_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view requirement_open_operand_view as
select
	'getInsured.requirementIsOpen(' + rtrim(requirement_code) + ')' as name,
	'bool' as type,
	'Requirement ' + rtrim(requirement_code) + ' Is Open' as display,
	'Determines if ' + rtrim(requirement_name) + ' Requirement is open on the Applicant.'  as description,
	'Boolean' as value_list
from
	tl_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[requirement_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view [dbo].[requirement_proxy_view] as
select
	t.requirement_name,
	t.alt_lang,
	t.alt_name,
	t.default_ordered_by,
	ir.requirement_code,
	t.requirement_type_id,
	t.requirement_category,
	ir.followup_date,
	ir.closed_date,
	ir.received_date,
	ir.ordered_date,
	ir.ordered_by,
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.underwriter_id,
	p.service_associate_id,
	ir.insured_requirement_id,
	ir.closed_disposition,
	ir.requirement_information_id,
	ir.last_followup_date,
	ir.provider,
	ir.evidence_type,
	pp.policy_person_id,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.birth_date,
	i.tax_id,
	p.team_id,
	ir.manual_or_automatic_entry,
	ir.new_business_until_closed,
	ir.provider_order_id,
	ir.create_comment
from
	policy p,
	policy_person pp,
	person i,
	insured_requirement ir,
	tl_requirement t
where
	p.policy_id = pp.policy_id AND
	pp.person_id = i.person_id AND
	pp.policy_person_id = ir.policy_person_id AND
	ir.requirement_code = t.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[requirement_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

CREATE VIEW [dbo].[requirement_view]
AS
SELECT     insured_requirement_id, requirement_information_id, requirement_code, added_by, added_date, closed_date, closed_by, closed_disposition, 
                      needed_for_approval_flag, notify_when_satisfied, review_message_id, policy_person_id, followup_date, ordered_by, can_auto_approve, 
                      notify_when_received, received_id, note_id, received_date, received_by, create_comment, ordered_date, provider, evidence_type, 
                      authorization_required, external_requirement_code, last_followup_date, manual_or_automatic_entry, new_business_until_closed, provider_order_id, 
                      schedule_date, complete_date, alt_create_comment, status_mode
FROM         dbo.insured_requirement

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[review_message_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view review_message_proxy_view as
select
	p.policy_id,
	p.policy_number,
	rtrim(per.last_name) as applicant_last_name,
	rtrim(per.first_name) as applicant_first_name,
	rm.message_type,
	rm.origin_code,
	SUBSTRING(rm.message, 1, 50) as review_message_text,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	rm.user_role_type
from
	review_message rm,
	policy p,
	policy_person pp,
	person per
where
	p.policy_id = rm.policy_id and
	pp.policy_person_id = rm.policy_person_id and
	pp.person_id = per.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[reviewer_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[reviewer_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view reviewer_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = ppi.policy_person_id) as final_disposition_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	team t
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null and
	ppi.policy_person_id in (select policy_person_id from insured_requirement where policy_person_id = ppi.policy_person_id and requirement_code = 'TBRVWD' and (closed_disposition is null or closed_disposition in ('O', 'OR', 'H')))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[role_privilege_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[role_privilege_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view role_privilege_view as
select
	arp.role_id,
	arp.restriction_level,
	asp.privilege_id,
	asp.name,
	asp.description,
	asp.is_active,
	asp.subsystem_name
from
	aus_role_privilege arp,
	aus_security_privilege asp
where
	arp.privilege_id = asp.privilege_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[role_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[role_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view role_view as
select
	aus_security_roles.*
from
	aus_security_roles
where
	role_id > -1 and
	(deleted is null or deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_age_amount_matrix]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_age_amount_matrix]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_age_amount_matrix as
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.receive_date,
	p.distributor_code,
	p.source_info,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 100000 and i.underwriting_amount < 151000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_a,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 151000 and i.underwriting_amount < 251000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_b,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 251000 and i.underwriting_amount < 501000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_c,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 501000 and i.underwriting_amount < 1001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_d,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 1001000 and i.underwriting_amount < 2001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_e,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 2001000 and i.underwriting_amount < 3001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_f,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 3001000 and i.underwriting_amount < 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_g,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 18 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 41 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_a_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 41 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 51 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_b_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 51 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 56 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_c_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 56 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 61 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_d_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 61 and (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) < 66 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_e_amount_h,
	(select count(*) from insured i, (select * from tl_code where code_type = 'applicant_status') st where (cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) >= 66 and i.underwriting_amount >= 5001000 and i.policy_id = p.policy_id and i.applicant_status = st.code_id and st.external_code <> 'CN') as age_f_amount_h,
	p.team_id
from
	policy p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_applicants_by_underwriter]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_applicants_by_underwriter]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_applicants_by_underwriter as
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	i.applicant_status_date,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	i.applicant_status,
	p.team_id
from
	policy p,
	insured i
where
	i.policy_id = p.policy_id and
	p.underwriter_id is not null and
	i.applicant_status not in (select code_id from tl_code where code_type = 'applicant_status' and external_code = 'CN')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_final_action_status]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_final_action_status]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_final_action_status as
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_date,
	p.team_id
from
	policy p,
	insured i
where
	i.policy_id = p.policy_id and
	i.applicant_status in (select code_id from tl_code where code_type = 'applicant_status' and external_code in ('AP', 'DE', 'RC', 'WI'))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_final_disposition]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_final_disposition]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_final_disposition as
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	i.applicant_status_date,
	p.distributor_code,
	p.source_info,
	(select external_code from tl_code where code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
	i.underwriting_amount,
	cast(i.applicant_status_date - p.receive_date as int) as days_open,
	p.team_id
from
	policy p,
	insured i
where
	i.policy_id = p.policy_id and
	i.applicant_status in (select code_id from tl_code where code_type = 'applicant_status' and external_code in ('AP', 'DE', 'RC', 'WI'))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_policy_requirements]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_policy_requirements]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_policy_requirements as
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	tlr.requirement_name,
	tc.code_value as requirement_status,
	rv.ordered_date as ordered_open_date,
	rv.schedule_date,
	rv.complete_date,
	rv.closed_date as final_status_date,
	p.team_id
from
	policy p,
	policy_person pp,
	requirement_view rv,
	tl_requirement tlr,
	tl_code tc
where
	pp.policy_id = p.policy_id and
	rv.policy_person_id = pp.policy_person_id and
	tlr.requirement_code = rv.requirement_code and
	(rv.closed_disposition is null or
	 rv.closed_disposition<> 'D') and
	rv.ordered_date is not null and
	tc.language_code = 'en-us' and
	tc.code_type = 'RequirementStatus' and
	((rv.closed_disposition is null and tc.code_id = 'O') or
	 tc.code_id = rv.closed_disposition)
union
select
	p.company_code,
	p.underwriter_id,
	p.service_associate_id,
	p.distributor_code,
	p.source_info,
	p.policy_number as case_number,
	tlr.requirement_name,
	tc.code_value as requirement_status,
	rv.added_date as ordered_open_date,
	rv.schedule_date,
	rv.complete_date,
	rv.closed_date as final_status_date,
	p.team_id
from
	policy p,
	policy_person pp,
	requirement_view rv,
	tl_requirement tlr,
	tl_code tc
where
	pp.policy_id = p.policy_id and
	rv.policy_person_id = pp.policy_person_id and
	tlr.requirement_code = rv.requirement_code and
	(rv.closed_disposition is null or
	 rv.closed_disposition<> 'D') and
	rv.ordered_date is null and
	tc.language_code = 'en-us' and
	tc.code_type = 'RequirementStatus' and
	((rv.closed_disposition is null and tc.code_id = 'O') or
	 tc.code_id = rv.closed_disposition)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_requirement_aging]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_requirement_aging]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_requirement_aging as
select
	p.underwriter_id,
	p.service_associate_id,
	p.team_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as case_manager_name,
	(select team_name from team where team_id = p.team_id) as team_name,
	p.policy_number,
	ir.requirement_code,
	(select requirement_name from tl_requirement where requirement_code = ir.requirement_code) as requirement_name,
	ir.added_date,
	(select
		tc.code_value
	 from
	 	tl_code tc
	 where
		tc.code_type = 'RequirementStatus' and
		tc.code_id = ir.closed_disposition or
		(ir.closed_disposition is null and tc.code_id = 'O')
	) as requirement_status,
	(cast(CURRENT_TIMESTAMP - ir.added_date as int)) as days_aging
from
	policy p,
	insured i,
	insured_requirement ir
where
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	(ir.closed_disposition is null or ir.closed_disposition not in ('S', 'C', 'W'))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_unmatched_labs]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_unmatched_labs]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_unmatched_labs as
select
	first_name,
	last_name,
	birth_date,
	referrence_number,
	ticket_number,
	drawn_date,
	lab_receive_date,
	-1 as team_id,
	-1 as underwriter_id,
	-1 as service_associate_id
from
	lab_header
where
	requirement_information_id not in (
		select
			requirement_information_id
		from
			insured_requirement
		where
			requirement_information_id is not null)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_uw_case_productivity]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_uw_case_productivity]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_uw_case_productivity as
select
	p.underwriter_id as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	p.receive_date,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = underwriter_id
	) as user_name,
	p.policy_number,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'NB') as new_business_date,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'FA') as final_action_date,
	(select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'CLOSED' and log_date >= (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'FA')) as closed_date,
	cast((select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'FA') - (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'NB') as int) as days_nb_to_fa,
	cast((select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'CLOSED' and log_date >= (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'FA')) - (select max(log_date) from policy_log where policy_id = p.policy_id and log_reason_type = 3 and log_reason_code = 'FA') as int) as days_fa_to_closed
from
	policy p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_uw_referal_rvw_productivity]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_uw_referal_rvw_productivity]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_uw_referal_rvw_productivity as
select
	ir.closed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ir.closed_by
	) as user_name,
	p.policy_number,
	(select requirement_name from tl_requirement where requirement_code = ir.requirement_code) as work_type,
	(select
		tc.code_value
	 from
	 	tl_code tc
	 where
		tc.code_type = 'RequirementStatus' and
		tc.code_id = ir.closed_disposition or
		(ir.closed_disposition is null and tc.code_id = 'O')
	) as status,
	ir.added_date,
	ir.closed_date
from
	policy p,
	insured i,
	insured_requirement ir
where
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.requirement_code = 'UWINITRVW' and
	ir.closed_disposition = 'S'
union
select
	n.author as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = n.author
	) as user_name,
	p.policy_number,
	'Referral' as work_type,
	'Added' as status,
	n.added_date,
	n.reviewed_date as closed_date
from
	policy p,
	insured i,
	notes n
where
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = 'Refer' and
	n.reviewed_by is null
union
select
	n.reviewed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = n.reviewed_by
	) as user_name,
	p.policy_number,
	'Referral' as work_type,
	'Checked-off' as status,
	n.added_date,
	n.reviewed_date as closed_date
from
	policy p,
	insured i,
	notes n
where
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = 'Refer' and
	n.reviewed_by is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_uw_review_msg_productivity]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_uw_review_msg_productivity]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_uw_review_msg_productivity as
select
	rm.checked_off_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rm.checked_off_by
	) as user_name,
	p.policy_number,
	'Checkable Review Message' as work_type,
	rm.message,
	'Closed' as status,
	rm.check_off_date
from
	policy p,
	review_message rm
where
	rm.policy_id = p.policy_id and
	rm.checkoff_flag is not null and
	rm.checkoff_flag <> 0 and
	rm.checked_off_by is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rulebook_item_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rulebook_item_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rulebook_item_view as
	select
		'' as plan_code_id,
		rb.*
	from
		te_rulebook rb

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rulebook_plan_agnostic_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rulebook_plan_agnostic_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rulebook_plan_agnostic_view as
select
	NULL as plan_code_id,
	rb.*
from
	te_rulebook rb;

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rulebook_proxy_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rulebook_proxy_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rulebook_proxy_view as
	select
		rb.association_code,
		rb.effective_date,
		rb.rulebook_id,
		rb.rulebook_name,
		rb.description,
		rb.is_active,
		rb.added_date,
		rb.added_by,
		rb.update_date,
		rb.updated_by,
		rb.type
	from
		te_rulebook rb

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rulebook_rate_class]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rulebook_rate_class]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rulebook_rate_class as
select distinct
	'smok_rate_class_' + rb.rulebook_name as code_type,
	cast(rc.sequence_no as char(30)) as code_id,
	rc.description as code_value,
	'' as external_code
from
	te_rulebook rb,
	ta_rate_table_class rc
where
	rb.rulebook_id = rc.rulebook_id and
	rc.smoking_class is not null and rc.smoking_class <> '0'
union
select distinct
	'rate_class_' + rb.rulebook_name as code_type,
	cast(rc.sequence_no as char(30)) as code_id,
	rc.description as code_value,
	'' as external_code
from
	te_rulebook rb,
	ta_rate_table_class rc
where
	rb.rulebook_id = rc.rulebook_id and
	(rc.smoking_class is null or rc.smoking_class = '0')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rulebook_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rulebook_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rulebook_view as
	select
		pc.plan_code_id,
		rb.*
	from
		te_rulebook rb,
		tr_plan_code_rulebook pc
	where
		rb.rulebook_id = pc.rulebook_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[service_associate_alpha_range]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[service_associate_alpha_range]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view service_associate_alpha_range as
select
  from_string,
  to_string as up_to_string,
  service_associate_login_id as item_id
from
  service_associate_range

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[team_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[team_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view team_view as
select
	team.*
from
	team
where
	(deleted is null or deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[teams_users_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[teams_users_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view teams_users_view as
select
	tr_user_team.team_id,
	tr_user_team.auto_assign,
	aus_user.*
from
	tr_user_team,
	aus_user
where
	tr_user_team.user_id = aus_user.user_id and
	(aus_user.deleted is null or aus_user.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[tpa_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view tpa_view as
select
	t.tpa_code,
	t.tpa_short_name,
	t.contact_last_name,
	t.contact_first_name,
	t.auto_closure_days,
	t.expiration_date,
	p.*
from
	tpa t,
	person p
where
	t.person_id = p.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[unchecked_rvw_msg_count]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[unchecked_rvw_msg_count]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view unchecked_rvw_msg_count as
select
 rm.policy_person_id,
 count(rm.review_message_id) as unchk_rvw_count
from
 review_message rm
where
 rm.message_type = '0' and
 (rm.user_role_type is null or rm.user_role_type != 'CM')
group by
 rm.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[user_teams_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[user_teams_view]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view user_teams_view as
select
	tr_user_team.user_id,
	tr_user_team.auto_assign,
	team.*
from
	tr_user_team,
	team
where
	tr_user_team.team_id = team.team_id and
	(team.deleted is null or team.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_association_plan]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_association_plan]
END
GO

if ( OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_association_plan as
select
	a.name as association_name,
	ap.association_code,
	ap.plan_code_id,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = ap.tpa_code
	) as tpa_code,
	ap.g_number,
	ap.mortality_max,
	ap.auto_approve_requires_member,
	ap.underwrite_child,
	ap.spouse_can_exceed_member,
	ap.allow_jet_issue,
	ap.billing_code,
	ap.expiration_date
from
	association_plan ap,
	association a
where
	a.association_code = ap.association_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_coverage]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_coverage]
END
GO

if ( OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_coverage as
select
	icv.policy_coverage_id,
	icv.policy_id as case_id,
	icv.plan_code_id,
	plc.description as plan_code_name,
	plc.line_of_business_code,
	(select
		lob.name
	 from
	 	line_of_business lob
	 where
		lob.line_of_business_code = plc.line_of_business_code
	) as line_of_business_name,
	icv.death_benefit_option_code,
	icv.purpose_of_coverage_id,
	(select
		poc.code_value
	 from
	 	tl_code poc
	 where
		poc.code_type = 'purpose_of_coverage' and
		poc.code_id = icv.purpose_of_coverage_id and
		poc.language_code = 'en-us'
	 union
	 select
		poc.description
	 from
	 	tl_purpose_of_coverage_desc poc
	 where
		poc.purpose_of_coverage_id = icv.purpose_of_coverage_id
	) as purpose_of_coverage,
	icv.coverage_type,
	icv.amount,
	icv.premium_mode,
	icv.investment_objective,
	icv.pref_date_of_withdrawl,
	icv.planned_premium,
	icv.initial_planned_premium,
	icv.equivalent_age,
	icv.can_take_final_action_flag,
	icv.dividend_option,
	(select
		div.code_value
	 from
	 	tl_code div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option and
		div.language_code = 'en-us'
	 union
	 select
		div.code_value
	 from
	 	tl_acord_codes div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option
	) as dividend_option_name,
	icv.approved_amount,
	icv.policy_person_id as applicant_id,
	icv.coverage_person_id as coverage_id,
	icv.perm_flat_extra_amount,
	icv.temp_flat_extra_amount,
	icv.temp_flat_extra_period,
	icv.flat_extra_reason,
	icv.temp_table_rating,
	icv.temp_table_rating_reason,
	icv.rate_class_quoted,
	icv.rate_class_approved,
	icv.rate_class_issued,
	icv.aviation_exclusion,
	icv.perm_table_rating,
	icv.perm_table_rating_reason,
	icv.coverage_status,
	icv.reason_text,
	icv.is_smoker,
	icv.business_ownership_percent,
	icv.final_action_by_id,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
	) as final_action_by_name,
	icv.final_action_date,
	icv.final_action_note,
	icv.elimination_days,
	icv.payout_frequency,
	icv.waiting_period,
	icv.g_number,
	icv.person_id,
	icv.relationship_to_insured_code,
	icv.web_quoted_class,
	icv.modal_premium_amount,
	icv.issued_times_standard,
	icv.jls_flag,
	icv.split_flag,
	icv.reinsurance_amount,
	icv.rated_up_age,
	icv.reinsurance_company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = icv.reinsurance_company_code) as reinsurance_company_name
from
	insured_coverages_view icv,
	tl_plan_code plc
where
	plc.plan_code_id = icv.plan_code_id and
	icv.coverage_status is not null
union
select
	icv.policy_coverage_id,
	icv.policy_id as case_id,
	icv.plan_code_id,
	plc.description as plan_code_name,
	plc.line_of_business_code,
	(select
		lob.name
	 from
	 	line_of_business lob
	 where
		lob.line_of_business_code = plc.line_of_business_code
	) as line_of_business_name,
	icv.death_benefit_option_code,
	icv.purpose_of_coverage_id,
	(select
		poc.code_value
	 from
	 	tl_code poc
	 where
		poc.code_type = 'purpose_of_coverage' and
		poc.code_id = icv.purpose_of_coverage_id and
		poc.language_code = 'en-us'
	 union
	 select
		poc.description
	 from
	 	tl_purpose_of_coverage_desc poc
	 where
		poc.purpose_of_coverage_id = icv.purpose_of_coverage_id
	) as purpose_of_coverage,
	icv.coverage_type,
	icv.amount,
	icv.premium_mode,
	icv.investment_objective,
	icv.pref_date_of_withdrawl,
	icv.planned_premium,
	icv.initial_planned_premium,
	icv.equivalent_age,
	icv.can_take_final_action_flag,
	icv.dividend_option,
	(select
		div.code_value
	 from
	 	tl_code div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option and
		div.language_code = 'en-us'
	 union
	 select
		div.code_value
	 from
	 	tl_acord_codes div
	 where
		div.code_type = 'Dividend Type' and
		div.code_id = icv.dividend_option
	) as dividend_option_name,
	icv.approved_amount,
	icv.policy_person_id as applicant_id,
	icv.coverage_person_id as coverage_id,
	icv.perm_flat_extra_amount,
	icv.temp_flat_extra_amount,
	icv.temp_flat_extra_period,
	icv.flat_extra_reason,
	icv.temp_table_rating,
	icv.temp_table_rating_reason,
	icv.rate_class_quoted,
	icv.rate_class_approved,
	icv.rate_class_issued,
	icv.aviation_exclusion,
	icv.perm_table_rating,
	icv.perm_table_rating_reason,
	'Pending' as coverage_status,
	icv.reason_text,
	icv.is_smoker,
	icv.business_ownership_percent,
	icv.final_action_by_id,
	(select
		ltrim(rtrim(ps.first_name) + ' ' + rtrim(ps.last_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
	) as final_action_by_name,
	icv.final_action_date,
	icv.final_action_note,
	icv.elimination_days,
	icv.payout_frequency,
	icv.waiting_period,
	icv.g_number,
	icv.person_id,
	icv.relationship_to_insured_code,
	icv.web_quoted_class,
	icv.modal_premium_amount,
	icv.issued_times_standard,
	icv.jls_flag,
	icv.split_flag,
	icv.reinsurance_amount,
	icv.rated_up_age,
	icv.reinsurance_company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = icv.reinsurance_company_code) as reinsurance_company_name
from
	insured_coverages_view icv,
	tl_plan_code plc
where
	plc.plan_code_id = icv.plan_code_id and
	icv.coverage_status is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_proxy_view_uw_rm_count]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[policy_proxy_view_uw_rm_count]
END
GO

if ( OBJECT_ID(N'unchecked_rvw_msg_count') IS NULL OR OBJECT_ID(N'unchecked_rvw_msg_count') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view policy_proxy_view_uw_rm_count as
select
	pp.*,
	rvw.unchk_rvw_count as uw_rm_count
from
	policy_proxy_view pp LEFT OUTER JOIN
	unchecked_rvw_msg_count rvw ON pp.policy_person_id = rvw.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[cases_to_issue_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[cases_to_issue_view]
END
GO

if ( OBJECT_ID(N'ins_open_post_issue_req_count') IS NULL OR OBJECT_ID(N'ins_open_post_issue_req_count') IS NULL OR OBJECT_ID(N'unchecked_rvw_msg_count') IS NULL OR OBJECT_ID(N'unchecked_rvw_msg_count') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view cases_to_issue_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	ir.open_pi_req,
	rvw.unchk_rvw_count as uw_rm_count
from
	ins_open_post_issue_req_count ir INNER JOIN
	policy_person pp ON ir.policy_person_id = pp.policy_person_id INNER JOIN
	policy p ON pp.policy_id = p.policy_id INNER JOIN
	policy_person_insured ppi ON pp.policy_person_id = ppi.policy_person_id INNER JOIN
	person i ON pp.person_id = i.person_id LEFT OUTER JOIN
	unchecked_rvw_msg_count rvw ON pp.policy_person_id = rvw.policy_person_id
where
	p.policy_status_code = 'Closed' and 
	ppi.applicant_status = 'AP'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_all_applicants]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_all_applicants]
END
GO

if ( OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_all_applicants as
select
	p.company_code,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	p.receive_date,
	p.service_associate_id,
	i.sex as gender,
	ppi.applicant_status as applicant_status_code,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = ppi.applicant_status) as applicant_status,
	ppi.applicant_status_date,
	pc.amount as amount_applied_for,
	i.birth_date,
	pa.country_state_id as residence_state_id,
	(select rtrim(cs.state_name) + ' (' + rtrim(cs.state_code) + ')' from tl_country_state cs
	 where cs.country_state_id = pa.country_state_id) as residence_state,
	cpi.final_action_date,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = cpi.final_action_by_id
	) as final_action_by,
	cpi.reason_text as final_action_reason,
	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = cpi.coverage_status) and reason_text = cpi.reason_text) as reason_code,
	assoc.association_name,
	pc.plan_code_id,
	(select description from tl_plan_code where plan_code_id = pc.plan_code_id) as plan_code_description,
	cpi.g_number,
	pc.planned_premium,
	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
	cpi.web_quoted_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_quoted) as applied_for_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_approved) as system_recommended_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_issued) as rate_class_approved,
	pc.approved_amount as issued_amount,
	pc.perm_table_rating as table_rating,
	pc.perm_flat_extra_amount as flat_extra_amount,
	p.cwa_amount,
	ap.income,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.occupation,
	p.lead_number_id as aggregator_lead_number,
	p.source_info,
	(select partner_id from tl_source_info where source_info = p.source_info) as partner_id,
	p.distributor_code,
	p.underwriter_id,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as service_associate_name,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
	p.team_id
from
	insured_application_info ap INNER JOIN
	policy_person_insured ppi INNER JOIN
	policy p INNER JOIN
	coverage_person cp INNER JOIN
	coverage_person_insured cpi ON cp.coverage_person_id = cpi.coverage_person_id INNER JOIN
	policy_coverage pc ON cp.policy_coverage_id = pc.policy_coverage_id INNER JOIN
	person i ON cp.person_id = i.person_id ON p.policy_id = pc.policy_id ON ppi.policy_person_id = cpi.policy_person_id ON 
	ap.policy_person_id = ppi.policy_person_id LEFT OUTER JOIN
	person_address pa ON i.person_id = pa.person_id LEFT OUTER JOIN
	team t ON p.team_id = t.team_id LEFT OUTER JOIN
		(select association_code, name as association_name from association
		 union
		 select c.company_code as association_code, per.last_name as association_name from company c, person per where c.person_id = per.person_id and (per.class_type = 'ASSN' or per.class_type = 'GRP')) assoc ON p.association_code = assoc.association_code
where
	pa.address_type_code = 'RESIDENCE'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_nb_requirement_productivity]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_nb_requirement_productivity]
END
GO

if ( OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_nb_requirement_productivity as
select
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	ir.requirement_code,
	(select tlr.requirement_name from tl_requirement tlr where tlr.requirement_code = ir.requirement_code) as requirement_name,
	es.code as status,
	es.status_date
from
	policy p,
	policy_person pp,
	insured_requirement ir,
	evidence_status_view es
where
	pp.policy_id = p.policy_id and
	pp.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_nb_work_type_productivity]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_nb_work_type_productivity]
END
GO

if ( OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL OR OBJECT_ID(N'evidence_status_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_nb_work_type_productivity as
select
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	'Requirement' as work_type,
	tlr.requirement_name as work_type_name,
	'Satisfied' as status,
	es.status_date
from
	policy p,
	insured i,
	insured_requirement ir,
	tl_requirement tlr,
	evidence_status_view es
where
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id and
	ir.requirement_code = tlr.requirement_code and
	es.code = 'Satisfied'
union
select
	es.added_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = es.added_by
	) as user_name,
	p.policy_number,
	'Requirement' as work_type,
	tlr.requirement_name as work_type_name,
	'Added' as status,
	es.status_date
from
	policy p,
	insured i,
	insured_requirement ir,
	tl_requirement tlr,
	evidence_status_view es
where
	i.policy_id = p.policy_id and
	i.policy_person_id = ir.policy_person_id and
	ir.insured_requirement_id = es.insured_requirement_id and
	ir.requirement_code = tlr.requirement_code and
	es.code = 'Open'
union
select
	n.author as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = n.author
	) as user_name,
	p.policy_number,
	'Referral' as work_type,
	'Referral' as work_type_name,
	'Added' as status,
	n.added_date as status_date
from
	policy p,
	insured i,
	notes n
where
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = 'Refer' and
	n.reviewed_by is null
union
select
	n.reviewed_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = n.reviewed_by
	) as user_name,
	p.policy_number,
	'Referral' as work_type,
	'Referral' as work_type_name,
	'Closed' as status,
	n.reviewed_date as status_date
from
	policy p,
	insured i,
	notes n
where
	i.policy_id = p.policy_id and
	i.policy_person_id = n.policy_person_id and
	n.note_type = 'Refer' and
	n.reviewed_by is not null
union
select
	rm.checked_off_by as user_id,
	p.team_id,
	p.underwriter_id,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = rm.checked_off_by
	) as user_name,
	p.policy_number,
	'Review Message' as work_type,
	'Review Message' as work_type_name,
	'Satisfied' as status,
	rm.check_off_date as status_date
from
	policy p,
	review_message rm
where
	rm.policy_id = p.policy_id and
	rm.checkoff_flag is not null and
	rm.checkoff_flag <> 0 and
	rm.checked_off_by is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa_codes_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[tpa_codes_view]
END
GO

if ( OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view tpa_codes_view as
select 'tpa' as code_type, tpa_code as code_id, last_name as code_value, cast(person_id as char(30)) as external_code, 1 as active_flag from tpa_view
	where expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL
union
select 'tpa' as code_type, tpa_code as code_id, rtrim(last_name) + ' (Inactive)' as code_value, cast(person_id as char(30)) as external_code, 0 as active_flag from tpa_view
	where expiration_date <= CURRENT_TIMESTAMP and expiration_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_team]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_team]
END
GO

if ( OBJECT_ID(N'user_teams_view') IS NULL OR OBJECT_ID(N'user_teams_view') IS NULL OR OBJECT_ID(N'user_teams_view') IS NULL OR OBJECT_ID(N'user_teams_view') IS NULL OR OBJECT_ID(N'user_teams_view') IS NULL OR OBJECT_ID(N'user_teams_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_team as
select
	utv.user_id,
	(select
		ltrim(rtrim(p.first_name) + ' ' + rtrim(p.last_name))
	 from
	 	aus_user u, person p
	 where
	 	u.user_id = utv.user_id and
	 	p.person_id = u.person_id
	) as user_name,
	utv.auto_assign,
	utv.team_id,
	utv.team_name,
	utv.description,
	utv.is_active
from
	user_teams_view utv

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_privilege]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_privilege]
END
GO

if ( OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL OR OBJECT_ID(N'role_privilege_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_privilege as
select
	role_id,
	restriction_level,
	privilege_id,
	name,
	description,
	is_active,
	subsystem_name
from
	role_privilege_view

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_admin_all_applicants]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_admin_all_applicants]
END
GO

if ( OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL OR OBJECT_ID(N'rulebook_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_admin_all_applicants as
select
	p.company_code,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	p.receive_date,
	p.service_associate_id,
	i.last_name as applicant_last_name,
	i.first_name as applicant_first_name,
	i.sex as gender,
	ppi.applicant_status as applicant_status_code,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = ppi.applicant_status) as applicant_status,
	ppi.applicant_status_date,
	pc.amount as amount_applied_for,
	i.birth_date,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line3,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_city,
	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_postal_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_suffix,
	i.email_address,
	cpi.final_action_date,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = cpi.final_action_by_id
	) as final_action_by,
	cpi.reason_text as final_action_reason,
	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = cpi.coverage_status) and reason_text = cpi.reason_text) as reason_code,
	assoc.association_name,
	pc.plan_code_id,
	(select description from tl_plan_code where plan_code_id = pc.plan_code_id) as plan_code_description,
	cpi.g_number,
	pc.planned_premium,
	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
	cpi.web_quoted_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_quoted) as applied_for_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_approved) as system_recommended_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_issued) as rate_class_approved,
	pc.approved_amount as issued_amount,
	pc.perm_table_rating as table_rating,
	pc.perm_flat_extra_amount as flat_extra_amount,
	p.cwa_amount,
	ap.income,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.occupation,
	p.lead_number_id as aggregator_lead_number,
	p.source_info,
	(select partner_id from tl_source_info where source_info = p.source_info) as partner_id,
	p.distributor_code,
	p.underwriter_id,
	(select
		rtrim(uw.last_name) + ', ' + rtrim(uw.first_name)
	 from
	 	aus_user_view uw
	 where
		uw.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		rtrim(sa.last_name) + ', ' + rtrim(sa.first_name)
	 from
	 	aus_user_view sa
	 where
		sa.user_id = p.service_associate_id
	) as service_associate_name,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
	p.team_id
from
	insured_application_info ap INNER JOIN
	policy_person_insured ppi INNER JOIN
	policy p INNER JOIN
	coverage_person cp INNER JOIN
	coverage_person_insured cpi ON cp.coverage_person_id = cpi.coverage_person_id INNER JOIN
	policy_coverage pc ON cp.policy_coverage_id = pc.policy_coverage_id INNER JOIN
	person i ON cp.person_id = i.person_id ON p.policy_id = pc.policy_id ON ppi.policy_person_id = cpi.policy_person_id ON 
	ap.policy_person_id = ppi.policy_person_id LEFT OUTER JOIN
		(select association_code, name as association_name from association
		 union
		 select c.company_code as association_code, per.last_name as association_name from company c, person per where c.person_id = per.person_id and (per.class_type = 'ASSN' or per.class_type = 'GRP')) assoc ON p.association_code = assoc.association_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[codes_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[codes_view]
END
GO

if ( OBJECT_ID(N'rulebook_proxy_view') IS NULL OR OBJECT_ID(N'rulebook_proxy_view') IS NULL OR OBJECT_ID(N'rulebook_proxy_view') IS NULL OR OBJECT_ID(N'rulebook_proxy_view') IS NULL OR OBJECT_ID(N'rulebook_rate_class') IS NULL OR OBJECT_ID(N'rulebook_rate_class') IS NULL OR OBJECT_ID(N'rulebook_rate_class') IS NULL OR OBJECT_ID(N'rulebook_rate_class') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view codes_view as
select 'en-us' as language_code, 'mib_country' as code_type, country_id as code_id, country_name as code_value, mib_country as external_code from tl_country
union
select lang.code_value as language_code, 'mib_country' as code_type, country_id as code_id, alt_country_name as code_value, mib_country as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'policy_type' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is not null
union
select 'en-us' as language_code, 'policy_type' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is null
union
select 'en-us' as language_code, 'billing_code' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is not null and g_number != ''
union
select 'en-us' as language_code, 'billing_code' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is null or g_number = ''
union
select 'en-us' as language_code, 'country' as code_type, country_id as code_id, country_name as code_value, country_code as external_code from tl_country
union
select lang.code_value as language_code, 'country' as code_type, country_id as code_id, alt_country_name as code_value, country_code as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'lab_request' as code_type, request_code as code_id, description as code_value, '' as external_code from tl_lab_request
union
select 'en-us' as language_code, 'lab_specimen' as code_type, lab_specimin_id as code_id, description as code_value, '' as external_code from tl_lab_specimen
union
select 'en-us' as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + alt_description as code_value, line_of_business_code as external_code from tl_plan_code
union
select alt_lang as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id  as code_value, line_of_business_code as external_code from tl_plan_code where alt_lang is not null and alt_lang <> 'en-us'
union
select 'en-us' as language_code, 'requirement_group' as code_type, cast(requirement_group_id as char(30)) as code_id, name as code_value, '' as external_code from tl_requirement_group
union
select 'en-us' as language_code, 'subaccount' as code_type, subaccount_code as code_id, full_name as code_value, '' as external_code from tl_subaccount
union
select 'en-us' as language_code, 'country_state' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state
union
select lang.code_value as language_code, 'country_state' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_usa' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'USA'
union
select lang.code_value as language_code, 'country_state_usa' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'USA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_canada' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'CANADA'
union
select lang.code_value as language_code, 'country_state_canada' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'CANADA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'ansi_code' as code_type, horl_code as code_id, description as code_value, ansi as external_code from tl_ansi_code
union
select 'en-us' as language_code, 'agency' as code_type, cast(agency.person_id as char(30)) as code_id, person.last_name as code_value, agency.agency_number as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'agent' as code_type, cast(agent.person_id as char(30)) as code_id, person.last_name as code_value, agent.agent_number as external_code from agent, person where person.person_id = agent.person_id
union
select 'en-us' as language_code, 'agent_name' as code_type, (rtrim(agent_number) + '_' + cast(person.person_id as char(12))) as code_id, person.last_name as code_value, person.first_name as external_code from agent, person where agent_number is not null and person.person_id = agent.person_id
union
select 'en-us' as language_code, 'company' as code_type, company.company_code as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select 'en-us' as language_code, 'company_name' as code_type, person.last_name as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select alt_lang as language_code, 'requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null
union
select 'en-us' as language_code, 'requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is null or alt_lang <> 'en-us'
union
select alt_lang as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null and requirement_category = 0
union
select 'en-us' as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where (alt_lang is null or alt_lang <> 'en-us') and requirement_category = 0
union
select 'en-us' as language_code, code_type as code_type, cast(code_id as char(30)) as code_id, code_value as code_value, external_code as external_code from tl_acord_codes where code_type <> 'AUS Gender Type'
union
select 'en-us' as language_code, code_type as code_type, cast(external_code as char(30)) as code_id, code_value as code_value, cast(code_id as char(30)) as external_code from tl_acord_codes where code_type = 'AUS Gender Type'
union
select distinct 'en-us' as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where (lang.code_value is not null and lang.code_value <> '')
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null and (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null
union
select distinct 'en-us' as language_code, 'final_action_reason' as code_type, reason_text as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason where reason_code is not null
union
select distinct lang.code_value as language_code, 'final_action_reason' as code_type, alt_reason_text  as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and reason_code is not null and alt_reason_text is not null
union
select language_code, code_type, code_id, code_value, external_code from tl_code where code_type <> 'CaseOne'
union
select language_code, code_type, upper(code_id), code_value, external_code from tl_code where code_type = 'CaseOne'
union
select 'en-us' as language_code, 'tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p
	where t.person_id = p.person_id and (t.expiration_date > CURRENT_TIMESTAMP or t.expiration_date is NULL)
union
select 'en-us' as language_code, 'line_of_business' as code_type, line_of_business_code as code_id, name as code_value, line_of_business_code as external_code from line_of_business
union
select 'en-us' as language_code, 'association_code' as code_type, association_code as code_id, association_code as code_value, cast(expiration_date as char(30)) as external_code from association
union
select 'en-us' as language_code, 'active_association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
	where (expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL) and association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'active_association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
	where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)
union
select 'en-us' as language_code, 'association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
	where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
	where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
	from association a, association_plan ap where (a.expiration_date > CURRENT_TIMESTAMP or a.expiration_date is NULL) and
	a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
	from company c, person p, association_plan ap where c.company_code = ap.association_code and 
	c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
	from association a, association_plan ap where a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
	from company c, person p, association_plan ap where c.company_code = ap.association_code and c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
	from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' +  lower(rtrim(ltrim(ap.association_code))) + '_' +  lower(rtrim(lb.line_of_business_code) ) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'lifesuite_version' as code_type, 'version' as code_id, lifesuite_version as code_value, '' as external_code from lifesuite_version
union
select 'en-us' as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, impairment_text as code_value, '' as external_code from impairment_restriction
union
select lang.code_value as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, alt_impairment_text as code_value, '' as external_code from impairment_restriction, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_impairment_text is not null and rtrim(alt_impairment_text) <> ''
union
select 'en-us' as language_code, 'provider' as code_type, rtrim(provider) + '_' + rtrim(evidence_type) as code_id, us_vendor as code_value, non_us_vendor as external_code from provider
union
select distinct 'en-us' as language_code, 'g_number' as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code
	from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code and ap.g_number is not null
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '__' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code	from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'agency_number' as code_type, agency.agency_number as code_id, agency.agency_number + ' - ' + person.last_name as code_value, '' as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'Answer Set ' + rtrim(tl_answer_set_answers.answer_set_name) as code_type, rtrim(cast(tl_answer_set_answers.sequence_number as char(30))) as code_id,
	rtrim(tl_answer_set_answers.answer_text) as code_value, rtrim(tl_answer_set_answers.alt_answer_text) as external_code from tl_answer_set_answers
union
select 'en-us' as language_code, 'rulebook' as code_type, cast(rulebook_id as char(30)) as code_id, rulebook_name, description as external_code from rulebook_proxy_view where type is null or type = 0
union
select 'en-us' as language_code, lower(code_type), code_id, code_value, external_code from rulebook_rate_class
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, external_code as code_id, code_id as code_value, '' as external_code from tl_code where code_type = 'source_info_codes' and external_code is not null and rtrim(external_code) <> ''
union
select 'en-us' as language_code, 'CedentCompany' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'CedentCompany'
union
select 'en-us' as language_code, 'CedentUnderwriter_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentUnderwriter'
union
select 'en-us' as language_code, 'CedentContact_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentContact'
union
select 'en-us' as language_code, 'Reinsurer' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'Reinsurer'
union
select 'en-us' as language_code, 'active_retro_company_ob' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroOBCompany'
union
select 'en-us' as language_code, 'active_retro_company_retro' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroCompany'
union
select 'en-us' as language_code, 'cedent_fax' as code_type, company_code as code_id, area_code + prefix + ph.suffix as code_value, extension as external_code from company c, person p, person_phone ph where c.person_id = p.person_id and p.person_id = ph.person_id and p.class_type = 'CedentCompany' and lower(ph.phone_type_code) = 'fax'
union
select 'en-us' as language_code, 'coverage_indicator' as code_type, indicator_code as code_id, description as code_value, external_code from tl_coverage_indicator_code
union
select 'en-us' as language_code, 'address_type' as code_type, address_type_code as code_id, external_code as code_value, external_code from tl_address_type
union
select 'en-us' as language_code, 'benefit_type' as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from tl_benefit_type
union
select 'en-us' as language_code, 'reinsurance_vendor' as code_type, reinsurance_vendor_code as code_id, name as code_value, external_code from reinsurance_vendor
union
select 'en-us' as language_code, 'coverage_type' as code_type, coverage_type as code_id, description as code_value, external_code from tl_coverage_type
union
select 'en-us' as language_code, 'death_benefit_option' as code_type, death_benefit_option_code as code_id, external_code as code_value, external_code from tl_death_benefit_option
union
select 'en-us' as language_code, 'death_benefit_option_description' as code_type, death_benefit_option_code as code_id, description as code_value, '' as external_code from tl_death_benefit_option_desc
union
select 'en-us' as language_code, 'extended_property' as code_type, property_name as code_id, description as code_value, '' as external_code from tl_extended_property
union
select 'en-us' as language_code, 'language' as code_type, language_code as code_id, description as code_value, external_code from tl_language
union
select 'en-us' as language_code, 'marital_status' as code_type, marital_status_code as code_id, description as code_value, external_code from tl_marital_status
union
select 'en-us' as language_code, 'person_type' as code_type, person_type_id as code_id, description as code_value, '' as external_code from tl_person_type
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'requirement_type' as code_type, requirement_type_id as code_id, description as code_value, '' as external_code from tl_requirement_type
union
select 'en-us' as language_code, 'tax_type' as code_type, tax_type_id as code_id, description as code_value, '' as external_code from tl_tax_type
union
select 'en-us' as language_code, 'tobacco_type' as code_type, tobacco_type_id as code_id, external_code as code_value, external_code from tl_tobacco_type
union
select 'en-us' as language_code, 'tobacco_use' as code_type, tobacco_use_id as code_id, external_code as code_value, external_code from tl_tobacco_use
union
select 'en-us' as language_code, 'address_type_description' as code_type, address_type_code as code_id, description as code_value, '' as external_code from tl_address_type_description
union
select 'en-us' as language_code, 'beneficiary_type' as code_type, beneficiary_type as code_id, description as code_value, '' as external_code from tl_beneficiary_type_desc
union
select 'en-us' as language_code, 'benefit_type_description' as code_type, cast(benefit_id as char(30)) as code_id, description as code_value, '' as external_code from tl_benefit_type_description
union
select 'en-us' as language_code, 'note_type' as code_type, note_type as code_id, description as code_value, '' as external_code from tl_note_type_description
union
select 'en-us' as language_code, 'phone_type' as code_type, phone_type_code as code_id, description as code_value, '' as external_code from tl_phone_type_description
union
select 'en-us' as language_code, 'policy_role' as code_type, code as code_id, description as code_value, '' as external_code from tl_policy_role_description
union
select 'en-us' as language_code, 'purpose_of_coverage' as code_type, purpose_of_coverage_id as code_id, description as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'tobacco_type_description' as code_type, tobacco_type_id as code_id, description as code_value, '' as external_code from tl_tobacco_type_description
union
select 'en-us' as language_code, 'tobacco_use_description' as code_type, tobacco_use_id as code_id, description as code_value, '' as external_code from tl_tobacco_use_description
union
select 'en-us' as language_code, 'family_history_relationship' as code_type, famhist_relationship_code as code_id, famhist_relationship_code as code_value, famhist_relationship_code as external_code from tl_family_history_relationship
union
select 'en-us' as language_code, 'occupation' as code_type, occupation as code_id, occupation as code_value, occupation_code as external_code from occupation
union
select 'en-us' as language_code, 'source_info_codes' as code_type, source_info as code_id, source_description as code_value, partner_id as external_code from tl_source_info
union
select 'en-us' as language_code, 'distributor_codes' as code_type, distributor_code as code_id, distributor_description as code_value, '' as external_code from tl_distributor_codes
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, partner_id as code_id, source_info as code_value, '' as external_code from tl_source_info where partner_id is not null and rtrim(partner_id) <> ''
union
select 'en-us' as language_code, 'PurposeOfCoverage' as code_type, lower(description) as code_id, purpose_of_coverage_id as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'PolicyStatus' as code_type, policy_status_code as code_id, description as code_value, '' as external_code from tl_policy_status_description
union
select distinct 'en-us' as language_code, 'table_rating_reason' as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where reason_status = 'Table Rating'
union
select distinct lang.code_value as language_code, 'table_rating_reason' as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where reason_status = 'Table Rating'and lang.code_value is not null and alt_reason_text is not null
union
select 'en-us' as language_code, 'tpa_name' as code_type, t.tpa_code as code_id, p.last_name as code_value, t.tpa_short_name as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where  aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'aus_users_basic' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is null or aus_user.is_agent = 0) and (aus_user.is_agency is null or aus_user.is_agency = 0)
union
select 'en-us' as language_code, 'active_underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'active_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'underwriter_and_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where ((aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) or
	(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0)) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'active_team' as code_type, cast(team_id as char(30)) as code_id, team_name as code_value, '' as external_code from team where (is_active is not null and is_active <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (D)' as code_value, '' as external_code from team where (deleted is not null and deleted <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (I)' as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is null or is_active = 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is not null and is_active <> 0)
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' +  lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select distinct 'en-us' as language_code, 'g_number_' + lower(rtrim(association_code)) as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan where g_number is not null
union
select 'en-us' as language_code, 'active_login_cm' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'active_login_uw' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0) and aus_user.person_id = person.person_id
union
select language_code, 'issue_request_' + code_type as code_type, code_id, code_value, external_code from tl_code where code_type in (select code_id from tl_code where language_code = 'en-us' and code_type = 'AmendmentType')
union
select 'en-us' as language_code, 'employer' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Employer')
union
select 'en-us' as language_code, 'agent_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agent_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is not null and aus_user.is_agent <> 0)
union
select 'en-us' as language_code, 'agency_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agency_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agency is not null and aus_user.is_agency <> 0)
union
select language_code, lower('plan_' + rtrim(option_type) + '_' + rtrim(plan_code_id)) as code_type, cast(sequence_number as char(30)) as code_id, description as code_value, '' as external_code from tl_plan_option
union
select 'en-us' as language_code, 'trust' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Trust')
union
select 'en-us' as language_code, 'ppo' as code_type, cast(company.person_id as char(30)) as code_id, person.last_name as code_value, cast(company.expiration_date as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'PPO')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_applicant]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_applicant]
END
GO

if ( OBJECT_ID(N'agency_view') IS NULL OR OBJECT_ID(N'agency_view') IS NULL OR OBJECT_ID(N'agency_view') IS NULL OR OBJECT_ID(N'agency_view') IS NULL OR OBJECT_ID(N'agent_view') IS NULL OR OBJECT_ID(N'agent_view') IS NULL OR OBJECT_ID(N'agent_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'application_info_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'insured_coverages_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_applicant as
select
	p.policy_id as case_id,
	p.company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = p.company_code) as company_name,
	p.policy_number as case_number,
	p.application_number,
	p.issue_date,
	ppi.appeal_status,
	p.reason_text as final_action_reason,
	p.underwriter_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	p.team_id,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	p.application_date,
	p.agent_signed_date,
	p.policy_status_code as case_status,
	p.policy_status_date as case_status_date,
	p.receive_date,
	p.payment_mode_code,
	(select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	 union
	 select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	) as payment_mode_name,
	p.payment_method_code,
	(select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	 union
	 select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	) as payment_method_name,
	p.last_underwrite_date,
	p.allow_aus_approval,
	(select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = (select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id)
	) as final_action_by_name,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_date,
	(select top 1 final_action_note from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_note,
	(select top 1 reason_text from insured_coverages_view where policy_person_id = i.policy_person_id) as reason_text,
	p.reinsurance_indicator,
	p.reinsurance_vendor_code,
	(select
		riv.name
	 from
		reinsurance_vendor riv
	 where
		riv.reinsurance_vendor_code = p.reinsurance_vendor_code
	) as reinsurance_vendor_name,
	p.updated_by as case_updated_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.updated_by
	) as case_updated_by_name,
	p.updated_date as case_updated_date,
	p.added_by case_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.added_by
	) as case_added_by_name,
	p.added_date as case_added_date,
	p.cwa_amount,
	p.cwa_date,
	p.priority,
	p.bank_rounting_number as bank_routing_number,
	p.bank_account_number,
	p.credit_card_type,
	(select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	 union
	 select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	) as credit_card_type_name,
	p.credit_card_number,
	p.credit_card_expiration_year,
	p.credit_card_expiration_month,
	p.list_bill_location,
	p.list_bill_employee_id,
	p.bill_day,
	p.marketing_code,
	p.mode_premium,
	p.requested_issue_date,
	p.case_group_id as case_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = p.policy_id and name = 'TPAFamilyId'
	) as tpa_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = i.policy_person_id and name = 'CurrentEpsilonKey'
	) as current_epsilon_dbkey,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as service_associate_name,
	p.association_code,
	(select
		assoc.name
	 from
		association assoc
	 where
		assoc.association_code = p.association_code
	) as association_name,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_code,
	(select
		ltrim(rtrim(tv.last_name))
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_name,
	p.amex_account,
	p.performed_jet_issue_flag,
	p.source_info,
	(select source_description from tl_source_info where source_info = p.source_info
	 union
	 select code_value from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as source_description,
	(select partner_id from tl_source_info where source_info = p.source_info
	 union
	 select external_code from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as partner_id,
	p.lead_number_id,
	p.distributor_code,
	(select distributor_description from tl_distributor_codes where distributor_code = p.distributor_code
	 union
	 select code_value from tl_code where code_type = 'distributor_codes' and code_id = p.distributor_code and language_code = 'en-us') as distributor_description,
	p.alternate_case_id,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number is not null) as agent_number,
	(select top 1 ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)) from person ps, agent_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id and av.agent_number is not null) as agent_name,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as agency_number,
	(select top 1 routing_number from agency_view where policy_id = p.policy_id) as routing_number,
	(select top 1 rtrim(ps.last_name) from person ps, agency_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id) as agency_name,
	p.cedent_policy_number,
	p.cedent_company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = p.cedent_company_code) as cedent_company_name,
	p.cedent_fax_number,
	p.cedent_underwriter_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps
	 where
		p.cedent_underwriter_id = ps.person_id
	) as cedent_underwriter_name,
	p.cedent_contact_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps
	 where
		p.cedent_contact_id = ps.person_id
	) as cedent_contact_name,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	(select code_value from tl_code where code_type = 'currency_code' and code_id = p.currency_code and language_code = 'en-us') as currency_description,
	p.preferred_language_code,
	(select description from tl_language where language_code = p.preferred_language_code
	 union
	 select code_value from tl_code where code_type = 'language' and code_id = p.preferred_language_code and language_code = 'en-us') as preferred_language_description,
	i.person_id,
	i.party_id,
	i.policy_person_id as applicant_id,
	rtrim(i.last_name) + ', ' + rtrim(i.first_name) as full_name,
	i.last_name,
	i.first_name,
	i.middle_name,
	i.title,
	i.suffix,
	i.tax_id,
	i.tax_type_id,
	i.birth_date,
	(cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) as age,
	i.sex,
	i.email_address,
	i.alt_email_address,
	i.marital_status,
	i.client_id,
	i.signed_state_id,
	(select
		ssn.state_name
	 from
		tl_country_state ssn
	 where
		ssn.country_state_id = i.signed_state_id
	) as signed_state_name,
	i.underwriting_amount,
	i.issue_age,
	i.primary_insured_flag,
	i.aviation_exclusion,
	i.add_uw_amt,
	(select code_value from tl_code where code_type = 'applicant_status' and code_id = i.applicant_status and language_code = 'en-us') as applicant_status,
	i.applicant_status as applicant_status_short,
	i.applicant_status_date,
	i.is_member,
	i.allow_auto_approval,
	i.adverse_history,
	i.und_allow_auto_approval,
	i.und_allow_jet_issue,
	i.und_allow_auto_ordering,
	i.added_date as applicant_added_date,
	i.added_by as applicant_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = i.added_by
	) as applicant_added_by_name,
	i.reopen_date,
	i.retro_type,
	i.aviation_flag,
	i.entertainer_flag,
	i.sports_flag,
	i.foreign_flag,
	i.additional_in_force,
	i.relationship_to_insured as relationship_to_insured_id,
	(select code_value from tl_acord_codes where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured
	 union
	 select code_value from tl_code where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured and language_code = 'en-us') as relationship_to_insured,
	(select top 1 plan_code_id from insured_coverages_view where policy_person_id = i.policy_person_id) as plan_code_id,
	(select top 1 planned_premium from insured_coverages_view where policy_person_id = i.policy_person_id) as planned_premium,
	(select top 1 web_quoted_class from insured_coverages_view where policy_person_id = i.policy_person_id) as web_quoted_class,
	(select top 1 rate_class_quoted from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_quoted,
	(select top 1 rate_class_approved from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_approved,
	(select top 1 rate_class_issued from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_issued,
	(select top 1 amount from insured_coverages_view where policy_person_id = i.policy_person_id) as amount,
	(select top 1 perm_table_rating from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_table_rating,
	(select top 1 perm_flat_extra_amount from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_flat_extra_amount,
	dma.residence_city,
	dma.residence_postal_code,
	dma.residence_address_line1,
	dma.residence_address_line2,
	dma.residence_address_line3,
	dma.residence_country_code,
	dma.residence_state_name,
	(select cs.state_name from  dbo.person_address pa , dbo.tl_country_state cs where pa.person_id = i.person_id and  pa.country_state_id = cs.country_state_id and  pa.address_type_code = 'RESIDENCE') as residence_state_name_2,
	dma.residence_state_code,
	(select cs.country_state_id from  dbo.person_address pa , dbo.tl_country_state cs where pa.person_id = i.person_id and  pa.country_state_id = cs.country_state_id and  pa.address_type_code = 'RESIDENCE') as residence_state_code_2,
	dma.residence_country_name,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.home_phone_country_code,
	dmp.home_phone_area_code,
	dmp.home_phone_prefix,
	dmp.home_phone_suffix,
	dmp.home_phone_extension,
	dmp.home_phone_pin,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin,
	ap.create_date,
	ap.expiration_date,
	ap.manual_entry_flag,
	ap.income,
	ap.net_worth,
	ap.total_inforce,
	ap.replacement_amount,
	ap.replacement_date,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.birth_country,
	(select
		bc.country_name
	 from
		tl_country bc
	 where
		bc.country_id = ap.birth_country
	) as birth_country_name,
	ap.birth_state,
	(select
		bsn.state_name
	 from
		tl_country_state bsn
	 where
		bsn.country_state_id = ap.birth_state
	) as birth_state_name,
	ap.drivers_license_number,
	ap.drivers_license_country_id,
	(select
		drc.country_name
	 from
		tl_country drc
	 where
		drc.country_id = ap.drivers_license_country_id
	) as drivers_license_country_name,
	ap.drivers_license_state,
	(select
		drsn.state_name
	 from
		tl_country_state drsn
	 where
		drsn.country_state_id = ap.drivers_license_state
	) as drivers_license_state_name,
	ap.bankruptcy_disposition,
	ap.bankruptcy_discharge_date,
	ap.occupation,
	ap.height_inches,
	ap.weight_pounds,
	ap.weght_previous_year,
	ap.reason_for_weight_change,
	ap.waist_inches,
	ap.last_md_visit,
	ap.last_md_result,
	ap.added_by as application_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.added_by
	) as application_added_by_name,
	ap.added_date as application_added_date,
	ap.updated_by as application_updated_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.updated_by
	) as application_updated_by_name,
	ap.update_date as application_updated_date,
	ap.beneficiary_type,
	ap.medical_authorization_flag,
	ap.citizenship_country_id,
	(select
		cc.country_name
	 from
		tl_country cc
	 where
		cc.country_id = ap.citizenship_country_id
	) as citizenship_country_name,
	ap.doctor_name,
	ap.doctor_addr,
	ap.doctor_city,
	ap.doctor_state,
	(select
		docsn.state_name
	 from
		tl_country_state docsn
	 where
		docsn.country_state_id = ap.doctor_state
	) as doctor_state_name,
	ap.doctor_zip,
	ap.last_visit_date,
	ap.visit_reason,
	ap.findings,
	ap.treatments,
	ap.still_under_treatment_flag,
	ap.prior_consultations_flag,
	ap.prior_consultation_detail,
	ap.unearned_income,
	ap.employer,
	ap.years_at_employer,
	ap.employer_address,
	ap.income_prev_year,
	ap.visa_type,
	ap.job_duties,
	ap.hippa_authorization_flag,
	ap.monthly_expense,
	ap.last_blood_profile_date,
	ap.best_day_to_call,
	ap.best_time_to_call,
	ap.systolic_bp_reading,
	ap.diastolic_bp_reading,
	ap.cholesterol_reading,
	ap.issue_state,
	ap.business_income,
	ap.business_net_worth,
	ap.book_value,
	ap.market_value,
	ap.inspection_income,
	ap.inspection_net_worth,
	ap.inspection_business_income,
	ap.inspection_business_net_worth,
	ap.inspection_book_value,
	ap.inspection_market_value,
	ap.statement_income,
	ap.statement_net_worth,
	ap.statement_business_income,
	ap.statement_business_net_worth,
	ap.statement_book_value,
	ap.statement_market_value,
	ap.other_income,
	ap.other_net_worth,
	ap.other_business_income,
	ap.other_business_net_worth,
	ap.other_book_value,
	ap.other_market_value,
	ppi.rerate_status,
	cpi.rate_up_factor,
	(cpi.final_premium - cpi.basic_premium) as rate_up_amount,
	cpi.final_premium as recommended_rate,
	cpi.recommended_uw_decision  as recommend_determination,
	cpi.rating_engine_reason_code,
	iai.signature_date
from
	policy p,
	insured i,
	application_info_view ap,
	data_mart_address dma,
	data_mart_phone dmp,
	policy_person_insured ppi,
	insured_application_info iai,
	coverage_person_insured cpi
where
	i.policy_id = p.policy_id and
	ap.policy_person_id = i.policy_person_id and
	dma.person_id = i.person_id and
	dmp.person_id = i.person_id and
	ppi.policy_person_id = i.policy_person_id and
	iai.policy_person_id = i.policy_person_id and
	cpi.policy_person_id = i.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_application_submission]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_application_submission]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_application_submission as
select
	dma.source_description as application_source,
	dma.receive_date as receive_date,
	dma.residence_state_name_2 as application_state,
	dma.team_name as underwriting_team,
	(select count(*) from data_mart_applicant
	   where case_id = dma.case_id)   as number_of_applications,
	'Automatic' as application_process,	
	dma.case_number as application_id,
	dma.residence_state_code_2  as application_state_id
from
	data_mart_applicant dma
where 
	dma.final_action_by = -255
union 
select
	dma.source_description as application_source,
	dma.receive_date as receive_date,
	dma.residence_state_name_2 as application_state,
	dma.team_name as underwriting_team,
	(select count(*) from data_mart_applicant
	   where case_id = dma.case_id)   as number_of_applications,
	'Manual' as application_process,
	dma.case_number as application_id,
	dma.residence_state_code_2 as application_state_id
from
	data_mart_applicant dma
where 
	dma.final_action_by > -255

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_medical_loss_ratio]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_medical_loss_ratio]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_medical_loss_ratio as
select
	dma.case_status as application_final_determination,
	dma.applicant_status as applicant_final_determination,
	dma.rate_up_factor   as applicant_rate_up_factor,
	'Automatic' as application_process,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.final_action_date   as application_completion_date
from
	data_mart_applicant dma
where
   dma.final_action_by = -255
	and dma.final_action_date is not NULL
union
select
	dma.case_status as application_final_determination,
	dma.applicant_status as applicant_final_determination,
	dma.rate_up_factor   as applicant_rate_up_factor,
	'Manual' as application_process,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.final_action_date   as application_completion_date
from
	data_mart_applicant dma
where
   dma.final_action_by > -255
	and dma.final_action_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_usa_underwriter_pend]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_usa_underwriter_pend]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_usa_underwriter_pend as
select
	dma.case_number as application_id,
	dma.case_status as application_status,
	dma.underwriter_name as application_underwriter_name,
	dma.service_associate_name as application_usa_name,
	dma.receive_date as receive_date,
	dma.issue_date as last_usa_uw_action,
	dma.requested_issue_date   as effective_date_request,
	datediff(dd,dma.receive_date,getdate() ) as days_since_receipt,
	datediff(dd,dma.case_status_date,getdate() ) as days_since_last_action,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.requested_issue_date as out_of_scope_date,
	'No' as out_of_scope_request
from
	data_mart_applicant dma
where 
	datediff( dd, dma.requested_issue_date, dma.receive_date) < 60
union
select
	dma.case_number as application_id,
	dma.case_status as application_status,
	dma.underwriter_name as application_underwriter_name,
	dma.service_associate_name as application_usa_name,
	dma.receive_date as receive_date,
	dma.issue_date as last_usa_uw_action,
	dma.requested_issue_date   as effective_date_request,
	datediff(dd,dma.receive_date,getdate() ) as days_since_receipt,
	datediff(dd,dma.case_status_date,getdate() ) as days_since_last_action,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.requested_issue_date as out_of_scope_date,
	'Yes' as out_of_scope_request
from
	data_mart_applicant dma
where 
	datediff( dd, dma.requested_issue_date, dma.receive_date) >= 60

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_party]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_party]
END
GO

if ( OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_party as
select
	ppv.case_party_id,
	ppv.case_id,
	ppv.party_type,
	ppv.relation,
	ppv.person_id,
	ppv.party_id,
	ltrim(rtrim(ppv.first_name) + ' ' + rtrim(ppv.last_name)) as full_name,
	ppv.last_name,
	ppv.first_name,
	ppv.middle_name,
	ppv.title,
	ppv.suffix,
	ppv.tax_id,
	ppv.tax_type_id,
	ppv.birth_date,
	ppv.sex,
	ppv.email_address,
	ppv.alt_email_address,
	ppv.marital_status,
	ppv.client_id,
	ppv.class_type,
	ppv.preferred_contact_mode,
	ppv.field1,
	ppv.field2,
	ppv.field3,
	ppv.field4,
	ppv.field5,
	dma.residence_city,
	dma.residence_postal_code,
	dma.residence_address_line1,
	dma.residence_address_line2,
	dma.residence_address_line3,
	dma.residence_country_code,
	dma.residence_state_name,
	dma.residence_state_code,
	dma.residence_country_name,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dma.billing_city,
	dma.billing_postal_code,
	dma.billing_address_line1,
	dma.billing_address_line2,
	dma.billing_address_line3,
	dma.billing_country_code,
	dma.billing_state_name,
	dma.billing_state_code,
	dma.billing_country_name,
	dmp.home_phone_country_code,
	dmp.home_phone_area_code,
	dmp.home_phone_prefix,
	dmp.home_phone_suffix,
	dmp.home_phone_extension,
	dmp.home_phone_pin,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	party_proxy_view ppv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = ppv.person_id and
	dmp.person_id = ppv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_daily_application_determination]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_daily_application_determination]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_daily_application_determination as
select
	dma.case_number as application_id,
	dma.residence_state_name_2 as application_state,
	dma.source_description as application_source,
	dma.case_status as application_final_determination,
	dma.residence_state_code_2 as application_state_id,
	dma.final_action_date,
	dma.final_action_reason
from
	data_mart_applicant dma, data_mart_party dmp
where 
	dmp.party_type = 'owner'
	and dma.person_id = dmp.person_id
	and dma.final_action_date is not NULL
	and (case_status like ('%appov%')
		or case_status like ('%declin%')
		or case_status like ('%withdrawn%')
		or case_status like ('%close%') )

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_automatic_vs_manual_underwriting]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_automatic_vs_manual_underwriting]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_automatic_vs_manual_underwriting as
select
	dma.source_description as application_source,
	dma.case_status as application_final_determination,
	dma.applicant_status as applicant_final_determination,
	dma.underwriter_name   as application_underwriter_name,
	'Automatic' as application_process,
	dma.rate_up_factor   as applicant_rate_up_factor,
	dma.residence_state_name_2 as application_state,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.team_id as underwriter_staff_id,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_code_2 as application_state_id
from
	data_mart_applicant dma
where 
	dma.final_action_by = -255
	and dma.final_action_date is not NULL
union
select
	dma.source_description as application_source,
	dma.case_status as application_final_determination,
	dma.applicant_status as applicant_final_determination,
	dma.underwriter_name   as application_underwriter_name,
	'Manual' as application_process,
	dma.rate_up_factor   as applicant_rate_up_factor,
	dma.residence_state_name_2 as application_state,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.team_id as underwriter_staff_id,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_code_2 as application_state_id
from
	data_mart_applicant dma
where 
	dma.final_action_by > -255
	and dma.final_action_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_manual_override_summary]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_manual_override_summary]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_manual_override_summary as
select
	dma.case_number as application_id,
	dma.receive_date as receive_date,
	dma.case_updated_date  as case_updated_date,
	dma.case_updated_by_name as last_updated_by_name,
	dma.applicant_status as applicant_final_determination,
	dma.rate_up_factor   as applicant_rate_up_factor,
	dma.recommend_determination as recommend_determination,
	dma.recommended_rate as recommended_rate,
	dma.underwriter_name as application_underwriter_name,
	dma.case_updated_by as last_updated_by,
	dma.case_status as application_final_determination,
	dma.underwriter_id as underwriter_id
from
	data_mart_applicant dma
where 
	dma.final_action_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_underwriting_pend]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_underwriting_pend]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_underwriting_pend as
select
	dma.case_status as application_status,
	(select count(applicant_id) from data_mart_applicant where dma.case_id = case_id) as num_applicants_by_application,
	dma.source_description as application_source,
	dma.residence_state_name_2 as application_state,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.case_number as applicant_id,
	dma.residence_state_code_2 as application_state_id,
	'Automatic' as application_process,
	dma.receive_date as receive_date
from
	data_mart_applicant dma, data_mart_party dmp
where 
	dmp.party_type = 'owner'
	and dma.person_id = dmp.person_id
	and  dma.case_updated_by = -255
	and dma.applicant_status_short in ('II','RU','UP')
	and dma.final_action_date is NULL
union
select
	dma.case_status as application_status,
	(select count(applicant_id) from data_mart_applicant where dma.case_id = case_id) as num_applicants_by_application,
	dma.source_description as application_source,
	dma.residence_state_name_2 as application_state,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.case_number as applicant_id,
	dma.residence_state_code_2 as application_state_id,
	'Manual' as application_process,
	dma.receive_date as receive_date
from
	data_mart_applicant dma, data_mart_party dmp
where 
	dmp.party_type = 'owner'
	and dma.person_id = dmp.person_id
	and  dma.case_updated_by> -255
	and dma.applicant_status_short in ('II','RU','UP')
	and dma.final_action_date is NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_turnaround_time]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_turnaround_time]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_turnaround_time as
select
	dma.source_description as application_source,
	dma.case_status as application_final_determination,
	dma.receive_date as receive_date,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_name_2 as application_state,
	dma.underwriter_name   as application_underwriter_name,
	dma.case_number as applicant_id,
	dma.team_name as team_name,
	dma.team_id as team_id,
	dma.final_action_by_name as final_action_underwriter,
	dma.residence_state_code_2 as application_state_id,
	dma.underwriter_id as underwriter_id
from
	data_mart_applicant dma, data_mart_party dmp
where 
	dmp.party_type = 'owner'
	and dmp.person_id = dma.person_id
	and dma.final_action_date is not NULL

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_final_determination]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_final_determination]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL OR OBJECT_ID(N'data_mart_party') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_final_determination as
select
	dma.case_status as application_final_determination,
	'Automatic' as application_process,
	dma.residence_state_name_2 as application_state,
	dma.applicant_status as applicant_final_determination,
	dma.rate_up_factor  as applicant_rate_up_factor,
	(select count(*) from data_mart_applicant
	   where case_id = dma.case_id)   as number_of_applications,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_code_2 as application_state_id
from
	data_mart_applicant dma, data_mart_party dmp
where 	
	dmp.person_id = dma.person_id
	and dmp.party_type = 'owner'
	and dma.final_action_date is not NULL
	and dmp.residence_state_name = dma.residence_state_name
	and dma.final_action_by = -255
union
select
	dma.case_status as application_final_determination,
	'Manual' as application_process,
	dma.residence_state_name_2 as application_state,
	dma.applicant_status as applicant_final_determination,
	dma.rate_up_factor   as applicant_rate_up_factor,
	(select count(*) from data_mart_applicant
	   where case_id = dma.case_id)   as number_of_applications,
	dma.applicant_status_short as applicant_final_determination_short,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_code_2 as application_state_id
from
	data_mart_applicant dma, data_mart_party dmp
where 
	dmp.person_id = dma.person_id
	and dmp.party_type = 'owner'
	and dma.final_action_date is not NULL
	and dmp.residence_state_name = dma.residence_state_name
	and dma.final_action_by > -255

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_functional_metrics]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_functional_metrics]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_functional_metrics as
select
	dma.receive_date as receive_date,
	dma.case_status as application_status,
	dma.underwriter_name as application_underwriter_name,
	dma.service_associate_name as application_usa_name,
	dma.team_name as team_name,
	dma.residence_state_name_2 as application_state,
	dma.final_action_date   as application_completion_date,
	dma.case_updated_date  as application_pend_date,
	dma.case_status   as application_final_determination,
	dma.applicant_status   as applicants_final_determination,	
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.underwriter_id as underwriter_id,
	dma.residence_state_code_2 as application_state_id,
	dma.receive_date as received_date,
	dma.case_id as policy_num,
	dma.team_id as team_id
from
	data_mart_applicant dma
where 
	dma.applicant_status_short in ('iv','ii','up','mu')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_top_conditions]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_top_conditions]
END
GO

if ( OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_applicant') IS NULL OR OBJECT_ID(N'data_mart_condition') IS NULL OR OBJECT_ID(N'data_mart_condition') IS NULL OR OBJECT_ID(N'data_mart_condition') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view rp_top_conditions as
select
	dma.underwriter_name as application_underwriter_name,
	dma.service_associate_name as application_usa_name,
	dma.case_status as application_final_determination,
	dma.applicant_status   as applicant_final_determination,
	ltrim(rtrim(mc.condition)) + ' : ' + ltrim(rtrim(mc.bodily_system)) as applicant_condition,
	dma.residence_state_name_2 as application_state,
	dma.rate_up_factor   as applicant_rate_up_factor,
	dma.case_number as application_id,
	dma.full_name as applicant_name,
	dma.rate_class_issued as rate_level,
	dma.final_action_date   as application_completion_date,
	dma.residence_state_code_2 as application_state_id,
	dma.underwriter_id as underwriter_id
from
	data_mart_applicant dma, data_mart_condition mc
where 
	dma.applicant_id = mc.applicant_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_tpa]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_tpa]
END
GO

if ( OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_tpa as
select
	tv.person_id,
	tv.party_id,
	ltrim(rtrim(tv.first_name) + ' ' + rtrim(tv.last_name)) as full_name,
	tv.last_name,
	tv.first_name,
	tv.middle_name,
	tv.title,
	tv.suffix,
	tv.tax_id,
	tv.tax_type_id,
	tv.birth_date,
	tv.sex,
	tv.email_address,
	tv.alt_email_address,
	tv.marital_status,
	tv.tpa_short_name as tpa_code,
	ltrim(rtrim(tv.contact_first_name) + ' ' + rtrim(tv.contact_last_name)) as contact_full_name,
	tv.contact_last_name,
	tv.contact_first_name,
	tv.auto_closure_days,
	tv.expiration_date,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	tpa_view tv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = tv.person_id and
	dmp.person_id = tv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_company]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_company]
END
GO

if ( OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'company_view') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_company as
select
	cv.company_code,
	cv.last_name as company_name,
	cv.person_id,
	cv.party_id,
	cv.tax_id,
	cv.email_address,
	cv.alt_email_address,
	cv.class_type,
	cv.preferred_contact_mode,
	cv.allow_aus_approval_flag,
	cv.correspondence_directory,
	cv.field1,
	cv.field2,
	cv.field3,
	cv.field4,
	cv.field5,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dma.billing_city,
	dma.billing_postal_code,
	dma.billing_address_line1,
	dma.billing_address_line2,
	dma.billing_address_line3,
	dma.billing_country_code,
	dma.billing_state_name,
	dma.billing_state_code,
	dma.billing_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	company_view cv,
	data_mart_address dma,
	data_mart_phone dmp
where
	dma.person_id = cv.person_id and
	dmp.person_id = cv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_user]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_user]
END
GO

if ( OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'aus_user_view') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_address') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL OR OBJECT_ID(N'data_mart_phone') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END
 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

create view data_mart_user as
select
	uv.person_id,
	uv.party_id,
	ltrim(rtrim(uv.first_name) + ' ' + rtrim(uv.last_name)) as full_name,
	uv.last_name,
	uv.first_name,
	uv.middle_name,
	uv.title,
	uv.suffix,
	uv.tax_id,
	uv.tax_type_id,
	uv.birth_date,
	uv.sex,
	uv.email_address,
	uv.alt_email_address,
	uv.marital_status,
	uv.user_id,
	uv.login_id,
	uv.password,
	uv.is_active,
	uv.preferred_language_code,
	uv.level_of_authority,
	uv.is_underwriter,
	uv.is_service_associate,
	uv.role_id,
	uv.is_agent,
	uv.agent_number,
	uv.is_agency,
	uv.agency_number,
	asr.name as role_name,
	uv.restrict_to_teams,
	uv.job_title,
	uv.account_locked,
	uv.account_locked_date,
	uv.bad_login_attempt_count,
	uv.last_bad_login_attempt_date,
	uv.must_change_password,
	uv.last_password_change_date,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin
from
	aus_user_view uv,
	aus_security_roles asr,
	data_mart_address dma,
	data_mart_phone dmp
where
	asr.role_id = uv.role_id and
	dma.person_id = uv.person_id and
	dmp.person_id = uv.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fn_diagramobjects]') and xtype in (N'FN', N'IF', N'TF'))
BEGIN
	DROP FUNCTION [dbo].[fn_diagramobjects]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE FUNCTION dbo.fn_diagramobjects() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int
		select @InstalledObjects = 0
		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')
		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		return @InstalledObjects 
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_alterdiagram]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_alterdiagram]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end
		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;
		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;
		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;
		return 0
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_creatediagram]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_creatediagram]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		select @retval = @@IDENTITY 
		return @retval
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_dropdiagram]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_dropdiagram]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
		return 0;
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_helpdiagramdefinition]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_helpdiagramdefinition]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_helpdiagrams]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_helpdiagrams]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_renamediagram]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_renamediagram]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
		select @u_name = USER_NAME(@owner_id)
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_upgraddiagrams]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[sp_upgraddiagrams]
END
GO

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);
		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/
		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	

DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	