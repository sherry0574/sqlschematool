
-- Diff Name: Compare results for Source DB XML snapshot: llewis-lt_llewis2000_UHCTest_SCHEMA.xml,
-- with Target DB XML snapshot: llewis-lt_llewis2000_UHC_SCHEMA.xml.
-- Results are the SQL changes necessary to match
-- the Target DB schema to the Source DB schema.
-- Output Date: 10/15/2007
-- Output Time: 9:00 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Diffgram SQL'
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_subgroup_person]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[subgroup]  
	DROP CONSTRAINT FK_subgroup_person
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_ppi_sci_REF_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_ppi_sci_REF_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_COUNT_REF_9601_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_country_state]  
	DROP CONSTRAINT FK_TL_COUNT_REF_9601_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1047_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1047_tl_count
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1059_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1059_tl_count
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REF_14466_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REF_14466_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REFERENCE_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REFERENCE_TL_COUNT
END
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[subgroup]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[subgroup]
	(   
		[sub_group_code] [char] (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[company_code] [char] (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[person_id] [int]  NOT NULL,
		[subgroup_id] [int]  NOT NULL,
		[is_using_company_address] [char] (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL,
		[expiration_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'sub_group_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [IX_subgroup_company] UNIQUE NONCLUSTERED 
	(
		[company_code], [sub_group_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, sub_group_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'person_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [IX_subgroup_person] UNIQUE NONCLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'subgroup_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [PK_subgroup] PRIMARY KEY CLUSTERED 
	(
		[subgroup_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subgroup_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country'), N'country_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country] ADD 
	CONSTRAINT [PK_TL_COUNTRY] PRIMARY KEY CLUSTERED 
	(
		[country_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- add new FK Constraints to Table
IF object_id(N'subgroup') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [FK_subgroup_person] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: subgroup, or the related column: person_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_ppi_sci_REF_TL_COUNT] FOREIGN KEY 
	(	
		[signed_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'tl_country_state') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [FK_TL_COUNT_REF_9601_TL_COUNT] FOREIGN KEY 
	(	
		[country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_country_state, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1047_tl_count] FOREIGN KEY 
	(	
		[residence_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1059_tl_count] FOREIGN KEY 
	(	
		[birth_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REF_14466_TL_COUNT] FOREIGN KEY 
	(	
		[drivers_license_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REFERENCE_TL_COUNT] FOREIGN KEY 
	(	
		[citizenship_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[association_plan_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view association_plan_subgroup as
select distinct association_code, sub_group_code from association_plan

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW [dbo].[company_view] AS
 SELECT
 	  dbo.person.person_id
 	, dbo.person.party_id
 	, dbo.person.last_name
 	, dbo.person.first_name
 	, dbo.person.middle_name
 	, dbo.person.birth_name
 	, dbo.person.title
 	, dbo.person.suffix
 	, dbo.person.tax_id
 	, dbo.person.tax_type_id
 	, dbo.person.birth_date
 	, dbo.person.sex
 	, dbo.person.person_type_id
 	, dbo.person.preferred_language_code
 	, dbo.person.email_address
 	, dbo.person.marital_status
 	, dbo.person.client_id
 	, dbo.person.alt_email_address
 	, dbo.person.preferred_contact_mode
 	, dbo.person.class_type
 	, dbo.person.field1
 	, dbo.person.field2
 	, dbo.person.field3
 	, dbo.person.field4
 	, dbo.person.field5
 	, dbo.person.note_collection_id
 	, dbo.company.company_code
 	, dbo.company.allow_aus_approval_flag
 	, dbo.company.correspondence_directory
 	, dbo.company.full_time_employee_count
 	, dbo.company.percent_eligible_employees
 	, dbo.company.percent_eligible_dependants
 	, dbo.company.current_cobra_indicator
 	, dbo.company.expiration_date
 	, dbo.company.region_code
 	, dbo.company.tpa_code
 	, dbo.company.carrier_code
 FROM         dbo.person, dbo.company 
 WHERE dbo.person.person_id = dbo.company.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW [dbo].[customer_lab_report_view] as
 select 
   r.lab_id_number,
   r.requirement_information_id,
   r.horl_code,
   c.[description],
   r.result_value,
   ISNULL((case when h.sex = 'm' then low_male else low_female end),'') as [low],
   ISNULL((case when h.sex = 'm' then high_male else high_female end),'') as [high],
   (case when 
 	   (case when h.sex = 'm' then low_male else low_female end) = 'negative' AND
 	    r.result_value <> 'NEG' AND 
       ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
 	   len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
    then r.result_value else 
       case when
 	      ISNUMERIC(r.result_value)=1 AND
 	      ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 	      CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
 	      CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
 	      CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
       then r.result_value else 
 	      case when
 		     r.result_value = 'NVG' OR 
 		     ((case when h.sex = 'm' then low_male else low_female end) IS NULL AND
 		     (case when h.sex = 'm' then high_male else high_female end) IS NULL AND
		     r.result_value <> 'NEG')
 	      then 'NVG' else 
             case when
 	            NOT ISNUMERIC(r.result_value)=1 AND r.result_value <> 'NEG' AND
 	            NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	            (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	            ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
 	         then r.result_value else 
 	            case when
 		           ISNUMERIC(r.result_value)=1 AND
 		           NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      	       (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 		           ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 		           CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
 		           0.0 AND 
 		           CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
 	            then r.result_value else
 		           case when r.result_value <> 'NEG' AND r.result_value <> 'POS' AND NOT ISNUMERIC(r.result_value)=1
 		           then 'N/A' else '' end
 		        end
 	         end
 	      end
 	   end
    end) as [abnormal],
   (case when 
 	   (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	       r.result_value = 'NEG' AND 
           ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
 	       len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
        then r.result_value else 
           case when
 	          ISNUMERIC(r.result_value)=1 AND
 	          ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	          ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 	          CONVERT(decimal(10,5), r.result_value) BETWEEN 
 	          CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
 	          CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
           then r.result_value else 
              case when
 	             NOT ISNUMERIC(r.result_value)=1 AND r.result_value = 'NEG' AND
 	             NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	             (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	             ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
 	          then r.result_value else 
 	             case when
 		            ISNUMERIC(r.result_value)=1 AND
 		            NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      	        (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 		            ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 		            CONVERT(decimal(10,5), r.result_value) BETWEEN 
 		            0.0 AND 
 		            CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
 	             then r.result_value else 
                    case when 
 		               ((case when h.sex = 'm' then low_male else low_female end) IS NULL AND
 		               (case when h.sex = 'm' then high_male else high_female end) IS NULL AND
		               r.result_value = 'NEG')
                    then r.result_value else
                       '' 
                    end
                 end
              end
 	       end
        end) as [normal],
        ISNULL(r.range_text, '') AS range_text
 from dbo.lab_result as r, dbo.lab_header as h, dbo.tl_ansi_code as c
 where 
   r.lab_id_number = h.lab_id_number and 
   r.requirement_information_id = h.requirement_information_id and
   c.horl_code = r.horl_code 

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_association_plan_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_association_plan_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view [dbo].[lv_association_plan_subgroup] as
select distinct 
    'en-us' as language_code, 
    'association_subgroup_' + lower(ap.association_code) as code_type, 
    ltrim(rtrim(ap.association_code)) + ltrim(rtrim(ap.sub_group_code)) as code_id, 
    ap.sub_group_code as code_value, 
    '' as external_code
from company c, person p, association_plan ap 
where 
    c.company_code = ap.association_code and 
    c.person_id = p.person_id and 
    (p.class_type = 'ASSN' or p.class_type = 'GRP')


GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_subgroup
as
select distinct 
      'en-us'                             as language_code
    , 'subgroup_' + lower(c.company_code) as code_type
    , cast(s.subgroup_id as char(10))     as code_id
    , p.last_name                         as code_value
    , cast(p.person_id as char(10))       as external_code
from company c, subgroup s, person p
where 
        s.company_code = c.company_code
    and p.person_id    = s.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[repl_person]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[repl_person]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view repl_person as 
select * from person where (person_type_id is null or person_type_id != 'Person') and person_id not in
(
select person_id from aus_user
union
select person_id from policy_person
union
select person_id from coverage_person
union
select person_id from coverage_benefits_party
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[subgroup_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE VIEW [dbo].[subgroup_view]
AS
select 
    person.person_id
    , person.party_id
    , person.last_name
    , person.first_name
    , person.middle_name
    , person.birth_name
    , person.title
    , person.suffix
    , person.tax_id
    , person.tax_type_id
    , person.birth_date
    , person.sex
    , person.person_type_id
    , person.preferred_language_code
    , person.email_address
    , person.marital_status
    , person.client_id
    , person.alt_email_address
    , person.preferred_contact_mode
    , 'SUBGROUP' as class_type
    , person.field1
    , person.field2
    , person.field3
    , person.field4
    , person.field5
    , person.note_collection_id
    , subgroup.company_code
    , company.allow_aus_approval_flag
    , company.correspondence_directory
    , company.full_time_employee_count
    , company.percent_eligible_employees
    , company.percent_eligible_dependants
    , company.current_cobra_indicator
    , subgroup.expiration_date
    , company.region_code
    , company.tpa_code
    , company.carrier_code
    , subgroup.sub_group_code
    , subgroup.subgroup_id
    , subgroup.is_using_company_address
from company, subgroup, person
where 
        subgroup.company_code = company.company_code
    and person.person_id = subgroup.person_id


GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW rp_all_applicants as 
select
 	p.company_code,
 	(select assoc.association_name from
 		(select association_code, name as association_name from association where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
 		 union
 		 select c.company_code as association_code ,p.last_name as association_name from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')) assoc
 	 where p.association_code = assoc.association_code) as association_name,
 	icv.g_number,
 	i.client_id,
 	p.policy_number as case_number,
 	p.alternate_case_id as alternate_case_number,
 	p.receive_date,
 	p.service_associate_id,
 	i.last_name as applicant_last_name,
 	i.first_name as applicant_first_name,
    (select TOP 1 ltrim(rtrim(ps.last_name))as name from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_lastname,
    (select TOP 1 ltrim(rtrim(ps.first_name))as name from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_firstname,
 	i.tax_id as applicant_ssn,
 	(select TOP 1 ps.tax_id from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_ssn,
 	i.sex as gender,
 	i.applicant_status as applicant_status_code,
 	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
 	i.applicant_status_date,
 	icv.amount as amount_applied_for,
 	i.birth_date,
 	(select pa.country_state_id from person_address pa
 	 where pa.address_type_code = 'RESIDENCE'
 	 and pa.person_id = i.person_id) as residence_state_id,
 	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
 	 where (pa.address_type_code = 'RESIDENCE')
 	 and pa.person_id = i.person_id
 	 and cs.country_state_id = pa.country_state_id) as residence_state,
 	icv.final_action_date,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
 	) as final_action_by,
 	icv.reason_text as final_action_reason,
 	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = icv.coverage_status) and reason_text = icv.reason_text) as reason_code, 	icv.plan_code_id,
 	(select description from tl_plan_code where plan_code_id = icv.plan_code_id) as plan_code_description,
 	icv.approved_amount as issued_amount,
 	(SELECT TOP 1 effective_date FROM coverage_person_insured as cpi where cpi.policy_person_id = icv.policy_person_id) as effective_date,
 	(SELECT top 1 ltrim(rtrim(p.last_name)) from coverage_person_reinsurer as cpr 
 		inner join company as c on cpr.company_code = c.company_code 
 		inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id 
 		inner join policy_person as pp on pp.person_id = cp.person_id 
 		inner join person as p on p.person_id = c.person_id 
 		where pp.policy_person_id = icv.policy_person_id) as reinsurer_name,
 	(SELECT top 1 cpr.reinsurance_amount FROM coverage_person_reinsurer as cpr inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id inner join policy_person as pp on pp.person_id = cp.person_id where pp.policy_person_id = icv.policy_person_id) as reinsurance_amount,
 	icv.perm_table_rating as table_rating,
 	icv.perm_flat_extra_amount as flat_extra_amount,
 	ap.income,
 	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
 	ap.occupation,
 	p.underwriter_id,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.underwriter_id
 	) as underwriter_name,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.service_associate_id
 	) as service_associate_name,
 	(select
 		tm.team_name
 	 from
 		team tm
 	 where
 		tm.team_id = p.team_id
 	) as team_name,
 	p.team_id
 from
 	policy p,
 	insured i,
 	application_info_view ap,
 	insured_coverages_view icv
 where
 	i.policy_id = p.policy_id and
 	ap.policy_person_id = i.policy_person_id and
 	i.policy_person_id = icv.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
	    
DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	