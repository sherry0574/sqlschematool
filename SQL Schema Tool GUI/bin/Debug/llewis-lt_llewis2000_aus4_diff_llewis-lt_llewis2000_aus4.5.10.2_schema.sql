
-- DB Name: C:\Documents and Settings\llewis.VPI\My Documents\My Projects\SQL Schema Tool\SQL Schema Tool GUI\bin\Debug\llewis-lt_llewis2000_aus4_diff_llewis-lt_llewis2000_aus4.5.10.2_schema.sql
-- Output Date: 7/30/2007
-- Output Time: 6:06 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Diffgram SQL'
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[crm_notes_xref]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_gnumbers_notes_association_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[crm_notes_xref]  
	DROP CONSTRAINT FK_gnumbers_notes_association_plan
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[crm_notes_xref]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_gnumbers_notes_group_notes]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[crm_notes_xref]  
	DROP CONSTRAINT FK_gnumbers_notes_group_notes
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_note_collection]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_note_collection
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_person_note_collection]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[person]  
	DROP CONSTRAINT FK_person_note_collection
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1047_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1047_tl_count
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1059_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1059_tl_count
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REF_14466_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REF_14466_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REFERENCE_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REFERENCE_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_ppi_sci_REF_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_ppi_sci_REF_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_COUNT_REF_9601_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_country_state]  
	DROP CONSTRAINT FK_TL_COUNT_REF_9601_TL_COUNT
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_trust_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_trust_plan_id]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[tl_trust_plan]  
	DROP CONSTRAINT FK_trust_plan_id
END
GO
	
-- COUNT OF ALTERED COLUMNS IN TABLE [association_plan]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[association_plan] 
	ADD  [note_collection_id]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: association_plan does not exist in catalog!', 16, 1)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_association_plan] ON [dbo].[association_plan]([association_code], [plan_code_id], [g_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [billing_code]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[billing_code] 
	ADD  [alt_billing_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: billing_code does not exist in catalog!', 16, 1)
GO

IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company'), N'person_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company] ADD 
	CONSTRAINT [PK_COMPANY] PRIMARY KEY CLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_benefits]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[coverage_benefits] 
	ADD  [benefit_duration]  [int]  NULL ,
		 [reinsurance_flag]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_benefits does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_amendment]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_amendment]
		ALTER COLUMN  [amendment_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_amendment does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_beneficiary]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_beneficiary]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[coverage_person_beneficiary] 
	ADD  [benefit_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_beneficiary does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_code
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_impairment]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_impairment]
		ALTER COLUMN  [impairment_restriction_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_impairment does not exist in catalog!', 16, 1)
GO

IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_code] FOREIGN KEY 
	(	
		[impairment_restriction_code]
	) REFERENCES [dbo].[impairment_restriction] ( 
		[impairment_restriction_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: impairment_restriction_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_insured]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[coverage_person_insured] 
	ADD  [coverage_duration]  [int]  NULL ,
		 [do_not_offer_flag]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_insured does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[crm_notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[crm_notes]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[crm_notes]
	(   
		[note_id] [int]  NOT NULL,
		[topic] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[added_date] [datetime]  NOT NULL,
		[update_date] [datetime]  NULL,
		[review_date] [datetime]  NULL,
		[author] [int]  NOT NULL,
		[updated_by] [int]  NULL,
		[reviewed_by] [int]  NULL,
		[note_text] [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'crm_notes'), N'note_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[crm_notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[crm_notes] ADD 
	CONSTRAINT [PK_group_notes] PRIMARY KEY CLUSTERED 
	(
		[note_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[crm_notes_xref]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[crm_notes_xref]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[crm_notes_xref]
	(   
		[association_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[gnumber] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[note_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'crm_notes_xref'), N'association_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'crm_notes_xref'), N'plan_code_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'crm_notes_xref'), N'gnumber', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'crm_notes_xref'), N'note_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[crm_notes_xref]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[crm_notes_xref] ADD 
	CONSTRAINT [PK_gnumbers_notes] PRIMARY KEY CLUSTERED 
	(
		[association_code], [plan_code_id], [gnumber], [note_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): association_code, plan_code_id, gnumber, note_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form_question]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[form_question] 
	ADD  [required]  [int]  NULL ,
		 [style]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: form_question does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[generic_note]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[generic_note]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[generic_note]
	(   
		[note_id] [int]  NOT NULL,
		[note_collection_id] [int]  NOT NULL,
		[topic] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL,
		[added_date] [datetime]  NOT NULL,
		[update_date] [datetime]  NULL,
		[review_date] [datetime]  NULL,
		[author] [int]  NOT NULL,
		[updated_by] [int]  NULL,
		[reviewed_by] [int]  NULL,
		[note_text] [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_code
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[impairment_restriction] 
	DROP CONSTRAINT [PK_impairment_restriction]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [impairment_restriction]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[impairment_restriction]
		ALTER COLUMN  [impairment_restriction_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[impairment_restriction]
	ALTER COLUMN [impairment_restriction_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: impairment_restriction does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[impairment_restriction] ADD 
	CONSTRAINT [PK_impairment_restriction] PRIMARY KEY CLUSTERED 
	(
		[impairment_restriction_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): impairment_restriction_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_code] FOREIGN KEY 
	(	
		[impairment_restriction_code]
	) REFERENCES [dbo].[impairment_restriction] ( 
		[impairment_restriction_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: impairment_restriction_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [insured_application_info]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[insured_application_info] 
	ADD  [airmiles_flag]  [int]  NULL ,
		 [airmiles]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: insured_application_info does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [mib_code]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[mib_code] 
	ADD  [reported_by]  [varchar]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: mib_code does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[note_collection]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[note_collection]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[note_collection]
	(   
		[note_collection_id] [int]  NOT NULL,
		[type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'note_collection'), N'note_collection_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[note_collection]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[note_collection] ADD 
	CONSTRAINT [PK_note_collection] PRIMARY KEY CLUSTERED 
	(
		[note_collection_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_collection_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [person]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[person] 
	ADD  [note_collection_id]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: person does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy]: 9
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[policy] 
	ADD  [case_clock_flag]  [int]  NULL ,
		 [tia_indicator]  [int]  NULL ,
		 [bank_transaction_number]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [bank_name_on_account]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [sales_director_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [sales_director_name]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [bank_trans_num_is_valid_flag]  [int]  NULL ,
		 [bank_routing_num_is_valid_flag]  [int]  NULL ,
		 [marketing_key_is_valid_flag]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_person_insured]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[policy_person_insured] 
	ADD  [applicant_type_id]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_person_insured does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [related_policies]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[related_policies] 
	ADD  [decision]  [numeric]  NULL ,
		 [bill_status]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [reinsurance_amount]  [numeric]  NULL ,
		 [reinsurance_type]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,
		 [person_id]  [int]  NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: related_policies does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_request_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[requirement_request_event]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[requirement_request_event]
	(   
		[requirement_request_id] [int]  NOT NULL,
		[entry_datetime] [datetime]  NULL,
		[policy_id] [int]  NULL,
		[party_id] [int]  NULL,
		[insured_requirement_id] [int]  NULL,
		[provider_class] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[request_cmd] [int]  NULL,
		[request_thread_id] [int]  NULL,
		[hierarchy] [int]  NULL,
		[provider_service_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[vendor_code] [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[billing_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[document_service_provider] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[is_ordered_separate] [int]  NULL,
		[retry_datetime] [datetime]  NULL,
		[attempt_count] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[requirement_request_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_request_thread] ON [dbo].[requirement_request_event]([request_thread_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country'), N'country_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country] ADD 
	CONSTRAINT [PK_TL_COUNTRY] PRIMARY KEY CLUSTERED 
	(
		[country_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_trust_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[tl_trust_plan]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[tl_trust_plan]
	(   
		[trust_plan_id] [int]  NOT NULL,
		[trust_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_trust_plan'), N'trust_plan_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_trust_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_trust_plan] ADD 
	CONSTRAINT [PK_trust_plan] PRIMARY KEY CLUSTERED 
	(
		[trust_plan_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): trust_plan_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tl_trust_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_trust_plan] ON [dbo].[tl_trust_plan]([trust_code], [plan_code_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[webpost_retry_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[webpost_retry_event]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[webpost_retry_event]
	(   
		[webpost_retry_id] [int]  NOT NULL,
		[entry_datetime] [datetime]  NULL,
		[policy_id] [int]  NULL,
		[uri] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[soap_action] [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[param_data] [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		[retry_datetime] [datetime]  NULL,
		[retry_count] [int]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


-- add new FK Constraints to Table
IF object_id(N'crm_notes_xref') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'association_plan'), N'association_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[crm_notes_xref] ADD 
	CONSTRAINT [FK_gnumbers_notes_association_plan] FOREIGN KEY 
	(	
		[association_code],
		[plan_code_id],
		[gnumber]
	) REFERENCES [dbo].[association_plan] ( 
		[association_code],
		[plan_code_id],
		[g_number]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: crm_notes_xref, or the related column: association_code does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'crm_notes_xref') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'crm_notes'), N'note_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[crm_notes_xref] ADD 
	CONSTRAINT [FK_gnumbers_notes_group_notes] FOREIGN KEY 
	(	
		[note_id]
	) REFERENCES [dbo].[crm_notes] ( 
		[note_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: crm_notes_xref, or the related column: note_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'note_collection'), N'note_collection_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_note_collection] FOREIGN KEY 
	(	
		[note_collection_id]
	) REFERENCES [dbo].[note_collection] ( 
		[note_collection_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: note_collection_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'note_collection'), N'note_collection_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person] ADD 
	CONSTRAINT [FK_person_note_collection] FOREIGN KEY 
	(	
		[note_collection_id]
	) REFERENCES [dbo].[note_collection] ( 
		[note_collection_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person, or the related column: note_collection_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1047_tl_count] FOREIGN KEY 
	(	
		[residence_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1059_tl_count] FOREIGN KEY 
	(	
		[birth_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REF_14466_TL_COUNT] FOREIGN KEY 
	(	
		[drivers_license_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REFERENCE_TL_COUNT] FOREIGN KEY 
	(	
		[citizenship_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_ppi_sci_REF_TL_COUNT] FOREIGN KEY 
	(	
		[signed_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'tl_country_state') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [FK_TL_COUNT_REF_9601_TL_COUNT] FOREIGN KEY 
	(	
		[country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_country_state, or the related column: country_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'tl_trust_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_trust_plan] ADD 
	CONSTRAINT [FK_trust_plan_id] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_trust_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW agent_policy_proxy_view as
select
	pa.agent_number,
	p.policy_id,
	p.team_id,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	p.company_code,
	p.priority,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.case_group_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.alternate_case_id,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.policy_person_id,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	ppi.underwriting_amount as insured_underwriting_amount,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.tax_id as insured_tax_id,
	i.client_id as insured_client_id,
	p.receive_date,
	p.added_date,
	p.application_number,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	policy_person_agent pa,
	policy_person ppa,
	person i
where
	pa.policy_person_id = ppa.policy_person_id and
	ppa.policy_id = p.policy_id and
	p.policy_id = pp.policy_id and
	pp.policy_person_id = ppi.policy_person_id and
	pp.person_id = i.person_id and 
	pa.agent_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan_notes_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[association_plan_notes_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view association_plan_notes_view
as 
select 
	xref.association_code,
	xref.plan_code_id,
	xref.gnumber,
	ap.* 
from association_plan_notes as ap
inner join association_plan_notes_xref as xref on xref.note_id = ap.note_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW aus_user_view asselect	person.person_id,	person.party_id,	person.last_name,	person.first_name,	person.middle_name,	person.birth_name,	person.title,	person.suffix,	person.tax_id,	person.tax_type_id,	person.birth_date,	person.sex,	person.person_type_id,	person.preferred_language_code,	person.email_address,	person.marital_status,	person.client_id,	person.alt_email_address,	person.preferred_contact_mode,	person.class_type,	person.field1,	person.field2,	person.field3,	person.field4,	person.field5,	au.user_id,	au.login_id,	au.password,	au.is_active,	au.level_of_authority,	au.is_underwriter,	au.restrict_to_teams,	au.role_id,	au.is_service_associate,	au.job_title,	au.account_locked,	au.account_locked_date,	au.bad_login_attempt_count,	au.last_bad_login_attempt_date,	au.must_change_password,	au.last_password_change_date,	au.is_agent,	au.agent_number,	au.is_agency,	au.agency_number,	au.deleted,	au.use_single_sign_onfrom	person,	aus_user auwhere	au.person_id = person.person_id and	(au.deleted is null or au.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEWselect distinct 'en-us' as language_code, 'ppo_trust_state_' + lower(rtrim(t.company_code)) + '_' + lower(rtrim(pa.country_state_id)) as code_type, 	cast(p.person_id as char(30)) as code_id, p.last_name as code_value, cast(c.expiration_date as char(30)) as external_code 	from company c, person p, person_address pa, party_relation pr, company t where p.person_id = c.person_id and p.class_type = 'PPO' and 	pa.person_id = p.person_id and pr.parent_id = p.person_id and t.person_id = pr.person_id and c.expiration_date = (select min(expiration_date) 	from company, person_address where company_code = c.company_code and company.person_id = person_address.person_id and person_address.country_state_id = pa.country_state_id 	and expiration_date > CURRENT_TIMESTAMP) union 
select distinct 'en-us' as language_code, 'trust_state_' + lower(rtrim(c.company_code)) as code_type, pa.country_state_id as code_id, 	(select state_name from tl_country_state where country_state_id = pa.country_state_id) as code_value, '' as external_code 	from company c, person p, person_address pa, party_relation pr,company ppo where p.person_id = c.person_id and 	p.class_type = 'Trust' and pr.person_id = p.person_id and ppo.person_id = pr.parent_id and pa.person_id = ppo.person_id and	ppo.expiration_date > CURRENT_TIMESTAMP
union
select distinct 'en-us' as language_code, ('plan_gnum_' + SUBSTRING(ap.g_number,1,6) + '_' + SUBSTRING(ap.g_number,8,4)  + '_' + SUBSTRING(ap.g_number,13,4)) as code_type, 	ap.plan_code_id as code_id, pc.description as code_value, pc.line_of_business_code as external_code from association_plan ap, tl_plan_code pc	where len(ap.g_number) >= 16 and ap.plan_code_id = pc.plan_code_id union select 'en-us' as language_code, 'all_companies' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW dbo.company_viewASSELECT     dbo.person.*, dbo.company.company_code, dbo.company.allow_aus_approval_flag, dbo.company.correspondence_directory,                       dbo.company.full_time_employee_count, dbo.company.percent_eligible_employees, dbo.company.percent_eligible_dependants,                       dbo.company.current_cobra_indicator, dbo.company.expiration_date, dbo.company.region_code, dbo.company.tpa_code,                       dbo.company.carrier_codeFROM         dbo.person INNER JOIN                      dbo.company ON dbo.person.person_id = dbo.company.person_id
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[data_mart_lab_result]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[data_mart_lab_result]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view data_mart_lab_result as
select 
	p.policy_number,
	lh.lab_receive_date,
	lh.last_name,
	lh.first_name,
	lh.birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	insured_requirement ir,
	tl_ansi_code ac,
	policy_person pp,
	policy p
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id = ir.requirement_information_id and
	ir.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id
union
select 
	' ' as policy_number,
	lh.lab_receive_date,
	lh.last_name,
	lh.first_name,
	lh.birth_date,
	lh.sex as gender,
	lr.horl_code as ansi_code,
	ac.description as test_name,
	lr.result_value as test_result
from
	lab_header lh,
	lab_result lr,
	tl_ansi_code ac
where
	lh.requirement_information_id = lr.requirement_information_id and
	lr.horl_code = ac.horl_code and
	lh.requirement_information_id not in (select requirement_information_id from insured_requirement where requirement_information_id is not null)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW diary_activity_proxy_view as
select
	n.author as user_id,
	(select login_id from aus_user where user_id = n.author) as user_login_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.topic,
	p.team_id
from
	policy p,
	policy_person pp,
	person i,
	notes n
where
	n.diary_date is not NULL and
	(n.note_type='Req' or n.note_type='Refer' or n.note_type='Review') and
	p.policy_id = pp.policy_id and
	pp.person_id = i.person_id and
	pp.policy_person_id = n.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW form_question_proxy_view as
select
	grp.form_question_group_id,
	grp.form_code,
	grp.form_section_id,
	grp.display_sequence,
	grp.group_name,
	q.question_id,
	q.sequence_number,
	q.question_label,
	q.question_text,
	q.question_type,
	q.data_type,
	q.answer_set_name,
	q.min_size,
	q.max_size,
	q.external_question_number,
	q.alt_question_text,
	q.required,
	q.style
from
	form_question_group grp,
	form_question q
where
	grp.form_question_group_id = q.question_group_id and
	grp.form_code = q.form_code and
	grp.form_section_id = q.form_section_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[notes_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[notes_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE view notes_viewas select 	xref.note_collection_id,	xref.type_code,	notes.note_id,	notes.topic,	notes.added_date,	notes.update_date,	notes.review_date,	notes.author,	notes.updated_by,	notes.reviewed_by,	notes.note_textfrom note_collection as xref, generic_note as noteswhere xref.note_collection_id = notes.note_collection_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW policy_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	p.alternate_case_id,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW recent_cases_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	rc.user_id,
	(select login_id from aus_user where user_id = rc.user_id) as user_login_id,
	rc.date_time as access_date_time,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	aus_user_recent_files rc
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	rc.policy_id = p.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW referral_proxy_view as
select
	n.note_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.author as author_id,
	(select login_id from aus_user where user_id = n.author) as author_login_id,
	n.refer_to_user_id as referred_to_id,
	(select login_id from aus_user where user_id = n.refer_to_user_id) as referred_to_login_id,
	n.topic,
	p.team_id
from
	notes n,
	policy_person pp,
	policy p,
	person i
where
	n.refer_to_user_id > 0 and
	n.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id and
	pp.person_id = i.person_id and
	n.diary_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW requirement_proxy_view as
select
	t.requirement_name,
	t.alt_lang,
	t.alt_name,
	t.default_ordered_by,
	ir.requirement_code,
	t.requirement_type_id,
	t.requirement_category,
	ir.followup_date,
	ir.closed_date,
	ir.received_date,
	ir.ordered_date,
	ir.ordered_by,
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	ir.insured_requirement_id,
	ir.closed_disposition,
	ir.requirement_information_id,
	ir.last_followup_date,
	ir.provider,
	ir.evidence_type,
	pp.policy_person_id,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.birth_date,
	i.tax_id,
	p.team_id,
	ir.manual_or_automatic_entry,
	ir.new_business_until_closed,
	ir.provider_order_id,
	ir.create_comment
from
	policy p,
	policy_person pp,
	person i,
	insured_requirement ir,
	tl_requirement t
where
	p.policy_id = pp.policy_id AND
	pp.person_id = i.person_id AND
	pp.policy_person_id = ir.policy_person_id AND
	ir.requirement_code = t.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW review_message_proxy_view as
select
	p.policy_id,
	p.policy_number,
	rtrim(per.last_name) as applicant_last_name,
	rtrim(per.first_name) as applicant_first_name,
	rm.message_type,
	rm.origin_code,
	SUBSTRING(rm.message, 1, 50) as review_message_text,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	rm.user_role_type
from
	review_message rm,
	policy p,
	policy_person pp,
	person per
where
	p.policy_id = rm.policy_id and
	pp.policy_person_id = rm.policy_person_id and
	pp.person_id = per.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW reviewer_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = ppi.policy_person_id) as final_disposition_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	team t
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null and
	ppi.policy_person_id in (select policy_person_id from insured_requirement where policy_person_id = ppi.policy_person_id and requirement_code = 'TBRVWD' and (closed_disposition is null or closed_disposition in ('O', 'OR', 'H')))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW cases_to_issue_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	(select login_id from aus_user where user_id = p.underwriter_id) as underwriter_login_id,
	p.team_id,
	p.service_associate_id,
	(select login_id from aus_user where user_id = p.service_associate_id) as service_associate_login_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	ir.open_pi_req,
	rvw.unchk_rvw_count as uw_rm_count
from
	ins_open_post_issue_req_count ir,
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	unchecked_rvw_msg_count rvw
where
	ir.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id and
	p.policy_status_code = 'Closed' and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.applicant_status = 'AP' and
	rvw.policy_person_id =* pp.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW codes_view as
select 'en-us' as language_code, 'mib_country' as code_type, country_id as code_id, country_name as code_value, mib_country as external_code from tl_country
union
select lang.code_value as language_code, 'mib_country' as code_type, country_id as code_id, alt_country_name as code_value, mib_country as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'policy_type' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is not null
union
select 'en-us' as language_code, 'policy_type' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is null
union
select 'en-us' as language_code, 'billing_code' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is not null and g_number != ''
union
select 'en-us' as language_code, 'billing_code' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is null or g_number = ''
union
select 'en-us' as language_code, 'country' as code_type, country_id as code_id, country_name as code_value, country_code as external_code from tl_country
union
select lang.code_value as language_code, 'country' as code_type, country_id as code_id, alt_country_name as code_value, country_code as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'lab_request' as code_type, request_code as code_id, description as code_value, '' as external_code from tl_lab_request
union
select 'en-us' as language_code, 'lab_specimen' as code_type, lab_specimin_id as code_id, description as code_value, '' as external_code from tl_lab_specimen
union
select 'en-us' as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + description as code_value, line_of_business_code as external_code from tl_plan_code
union
select alt_lang as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + alt_description as code_value, line_of_business_code as external_code from tl_plan_code where alt_lang is not null and alt_lang <> 'en-us'
union
select 'en-us' as language_code, 'requirement_group' as code_type, cast(requirement_group_id as char(30)) as code_id, name as code_value, '' as external_code from tl_requirement_group
union
select 'en-us' as language_code, 'subaccount' as code_type, subaccount_code as code_id, full_name as code_value, '' as external_code from tl_subaccount
union
select 'en-us' as language_code, 'country_state' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state
union
select lang.code_value as language_code, 'country_state' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_usa' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'USA'
union
select lang.code_value as language_code, 'country_state_usa' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'USA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_canada' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'CANADA'
union
select lang.code_value as language_code, 'country_state_canada' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'CANADA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'ansi_code' as code_type, horl_code as code_id, description as code_value, ansi as external_code from tl_ansi_code
union
select 'en-us' as language_code, 'agency' as code_type, cast(agency.person_id as char(30)) as code_id, person.last_name as code_value, agency.agency_number as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'agent' as code_type, cast(agent.person_id as char(30)) as code_id, person.last_name as code_value, agent.agent_number as external_code from agent, person where person.person_id = agent.person_id
union
select 'en-us' as language_code, 'agent_name' as code_type, (rtrim(agent_number) + '_' + cast(person.person_id as char(12))) as code_id, person.last_name as code_value, person.first_name as external_code from agent, person where agent_number is not null and person.person_id = agent.person_id
union
select 'en-us' as language_code, 'company' as code_type, company.company_code as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select 'en-us' as language_code, 'company_name' as code_type, person.last_name as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select alt_lang as language_code, 'requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null
union
select 'en-us' as language_code, 'requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is null or alt_lang <> 'en-us'
union
select alt_lang as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null and requirement_category = 0
union
select 'en-us' as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where (alt_lang is null or alt_lang <> 'en-us') and requirement_category = 0
union
select 'en-us' as language_code, code_type as code_type, cast(code_id as char(30)) as code_id, code_value as code_value, external_code as external_code from tl_acord_codes where code_type <> 'AUS Gender Type'
union
select 'en-us' as language_code, code_type as code_type, cast(external_code as char(30)) as code_id, code_value as code_value, cast(code_id as char(30)) as external_code from tl_acord_codes where code_type = 'AUS Gender Type'
union
select distinct 'en-us' as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where (lang.code_value is not null and lang.code_value <> '')
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null and (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null
union
select distinct 'en-us' as language_code, 'final_action_reason' as code_type, reason_text as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason where reason_code is not null
union
select distinct lang.code_value as language_code, 'final_action_reason' as code_type, alt_reason_text  as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and reason_code is not null and alt_reason_text is not null
union
select language_code, code_type, code_id, code_value, external_code from tl_code where code_type <> 'CaseOne'
union
select language_code, code_type, upper(code_id), code_value, external_code from tl_code where code_type = 'CaseOne'
union
select 'en-us' as language_code, 'tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p
	where t.person_id = p.person_id and (t.expiration_date > CURRENT_TIMESTAMP or t.expiration_date is NULL)
union
select 'en-us' as language_code, 'line_of_business' as code_type, line_of_business_code as code_id, name as code_value, line_of_business_code as external_code from line_of_business
union
select 'en-us' as language_code, 'association_code' as code_type, association_code as code_id, association_code as code_value, cast(expiration_date as char(30)) as external_code from association
union
select 'en-us' as language_code, 'active_association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
	where (expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL) and association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'active_association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
	where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)
union
select 'en-us' as language_code, 'association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
	where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
	where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
	from association a, association_plan ap where (a.expiration_date > CURRENT_TIMESTAMP or a.expiration_date is NULL) and
	a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
	from company c, person p, association_plan ap where c.company_code = ap.association_code and 
	c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
	from association a, association_plan ap where a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
	from company c, person p, association_plan ap where c.company_code = ap.association_code and c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')
union
select distinct 'en-us' as language_code, 'active_plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
	pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
	from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' +  lower(rtrim(ltrim(ap.association_code))) + '_' +  lower(rtrim(lb.line_of_business_code) ) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
	rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
	from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
	ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'lifesuite_version' as code_type, 'version' as code_id, lifesuite_version as code_value, '' as external_code from lifesuite_version
union
select 'en-us' as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, impairment_text as code_value, '' as external_code from impairment_restriction
union
select lang.code_value as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, alt_impairment_text as code_value, '' as external_code from impairment_restriction, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_impairment_text is not null and rtrim(alt_impairment_text) <> ''
union
select 'en-us' as language_code, 'provider' as code_type, rtrim(provider) + '_' + rtrim(evidence_type) as code_id, us_vendor as code_value, non_us_vendor as external_code from provider
union
select distinct 'en-us' as language_code, 'g_number' as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code
	from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code and ap.g_number is not null
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '__' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code	from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select 'en-us' as language_code, 'agency_number' as code_type, agency.agency_number as code_id, agency.agency_number + ' - ' + person.last_name as code_value, '' as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'Answer Set ' + rtrim(tl_answer_set_answers.answer_set_name) as code_type, rtrim(cast(tl_answer_set_answers.sequence_number as char(30))) as code_id,
	rtrim(tl_answer_set_answers.answer_text) as code_value, rtrim(tl_answer_set_answers.alt_answer_text) as external_code from tl_answer_set_answers
union
select 'en-us' as language_code, 'rulebook' as code_type, cast(rulebook_id as char(30)) as code_id, rulebook_name, description as external_code from rulebook_proxy_view where type is null or type = 0
union
select 'en-us' as language_code, lower(code_type), code_id, code_value, external_code from rulebook_rate_class
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, external_code as code_id, code_id as code_value, '' as external_code from tl_code where code_type = 'source_info_codes' and external_code is not null and rtrim(external_code) <> ''
union
select 'en-us' as language_code, 'CedentCompany' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'CedentCompany'
union
select 'en-us' as language_code, 'CedentUnderwriter_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentUnderwriter'
union
select 'en-us' as language_code, 'CedentContact_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentContact'
union
select 'en-us' as language_code, 'Reinsurer' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'Reinsurer'
union
select 'en-us' as language_code, 'active_retro_company_ob' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroOBCompany'
union
select 'en-us' as language_code, 'active_retro_company_retro' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroCompany'
union
select 'en-us' as language_code, 'cedent_fax' as code_type, company_code as code_id, area_code + prefix + ph.suffix as code_value, extension as external_code from company c, person p, person_phone ph where c.person_id = p.person_id and p.person_id = ph.person_id and p.class_type = 'CedentCompany' and lower(ph.phone_type_code) = 'fax'
union
select 'en-us' as language_code, 'coverage_indicator' as code_type, indicator_code as code_id, description as code_value, external_code from tl_coverage_indicator_code
union
select 'en-us' as language_code, 'address_type' as code_type, address_type_code as code_id, external_code as code_value, external_code from tl_address_type
union
select 'en-us' as language_code, 'benefit_type' as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from tl_benefit_type
union
select 'en-us' as language_code, 'reinsurance_vendor' as code_type, reinsurance_vendor_code as code_id, name as code_value, external_code from reinsurance_vendor
union
select 'en-us' as language_code, 'coverage_type' as code_type, coverage_type as code_id, description as code_value, external_code from tl_coverage_type
union
select 'en-us' as language_code, 'death_benefit_option' as code_type, death_benefit_option_code as code_id, external_code as code_value, external_code from tl_death_benefit_option
union
select 'en-us' as language_code, 'death_benefit_option_description' as code_type, death_benefit_option_code as code_id, description as code_value, '' as external_code from tl_death_benefit_option_desc
union
select 'en-us' as language_code, 'extended_property' as code_type, property_name as code_id, description as code_value, '' as external_code from tl_extended_property
union
select 'en-us' as language_code, 'language' as code_type, language_code as code_id, description as code_value, external_code from tl_language
union
select 'en-us' as language_code, 'marital_status' as code_type, marital_status_code as code_id, description as code_value, external_code from tl_marital_status
union
select 'en-us' as language_code, 'person_type' as code_type, person_type_id as code_id, description as code_value, '' as external_code from tl_person_type
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'requirement_type' as code_type, requirement_type_id as code_id, description as code_value, '' as external_code from tl_requirement_type
union
select 'en-us' as language_code, 'tax_type' as code_type, tax_type_id as code_id, description as code_value, '' as external_code from tl_tax_type
union
select 'en-us' as language_code, 'tobacco_type' as code_type, tobacco_type_id as code_id, external_code as code_value, external_code from tl_tobacco_type
union
select 'en-us' as language_code, 'tobacco_use' as code_type, tobacco_use_id as code_id, external_code as code_value, external_code from tl_tobacco_use
union
select 'en-us' as language_code, 'address_type_description' as code_type, address_type_code as code_id, description as code_value, '' as external_code from tl_address_type_description
union
select 'en-us' as language_code, 'beneficiary_type' as code_type, beneficiary_type as code_id, description as code_value, '' as external_code from tl_beneficiary_type_desc
union
select 'en-us' as language_code, 'benefit_type_description' as code_type, cast(benefit_id as char(30)) as code_id, description as code_value, '' as external_code from tl_benefit_type_description
union
select 'en-us' as language_code, 'note_type' as code_type, note_type as code_id, description as code_value, '' as external_code from tl_note_type_description
union
select 'en-us' as language_code, 'phone_type' as code_type, phone_type_code as code_id, description as code_value, '' as external_code from tl_phone_type_description
union
select 'en-us' as language_code, 'policy_role' as code_type, code as code_id, description as code_value, '' as external_code from tl_policy_role_description
union
select 'en-us' as language_code, 'purpose_of_coverage' as code_type, purpose_of_coverage_id as code_id, description as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'tobacco_type_description' as code_type, tobacco_type_id as code_id, description as code_value, '' as external_code from tl_tobacco_type_description
union
select 'en-us' as language_code, 'tobacco_use_description' as code_type, tobacco_use_id as code_id, description as code_value, '' as external_code from tl_tobacco_use_description
union
select 'en-us' as language_code, 'family_history_relationship' as code_type, famhist_relationship_code as code_id, famhist_relationship_code as code_value, famhist_relationship_code as external_code from tl_family_history_relationship
union
select 'en-us' as language_code, 'occupation' as code_type, occupation as code_id, occupation as code_value, occupation_code as external_code from occupation
union
select 'en-us' as language_code, 'source_info_codes' as code_type, source_info as code_id, source_description as code_value, partner_id as external_code from tl_source_info
union
select 'en-us' as language_code, 'distributor_codes' as code_type, distributor_code as code_id, distributor_description as code_value, '' as external_code from tl_distributor_codes
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, partner_id as code_id, source_info as code_value, '' as external_code from tl_source_info where partner_id is not null and rtrim(partner_id) <> ''
union
select 'en-us' as language_code, 'PurposeOfCoverage' as code_type, lower(description) as code_id, purpose_of_coverage_id as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'PolicyStatus' as code_type, policy_status_code as code_id, description as code_value, '' as external_code from tl_policy_status_description
union
select distinct 'en-us' as language_code, 'table_rating_reason' as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where reason_status = 'Table Rating'
union
select distinct lang.code_value as language_code, 'table_rating_reason' as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where reason_status = 'Table Rating'and lang.code_value is not null and alt_reason_text is not null
union
select 'en-us' as language_code, 'tpa_name' as code_type, t.tpa_code as code_id, p.last_name as code_value, t.tpa_short_name as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where  aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'aus_users_basic' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is null or aus_user.is_agent = 0) and (aus_user.is_agency is null or aus_user.is_agency = 0)
union
select 'en-us' as language_code, 'active_underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'active_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
	aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'underwriter_and_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	rtrim(aus_user.login_id) as external_code from aus_user, person where ((aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) or
	(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0)) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'active_team' as code_type, cast(team_id as char(30)) as code_id, team_name as code_value, '' as external_code from team where (is_active is not null and is_active <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (D)' as code_value, '' as external_code from team where (deleted is not null and deleted <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (I)' as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is null or is_active = 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is not null and is_active <> 0)
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null
union
select language_code, 'benefitperiod_' +  lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(g_number))) + '_' + lower(rtrim(ltrim(plan_code_id)))  as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null
union
select distinct 'en-us' as language_code, 'g_number_' + lower(rtrim(association_code)) as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan where g_number is not null
union
select 'en-us' as language_code, 'active_login_cm' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'active_login_uw' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
	cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
	(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0) and aus_user.person_id = person.person_id
union
select language_code, 'issue_request_' + code_type as code_type, code_id, code_value, external_code from tl_code where code_type in (select code_id from tl_code where language_code = 'en-us' and code_type = 'AmendmentType')
union
select 'en-us' as language_code, 'employer' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Employer')
union
select 'en-us' as language_code, 'agent_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agent_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is not null and aus_user.is_agent <> 0)
union
select 'en-us' as language_code, 'agency_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agency_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agency is not null and aus_user.is_agency <> 0)
union
select language_code, lower('plan_' + rtrim(option_type) + '_' + rtrim(plan_code_id)) as code_type, cast(sequence_number as char(30)) as code_id, description as code_value, '' as external_code from tl_plan_option
union
select 'en-us' as language_code, 'trust' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Trust')
union
select 'en-us' as language_code, 'ppo' as code_type, cast(company.person_id as char(30)) as code_id, person.last_name as code_value, cast(company.expiration_date as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'PPO')
union
select 'en-us' as language_code, 'all_companies' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW rp_admin_all_applicants as
select
	p.company_code,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	p.receive_date,
	p.service_associate_id,
	i.last_name as applicant_last_name,
	i.first_name as applicant_first_name,
	i.sex as gender,
	ppi.applicant_status as applicant_status_code,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = ppi.applicant_status) as applicant_status,
	ppi.applicant_status_date,
	pc.amount as amount_applied_for,
	i.birth_date,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line3,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_city,
	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_postal_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_suffix,
	i.email_address,
	cpi.final_action_date,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = cpi.final_action_by_id
	) as final_action_by,
	cpi.reason_text as final_action_reason,
	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = cpi.coverage_status) and reason_text = cpi.reason_text) as reason_code,
	assoc.association_name,
	pc.plan_code_id,
	(select description from tl_plan_code where plan_code_id = pc.plan_code_id) as plan_code_description,
	cpi.g_number,
	pc.planned_premium,
	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
	cpi.web_quoted_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_quoted) as applied_for_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_approved) as system_recommended_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_issued) as rate_class_approved,
	pc.approved_amount as issued_amount,
	pc.perm_table_rating as table_rating,
	pc.perm_flat_extra_amount as flat_extra_amount,
	p.cwa_amount,
	ap.income,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.occupation,
	p.lead_number_id as aggregator_lead_number,
	p.source_info,
	(select partner_id from tl_source_info where source_info = p.source_info) as partner_id,
	p.distributor_code,
	p.underwriter_id,
	(select
		rtrim(uw.last_name) + ', ' + rtrim(uw.first_name)
	 from
	 	aus_user_view uw
	 where
		uw.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		rtrim(sa.last_name) + ', ' + rtrim(sa.first_name)
	 from
	 	aus_user_view sa
	 where
		sa.user_id = p.service_associate_id
	) as service_associate_name,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
	p.team_id
from
	policy p,
	policy_person_insured ppi,
	person i,
	insured_application_info ap,
	coverage_person_insured cpi,
	coverage_person cp,
	policy_coverage pc,
	(select association_code, name as association_name from association
		 union
		 select c.company_code as association_code, per.last_name as association_name from company c, person per where c.person_id = per.person_id and (per.class_type = 'ASSN' or per.class_type = 'GRP')) assoc 
where
	cpi.coverage_person_id = cp.coverage_person_id and
	cp.policy_coverage_id = pc.policy_coverage_id and
	cp.person_id = i.person_id and
	pc.policy_id = p.policy_id and
	ppi.policy_person_id = cpi.policy_person_id and
	ap.policy_person_id = ppi.policy_person_id and
	assoc.association_code =* p.association_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW rp_all_applicants as
select
	p.company_code,
	(select assoc.association_name from
		(select association_code, name as association_name from association where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
		 union
		 select c.company_code as association_code ,p.last_name as association_name from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')) assoc
	 where p.association_code = assoc.association_code) as association_name,
	icv.g_number,
	i.client_id,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	p.receive_date,
	p.service_associate_id,
	i.last_name as applicant_last_name,
	i.first_name as applicant_first_name,
	i.tax_id as applicant_ssn,
	(select TOP 1 ps.tax_id from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_ssn,
	i.sex as gender,
	i.applicant_status as applicant_status_code,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
	i.applicant_status_date,
	icv.amount as amount_applied_for,
	i.birth_date,
	(select pa.country_state_id from person_address pa
	 where pa.address_type_code = 'RESIDENCE'
	 and pa.person_id = i.person_id) as residence_state_id,
	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state,
	icv.final_action_date,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
	) as final_action_by,
	icv.reason_text as final_action_reason,
	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = icv.coverage_status) and reason_text = icv.reason_text) as reason_code,
	icv.plan_code_id,
	(select description from tl_plan_code where plan_code_id = icv.plan_code_id) as plan_code_description,
-- 	icv.planned_premium,
-- 	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
-- 	icv.web_quoted_class,
-- 	(select
-- 		description
-- 	 from
-- 		ta_rate_table_class
-- 	 where
-- 		rulebook_id =
-- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_quoted) as applied_for_rate_class,
-- 	(select
-- 		description
-- 	 from
-- 		ta_rate_table_class
-- 	 where
-- 		rulebook_id =
-- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_approved) as system_recommended_rate_class,
-- 	(select
-- 		description
-- 	 from
-- 		ta_rate_table_class
-- 	 where
-- 		rulebook_id =
-- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_issued) as rate_class_approved,
	icv.approved_amount as issued_amount,
	(SELECT TOP 1 effective_date FROM coverage_person_insured as cpi where cpi.policy_person_id = icv.policy_person_id) as effective_date,
	(SELECT top 1 ltrim(rtrim(p.last_name)) from coverage_person_reinsurer as cpr 
		inner join company as c on cpr.company_code = c.company_code 
		inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id 
		inner join policy_person as pp on pp.person_id = cp.person_id 
		inner join person as p on p.person_id = c.person_id 
		where pp.policy_person_id = icv.policy_person_id) as reinsurer_name,
	(SELECT top 1 cpr.reinsurance_amount FROM coverage_person_reinsurer as cpr inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id inner join policy_person as pp on pp.person_id = cp.person_id where pp.policy_person_id = icv.policy_person_id) as reinsurance_amount,
	icv.perm_table_rating as table_rating,
	icv.perm_flat_extra_amount as flat_extra_amount,
-- 	p.cwa_amount,
	ap.income,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.occupation,
-- 	p.lead_number_id as aggregator_lead_number,
-- 	p.source_info,
-- 	p.distributor_code,
	p.underwriter_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as service_associate_name,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
-- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
-- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
-- 	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
	p.team_id
from
	policy p,
	insured i,
	application_info_view ap,
	insured_coverages_view icv
where
	i.policy_id = p.policy_id and
	ap.policy_person_id = i.policy_person_id and
	i.policy_person_id = icv.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW data_mart_applicant as
select
	p.policy_id as case_id,
	p.company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = p.company_code) as company_name,
	p.policy_number as case_number,
	p.application_number,
	p.issue_date,
	p.reason_text as final_action_reason,
	p.underwriter_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.underwriter_id
	) as underwriter_name,
	p.team_id,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	p.application_date,
	p.agent_signed_date,
	p.policy_status_code as case_status,
	p.policy_status_date as case_status_date,
	p.receive_date,
	p.payment_mode_code,
	(select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	 union
	 select
		pmod.code_value
	 from
		tl_acord_codes pmod
	 where
		pmod.code_type = 'PaymentMode' and
		pmod.code_id = p.payment_mode_code
	) as payment_mode_name,
	p.payment_method_code,
	(select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	 union
	 select
		pmeth.code_value
	 from
		tl_acord_codes pmeth
	 where
		pmeth.code_type = 'PaymentMethod' and
		pmeth.code_id = p.payment_method_code
	) as payment_method_name,
	p.last_underwrite_date,
	p.allow_aus_approval,
	(select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = (select top 1 final_action_by_id from insured_coverages_view where policy_person_id = i.policy_person_id)
	) as final_action_by_name,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_date,
	(select top 1 final_action_note from insured_coverages_view where policy_person_id = i.policy_person_id) as final_action_note,
	(select top 1 reason_text from insured_coverages_view where policy_person_id = i.policy_person_id) as reason_text,
	p.reinsurance_indicator,
	p.reinsurance_vendor_code,
	(select
		riv.name
	 from
		reinsurance_vendor riv
	 where
		riv.reinsurance_vendor_code = p.reinsurance_vendor_code
	) as reinsurance_vendor_name,
	p.updated_by as case_updated_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.updated_by
	) as case_updated_by_name,
	p.updated_date as case_updated_date,
	p.added_by case_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.added_by
	) as case_added_by_name,
	p.added_date as case_added_date,
	p.cwa_amount,
	p.cwa_date,
	p.priority,
	p.bank_rounting_number as bank_routing_number,
	p.bank_account_number,
	p.credit_card_type,
	(select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	 union
	 select
		credit.code_value
	 from
		tl_acord_codes credit
	 where
		credit.code_type = 'Credit Card Type' and
		credit.code_id = p.credit_card_type
	) as credit_card_type_name,
	p.credit_card_number,
	p.credit_card_expiration_year,
	p.credit_card_expiration_month,
	p.list_bill_location,
	p.list_bill_employee_id,
	p.bill_day,
	p.marketing_code,
	p.mode_premium,
	p.requested_issue_date,
	p.case_group_id as case_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = p.policy_id and name = 'TPAFamilyId'
	) as tpa_family_id,
	(select
		value
	 from
		object_property
	 where
		object_id = i.policy_person_id and name = 'CurrentEpsilonKey'
	) as current_epsilon_dbkey,
	p.service_associate_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = p.service_associate_id
	) as service_associate_name,
	p.association_code,
	(select
		assoc.name
	 from
		association assoc
	 where
		assoc.association_code = p.association_code
	) as association_name,
	(select
		tv.tpa_short_name
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_code,
	(select
		ltrim(rtrim(tv.last_name))
	 from
	 	tpa_view tv
	 where
	 	tv.tpa_code = p.tpa_code
	) as tpa_name,
	p.amex_account,
	p.performed_jet_issue_flag,
	p.source_info,
	(select source_description from tl_source_info where source_info = p.source_info
	 union
	 select code_value from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as source_description,
	(select partner_id from tl_source_info where source_info = p.source_info
	 union
	 select external_code from tl_code where code_type = 'source_info' and code_id = p.source_info and language_code = 'en-us') as partner_id,
	p.lead_number_id,
	p.distributor_code,
	(select distributor_description from tl_distributor_codes where distributor_code = p.distributor_code
	 union
	 select code_value from tl_code where code_type = 'distributor_codes' and code_id = p.distributor_code and language_code = 'en-us') as distributor_description,
	p.alternate_case_id,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number is not null) as agent_number,
	(select top 1 ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)) from person ps, agent_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id and av.agent_number is not null) as agent_name,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as agency_number,
	(select top 1 routing_number from agency_view where policy_id = p.policy_id) as routing_number,
	(select top 1 rtrim(ps.last_name) from person ps, agency_view av where av.person_id = ps.person_id and av.policy_id = p.policy_id) as agency_name,
	p.cedent_policy_number,
	p.cedent_company_code,
	(select cpv.last_name from company_view cpv where cpv.company_code = p.cedent_company_code) as cedent_company_name,
	p.cedent_fax_number,
	p.cedent_underwriter_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps
	 where
		p.cedent_underwriter_id = ps.person_id
	) as cedent_underwriter_name,
	p.cedent_contact_id,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps
	 where
		p.cedent_contact_id = ps.person_id
	) as cedent_contact_name,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	(select code_value from tl_code where code_type = 'currency_code' and code_id = p.currency_code and language_code = 'en-us') as currency_description,
	p.preferred_language_code,
	(select description from tl_language where language_code = p.preferred_language_code
	 union
	 select code_value from tl_code where code_type = 'language' and code_id = p.preferred_language_code and language_code = 'en-us') as preferred_language_description,
	i.person_id,
	i.party_id,
	i.policy_person_id as applicant_id,
	rtrim(i.last_name) + ', ' + rtrim(i.first_name) as full_name,
	i.last_name,
	i.first_name,
	i.middle_name,
	i.title,
	i.suffix,
	i.tax_id,
	i.tax_type_id,
	i.birth_date,
	(cast(CURRENT_TIMESTAMP - i.birth_date as int)/365) as age,
	i.sex,
	i.email_address,
	i.alt_email_address,
	i.marital_status,
	i.client_id,
	i.signed_state_id,
	(select
		ssn.state_name
	 from
		tl_country_state ssn
	 where
		ssn.country_state_id = i.signed_state_id
	) as signed_state_name,
	i.underwriting_amount,
	i.issue_age,
	i.primary_insured_flag,
	i.aviation_exclusion,
	i.add_uw_amt,
	(select code_value from tl_code where code_type = 'applicant_status' and code_id = i.applicant_status and language_code = 'en-us') as applicant_status,
	i.applicant_status as applicant_status_short,
	i.applicant_status_date,
	i.is_member,
	i.allow_auto_approval,
	i.adverse_history,
	i.und_allow_auto_approval,
	i.und_allow_jet_issue,
	i.und_allow_auto_ordering,
	i.added_date as applicant_added_date,
	i.added_by as applicant_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = i.added_by
	) as applicant_added_by_name,
	i.reopen_date,
	i.retro_type,
	i.aviation_flag,
	i.entertainer_flag,
	i.sports_flag,
	i.foreign_flag,
	i.additional_in_force,
	i.relationship_to_insured as relationship_to_insured_id,
	(select code_value from tl_acord_codes where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured
	 union
	 select code_value from tl_code where code_type = 'VPI Relation RoleCode' and cast(code_id as char(30)) = i.relationship_to_insured and language_code = 'en-us') as relationship_to_insured,
	(select top 1 plan_code_id from insured_coverages_view where policy_person_id = i.policy_person_id) as plan_code_id,
	(select top 1 planned_premium from insured_coverages_view where policy_person_id = i.policy_person_id) as planned_premium,
	(select top 1 web_quoted_class from insured_coverages_view where policy_person_id = i.policy_person_id) as web_quoted_class,
	(select top 1 rate_class_quoted from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_quoted,
	(select top 1 rate_class_approved from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_approved,
	(select top 1 rate_class_issued from insured_coverages_view where policy_person_id = i.policy_person_id) as rate_class_issued,
	(select top 1 amount from insured_coverages_view where policy_person_id = i.policy_person_id) as amount,
	(select top 1 perm_table_rating from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_table_rating,
	(select top 1 perm_flat_extra_amount from insured_coverages_view where policy_person_id = i.policy_person_id) as perm_flat_extra_amount,
	dma.residence_city,
	dma.residence_postal_code,
	dma.residence_address_line1,
	dma.residence_address_line2,
	dma.residence_address_line3,
	dma.residence_country_code,
	dma.residence_state_name,
	dma.residence_state_code,
	dma.residence_country_name,
	dma.business_city,
	dma.business_postal_code,
	dma.business_address_line1,
	dma.business_address_line2,
	dma.business_address_line3,
	dma.business_country_code,
	dma.business_state_name,
	dma.business_state_code,
	dma.business_country_name,
	dmp.home_phone_country_code,
	dmp.home_phone_area_code,
	dmp.home_phone_prefix,
	dmp.home_phone_suffix,
	dmp.home_phone_extension,
	dmp.home_phone_pin,
	dmp.work_phone_country_code,
	dmp.work_phone_area_code,
	dmp.work_phone_prefix,
	dmp.work_phone_suffix,
	dmp.work_phone_extension,
	dmp.work_phone_pin,
	dmp.fax_country_code,
	dmp.fax_area_code,
	dmp.fax_prefix,
	dmp.fax_suffix,
	dmp.fax_extension,
	dmp.fax_pin,
	ap.create_date,
	ap.expiration_date,
	ap.manual_entry_flag,
	ap.income,
	ap.net_worth,
	ap.total_inforce,
	ap.replacement_amount,
	ap.replacement_date,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.birth_country,
	(select
		bc.country_name
	 from
		tl_country bc
	 where
		bc.country_id = ap.birth_country
	) as birth_country_name,
	ap.birth_state,
	(select
		bsn.state_name
	 from
		tl_country_state bsn
	 where
		bsn.country_state_id = ap.birth_state
	) as birth_state_name,
	ap.drivers_license_number,
	ap.drivers_license_country_id,
	(select
		drc.country_name
	 from
		tl_country drc
	 where
		drc.country_id = ap.drivers_license_country_id
	) as drivers_license_country_name,
	ap.drivers_license_state,
	(select
		drsn.state_name
	 from
		tl_country_state drsn
	 where
		drsn.country_state_id = ap.drivers_license_state
	) as drivers_license_state_name,
	ap.bankruptcy_disposition,
	ap.bankruptcy_discharge_date,
	ap.occupation,
	ap.height_inches,
	ap.weight_pounds,
	ap.weght_previous_year,
	ap.reason_for_weight_change,
	ap.waist_inches,
	ap.last_md_visit,
	ap.last_md_result,
	ap.added_by as application_added_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.added_by
	) as application_added_by_name,
	ap.added_date as application_added_date,
	ap.updated_by as application_updated_by,
	(select
		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = ap.updated_by
	) as application_updated_by_name,
	ap.update_date as application_updated_date,
	ap.beneficiary_type,
	ap.medical_authorization_flag,
	ap.citizenship_country_id,
	(select
		cc.country_name
	 from
		tl_country cc
	 where
		cc.country_id = ap.citizenship_country_id
	) as citizenship_country_name,
	ap.doctor_name,
	ap.doctor_addr,
	ap.doctor_city,
	ap.doctor_state,
	(select
		docsn.state_name
	 from
		tl_country_state docsn
	 where
		docsn.country_state_id = ap.doctor_state
	) as doctor_state_name,
	ap.doctor_zip,
	ap.last_visit_date,
	ap.visit_reason,
	ap.findings,
	ap.treatments,
	ap.still_under_treatment_flag,
	ap.prior_consultations_flag,
	ap.prior_consultation_detail,
	ap.unearned_income,
	ap.employer,
	ap.years_at_employer,
	ap.employer_address,
	ap.income_prev_year,
	ap.visa_type,
	ap.job_duties,
	ap.hippa_authorization_flag,
	ap.monthly_expense,
	ap.last_blood_profile_date,
	ap.best_day_to_call,
	ap.best_time_to_call,
	ap.systolic_bp_reading,
	ap.diastolic_bp_reading,
	ap.cholesterol_reading,
	ap.issue_state,
	ap.business_income,
	ap.business_net_worth,
	ap.book_value,
	ap.market_value,
	ap.inspection_income,
	ap.inspection_net_worth,
	ap.inspection_business_income,
	ap.inspection_business_net_worth,
	ap.inspection_book_value,
	ap.inspection_market_value,
	ap.statement_income,
	ap.statement_net_worth,
	ap.statement_business_income,
	ap.statement_business_net_worth,
	ap.statement_book_value,
	ap.statement_market_value,
	ap.other_income,
	ap.other_net_worth,
	ap.other_business_income,
	ap.other_business_net_worth,
	ap.other_book_value,
	ap.other_market_value
from
	policy p,
	insured i,
	application_info_view ap,
	data_mart_address dma,
	data_mart_phone dmp
where
	i.policy_id = p.policy_id and
	ap.policy_person_id = i.policy_person_id and
	dma.person_id = i.person_id and
	dmp.person_id = i.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
	    
DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	