
-- Diff Name: Compare results for Source DB XML snapshot: llewis-lt_llewis2000_UHCTest_SCHEMA.xml,
-- with Target DB XML snapshot: llewis-lt_sqlexpress_Aetna_SCHEMA.xml.
-- Results are the SQL changes necessary to match
-- the Target DB schema to the Source DB schema.
-- Output Date: 8/19/2007
-- Output Time: 8:27 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Diffgram SQL'
	
-- drop original FK Constraints on table, if they exists
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[medical_conditions]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_medical_conditions_insured_application_info1]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
	ALTER TABLE [dbo].[medical_conditions]  
	DROP CONSTRAINT FK_medical_conditions_insured_application_info1
END	
GO
		
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_note_collection]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_note_collection
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_person_note_collection]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[person]  
	DROP CONSTRAINT FK_person_note_collection
END
GO
	
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_subgroup_person]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[subgroup]  
	DROP CONSTRAINT FK_subgroup_person
END
GO
	
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[admin_system_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[admin_system_message] 
	DROP CONSTRAINT [PK_admin_system_message]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [admin_system_message]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[admin_system_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[admin_system_message]
		ALTER COLUMN  [admin_system]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[admin_system_message]
		ALTER COLUMN  [policy_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[admin_system_message]
		ALTER COLUMN  [severity]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[admin_system_message]
		ALTER COLUMN  [message_text]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: admin_system_message does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'admin_system_message'), N'admin_system_message_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[admin_system_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[admin_system_message] ADD 
	CONSTRAINT [PK_admin_system_message] PRIMARY KEY CLUSTERED 
	(
		[admin_system_message_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): admin_system_message_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [agency].[ix_agency_num] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [agency]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[agency]
	DROP COLUMN  [signature] 
	ALTER TABLE [dbo].[agency]
	DROP COLUMN  [signature_date] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[agency]
		ALTER COLUMN  [agency_number]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[agency]
		ALTER COLUMN  [routing_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: agency does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agency]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_agency_num] ON [dbo].[agency]([agency_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [agent].[ix_agent_number] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [agent]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[agent]
		ALTER COLUMN  [agent_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[agent]
		ALTER COLUMN  [routing_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[agent]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[agent]
		ALTER COLUMN  [descriptor]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: agent does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_agent_number] ON [dbo].[agent]([agent_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[association] 
	DROP CONSTRAINT [PK_association]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [association]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[association]
		ALTER COLUMN  [association_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[association]
		ALTER COLUMN  [name]  [char]  (120)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[association]
	ALTER COLUMN [association_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: association does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'association'), N'association_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[association]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association] ADD 
	CONSTRAINT [PK_association] PRIMARY KEY CLUSTERED 
	(
		[association_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): association_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_tpa
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_plan
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [association_plan]: 9
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[association_plan] 
	ADD  [note_collection_id]  [int]  NULL ,
		 [company_group_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		 [sub_group_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		 [class_group_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[association_plan]
		ALTER COLUMN  [association_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[association_plan]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[association_plan]
		ALTER COLUMN  [tpa_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[association_plan]
		ALTER COLUMN  [g_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[association_plan]
		ALTER COLUMN  [billing_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[association_plan]
	ALTER COLUMN [association_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[association_plan]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: association_plan does not exist in catalog!', 16, 1)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_association_plan] ON [dbo].[association_plan]([association_code], [plan_code_id], [g_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: tpa_code does not exist', 16, 1)
GO
		
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_event]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_event]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_event]
		ALTER COLUMN  [param_data]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_event does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_sec_priv_sec_subsys]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_security_privilege]  
	DROP CONSTRAINT FK_sec_priv_sec_subsys
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[aus_security_privilege] 
	DROP CONSTRAINT [IX_aus_security_privilege]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_security_privilege]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_security_privilege]
		ALTER COLUMN  [name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[aus_security_privilege]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_security_privilege]
		ALTER COLUMN  [subsystem_name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[aus_security_privilege]
	ALTER COLUMN [name] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[aus_security_privilege]
	ALTER COLUMN [subsystem_name] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_security_privilege does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_privilege'), N'subsystem_name', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_privilege'), N'name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [IX_aus_security_privilege] UNIQUE NONCLUSTERED 
	(
		[subsystem_name], [name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subsystem_name, name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'aus_security_privilege') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_subsystem'), N'subsystem_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [FK_sec_priv_sec_subsys] FOREIGN KEY 
	(	
		[subsystem_name]
	) REFERENCES [dbo].[aus_security_subsystem] ( 
		[subsystem_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_security_privilege, or the related column: subsystem_name does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_security_roles]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_roles]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_security_roles]
		ALTER COLUMN  [name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_security_roles]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_security_roles does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_privilege]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_sec_priv_sec_subsys]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_security_privilege]  
	DROP CONSTRAINT FK_sec_priv_sec_subsys
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_subsystem]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[aus_security_subsystem] 
	DROP CONSTRAINT [PK_aus_security_subsystem]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_security_subsystem]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_security_subsystem]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_security_subsystem]
		ALTER COLUMN  [subsystem_name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[aus_security_subsystem]
		ALTER COLUMN  [subsystem_description]  [char]  (80)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[aus_security_subsystem]
	ALTER COLUMN [subsystem_name] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_security_subsystem does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_security_subsystem'), N'subsystem_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[aus_security_subsystem]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_security_subsystem] ADD 
	CONSTRAINT [PK_aus_security_subsystem] PRIMARY KEY CLUSTERED 
	(
		[subsystem_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subsystem_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'aus_security_privilege') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'aus_security_subsystem'), N'subsystem_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_security_privilege] ADD 
	CONSTRAINT [FK_sec_priv_sec_subsys] FOREIGN KEY 
	(	
		[subsystem_name]
	) REFERENCES [dbo].[aus_security_subsystem] ( 
		[subsystem_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_security_privilege, or the related column: subsystem_name does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [aus_user].[ix_user_login] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_user]: 6
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [login_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [password]  [char]  (16)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [email_address]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [job_title]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [agent_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[aus_user]
		ALTER COLUMN  [agency_number]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_user does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[aus_user]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [ix_user_login] ON [dbo].[aus_user]([login_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_aus_user_limits_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_user_limits]  
	DROP CONSTRAINT FK_aus_user_limits_lob
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[aus_user_limits] 
	DROP CONSTRAINT [PK_aus_user_limits]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_user_limits]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_user_limits]
		ALTER COLUMN  [line_of_business_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[aus_user_limits]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_user_limits does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user_limits'), N'user_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'aus_user_limits'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [PK_aus_user_limits] PRIMARY KEY CLUSTERED 
	(
		[user_id], [line_of_business_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): user_id, line_of_business_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'aus_user_limits') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [FK_aus_user_limits_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_limits, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [aus_user_recent_files]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_recent_files]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[aus_user_recent_files]
		ALTER COLUMN  [last_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: aus_user_recent_files does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_benefit_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[benefit_period]  
	DROP CONSTRAINT FK_benefit_period_plan
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [benefit_period].[IX_benefit_period] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [benefit_period]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[benefit_period]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[benefit_period]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[benefit_period]
		ALTER COLUMN  [period_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[benefit_period]
		ALTER COLUMN  [g_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[benefit_period]
		ALTER COLUMN  [period]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[benefit_period]
	ALTER COLUMN [period_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: benefit_period does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_benefit_period] ON [dbo].[benefit_period]([language_code], [plan_code_id], [period_id], [g_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'benefit_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[benefit_period] ADD 
	CONSTRAINT [FK_benefit_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: benefit_period, or the related column: plan_code_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_tpa
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_line_of_bus]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_line_of_bus
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[billing_code] 
	DROP CONSTRAINT [IX_billing_code]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [billing_code]: 6
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [tpa_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [line_of_business_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [us_billing_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [non_us_billing_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [g_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[billing_code]
		ALTER COLUMN  [policy_type]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [tpa_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[billing_code]
	ALTER COLUMN [g_number] [char]  (15) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: billing_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'tpa_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'billing_code'), N'g_number', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [IX_billing_code] UNIQUE NONCLUSTERED 
	(
		[tpa_code], [line_of_business_code], [g_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tpa_code, line_of_business_code, g_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: tpa_code does not exist', 16, 1)
GO
		
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_line_of_bus] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [company].[ix_company_code] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [company]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[company] 
	ADD  [region_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		 [tpa_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		 [carrier_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[company]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[company]
		ALTER COLUMN  [correspondence_directory]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[company]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: company does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_company_code] ON [dbo].[company]([company_code]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_COMPANY__REF_17407_COMPANY_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[company_mib_entry]  
	DROP CONSTRAINT FK_COMPANY__REF_17407_COMPANY_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[company_mib] 
	DROP CONSTRAINT [PK_COMPANY_MIB]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [company_mib]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[company_mib]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[company_mib]
		ALTER COLUMN  [mib_company_code]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[company_mib]
		ALTER COLUMN  [destination_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[company_mib]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: company_mib does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib'), N'company_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[company_mib]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company_mib] ADD 
	CONSTRAINT [PK_COMPANY_MIB] PRIMARY KEY CLUSTERED 
	(
		[company_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'company_mib_entry') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'company_mib'), N'company_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[company_mib_entry] ADD 
	CONSTRAINT [FK_COMPANY__REF_17407_COMPANY_] FOREIGN KEY 
	(	
		[company_code]
	) REFERENCES [dbo].[company_mib] ( 
		[company_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: company_mib_entry, or the related column: company_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_COMPANY__REF_17407_COMPANY_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[company_mib_entry]  
	DROP CONSTRAINT FK_COMPANY__REF_17407_COMPANY_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[company_mib_entry] 
	DROP CONSTRAINT [PK_COMPANY_MIB_ENTRY]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [company_mib_entry]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[company_mib_entry]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[company_mib_entry]
		ALTER COLUMN  [entry_type]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[company_mib_entry]
		ALTER COLUMN  [entry_field]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[company_mib_entry]
		ALTER COLUMN  [in_directory]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[company_mib_entry]
		ALTER COLUMN  [out_directory]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[company_mib_entry]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[company_mib_entry]
	ALTER COLUMN [entry_type] [char]  (5) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: company_mib_entry does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib_entry'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'company_mib_entry'), N'entry_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[company_mib_entry]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[company_mib_entry] ADD 
	CONSTRAINT [PK_COMPANY_MIB_ENTRY] PRIMARY KEY CLUSTERED 
	(
		[company_code], [entry_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, entry_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'company_mib_entry') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'company_mib'), N'company_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[company_mib_entry] ADD 
	CONSTRAINT [FK_COMPANY__REF_17407_COMPANY_] FOREIGN KEY 
	(	
		[company_code]
	) REFERENCES [dbo].[company_mib] ( 
		[company_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: company_mib_entry, or the related column: company_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_benefits]: 11
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_benefits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[coverage_benefits]
	DROP COLUMN  [reinsurance_flag] 
	ALTER TABLE [dbo].[coverage_benefits]
	DROP COLUMN  [benefit_duration] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [description]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [coverage_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [reason_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [note]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [temp_table_rating]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [temp_table_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [perm_table_rating]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [perm_table_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_benefits]
		ALTER COLUMN  [flat_extra_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[coverage_benefits]
	ALTER COLUMN [coverage_status] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_benefits does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person]
		ALTER COLUMN  [role_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person]
		ALTER COLUMN  [relationship_to_insured_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_amendment]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_amendment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_amendment]
		ALTER COLUMN  [amendment_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_amendment]
		ALTER COLUMN  [amendment_text]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_amendment]
		ALTER COLUMN  [amendment_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_amendment does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_beneficiary]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_beneficiary]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[coverage_person_beneficiary]
	DROP COLUMN  [benefit_type] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_beneficiary]
		ALTER COLUMN  [beneficiary_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_beneficiary does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_extra_info]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_extra_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_extra_info]
		ALTER COLUMN  [coverage_extra_info_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_extra_info does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_fund_alloc]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_fund_alloc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_fund_alloc]
		ALTER COLUMN  [fund_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[coverage_person_fund_alloc]
	ALTER COLUMN [fund_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_fund_alloc does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_code
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_impairment]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_impairment]
		ALTER COLUMN  [impairment_restriction_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_impairment]
		ALTER COLUMN  [impairment_text]  [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_impairment does not exist in catalog!', 16, 1)
GO

IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_code] FOREIGN KEY 
	(	
		[impairment_restriction_code]
	) REFERENCES [dbo].[impairment_restriction] ( 
		[impairment_restriction_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: impairment_restriction_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_insured]: 31
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[coverage_person_insured]
	DROP COLUMN  [coverage_duration] 
	ALTER TABLE [dbo].[coverage_person_insured]
	DROP COLUMN  [do_not_offer_flag] 
	ALTER TABLE [dbo].[coverage_person_insured]
	DROP COLUMN  [premium] 
	ALTER TABLE [dbo].[coverage_person_insured]
	DROP COLUMN  [recommended_uw_decision] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [flat_extra_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [temp_table_rating]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [temp_table_rating_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [rate_class_quoted]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [rate_class_approved]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [rate_class_issued]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [perm_table_rating]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [perm_table_rating_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [coverage_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [reason_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [final_action_note]  [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [g_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [web_quoted_class]  [char]  (70)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [split_detail]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [reinsurance_company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [benefit_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [elimination_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [approved_benefit_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [approved_elimination_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [rate_class_prior_to_rx]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [copay_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [deductable_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [coinsurance_limit]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [max_out_pocket_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [rx_drug_option]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [approved_plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_insured]
		ALTER COLUMN  [guarantee_period]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_insured does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_reinsurer]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_reinsurer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
		ALTER COLUMN  [treaty_type]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
		ALTER COLUMN  [cession_number]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
		ALTER COLUMN  [reinsurance_type]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
		ALTER COLUMN  [origin_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[coverage_person_reinsurer]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_reinsurer does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_person_worksheet]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_worksheet]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [risk_factor]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [result]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [rate_class]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [note]  [varchar]  (200)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [table_rating]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [origin_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[coverage_person_worksheet]
		ALTER COLUMN  [alt_note]  [varchar]  (200)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_person_worksheet does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_TL_SUBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_subaccounts]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_TL_SUBAC
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[coverage_subaccounts] 
	DROP CONSTRAINT [PK_COVERAGE_SUBACCOUNTS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [coverage_subaccounts]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[coverage_subaccounts]
		ALTER COLUMN  [subaccount_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[coverage_subaccounts]
	ALTER COLUMN [subaccount_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: coverage_subaccounts does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_subaccounts'), N'policy_coverage_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'coverage_subaccounts'), N'subaccount_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [PK_COVERAGE_SUBACCOUNTS] PRIMARY KEY CLUSTERED 
	(
		[policy_coverage_id], [subaccount_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_coverage_id, subaccount_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'coverage_subaccounts') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_subaccount'), N'subaccount_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_TL_SUBAC] FOREIGN KEY 
	(	
		[subaccount_code]
	) REFERENCES [dbo].[tl_subaccount] ( 
		[subaccount_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_subaccounts, or the related column: subaccount_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [doc_mgmt_history]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[doc_mgmt_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[doc_mgmt_history]
	DROP COLUMN  [email] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[doc_mgmt_history]
		ALTER COLUMN  [template_name]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[doc_mgmt_history]
		ALTER COLUMN  [output_path]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: doc_mgmt_history does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_elimination_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[elimination_period]  
	DROP CONSTRAINT FK_elimination_period_plan
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [elimination_period].[IX_elimination_period] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [elimination_period]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[elimination_period]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[elimination_period]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[elimination_period]
		ALTER COLUMN  [period_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[elimination_period]
		ALTER COLUMN  [g_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[elimination_period]
		ALTER COLUMN  [period]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[elimination_period]
	ALTER COLUMN [period_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: elimination_period does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_elimination_period] ON [dbo].[elimination_period]([language_code], [plan_code_id], [period_id], [g_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'elimination_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[elimination_period] ADD 
	CONSTRAINT [FK_elimination_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: elimination_period, or the related column: plan_code_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_EMPLOYER_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[employer_plan]  
	DROP CONSTRAINT FK_EMPLOYER_PLAN_CODE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [employer_plan].[IX_employer_plan] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [employer_plan]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [plan_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [plan_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [copay_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [deductible_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [coinsurance_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [max_out_pocket_amount]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[employer_plan]
		ALTER COLUMN  [rx_drug_option]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: employer_plan does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_employer_plan] ON [dbo].[employer_plan]([employer_id], [plan_code]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'employer_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[employer_plan] ADD 
	CONSTRAINT [FK_EMPLOYER_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: employer_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[evidence_status] 
	DROP CONSTRAINT [PK_evidence_status]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [evidence_status]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[evidence_status]
		ALTER COLUMN  [status_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[evidence_status]
		ALTER COLUMN  [code_source]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[evidence_status]
		ALTER COLUMN  [code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[evidence_status]
		ALTER COLUMN  [message_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: evidence_status does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'evidence_status'), N'evidence_status_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[evidence_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[evidence_status] ADD 
	CONSTRAINT [PK_evidence_status] PRIMARY KEY CLUSTERED 
	(
		[evidence_status_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): evidence_status_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[extended_property] 
	DROP CONSTRAINT [PK_EXTENDED_PROPERTY]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [extended_property]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[extended_property]
		ALTER COLUMN  [property_name]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[extended_property]
		ALTER COLUMN  [property_value]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[extended_property]
	ALTER COLUMN [property_name] [varchar]  (255) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: extended_property does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'extended_property'), N'policy_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'extended_property'), N'property_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[extended_property] ADD 
	CONSTRAINT [PK_EXTENDED_PROPERTY] PRIMARY KEY CLUSTERED 
	(
		[policy_id], [property_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_id, property_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extract_time]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[extract_time] 
	DROP CONSTRAINT [PK_EXTRACT_TIME]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [extract_time]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[extract_time]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[extract_time]
		ALTER COLUMN  [company_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[extract_time]
		ALTER COLUMN  [extract_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[extract_time]
		ALTER COLUMN  [output_path]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[extract_time]
	ALTER COLUMN [company_code] [char]  (5) NOT NULL
	ALTER TABLE [dbo].[extract_time]
	ALTER COLUMN [extract_type] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: extract_time does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'extract_time'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'extract_time'), N'extract_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[extract_time]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[extract_time] ADD 
	CONSTRAINT [PK_EXTRACT_TIME] PRIMARY KEY CLUSTERED 
	(
		[company_code], [extract_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, extract_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [family_history]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[family_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[family_history]
		ALTER COLUMN  [famhist_relationship_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[family_history]
		ALTER COLUMN  [living_status]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[family_history]
		ALTER COLUMN  [reason_for_death]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[family_history]
		ALTER COLUMN  [other_disease_desc]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[family_history]
	ALTER COLUMN [famhist_relationship_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: family_history does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_te_rulebook_form_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[te_rulebook_form]  
	DROP CONSTRAINT FK_te_rulebook_form_form
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_section_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_section]  
	DROP CONSTRAINT FK_form_section_form
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_tl_form_type]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form]  
	DROP CONSTRAINT FK_form_tl_form_type
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[form] 
	DROP CONSTRAINT [PK_form]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form]
		ALTER COLUMN  [form_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form]
		ALTER COLUMN  [form_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form'), N'form_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form] ADD 
	CONSTRAINT [PK_form] PRIMARY KEY CLUSTERED 
	(
		[form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'te_rulebook_form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [FK_te_rulebook_form_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_rulebook_form, or the related column: form_code does not exist', 16, 1)
GO
		
IF object_id(N'form_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_section] ADD 
	CONSTRAINT [FK_form_section_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_section, or the related column: form_code does not exist', 16, 1)
GO
		
IF object_id(N'form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_form_type'), N'form_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form] ADD 
	CONSTRAINT [FK_form_tl_form_type] FOREIGN KEY 
	(	
		[form_type]
	) REFERENCES [dbo].[tl_form_type] ( 
		[form_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form, or the related column: form_type does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form_instance]: 10
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
    print 'WARNING: The text field ''form_data'' has changed, most likely due to collation. SQL does not allow the Alter of a text field.'
  
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [case_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [last_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [first_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [middle_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [title]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [suffix]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [sex]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance]
		ALTER COLUMN  [tax_id_no]  [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: form_instance does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [form_instance_answer]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_answer]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_instance_answer]
		ALTER COLUMN  [answer_text]  [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answer]
		ALTER COLUMN  [answer_comment]  [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: form_instance_answer does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [form_instance_answers_doc_info]: 10
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_answers_doc_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [diagnosis]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [treatment]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [medication]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [results]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [physician_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [physician_address]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [physician_phone]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [hospital_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [hospital_address]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_instance_answers_doc_info]
		ALTER COLUMN  [hospital_phone]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: form_instance_answers_doc_info does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_q_group_quest]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_question_group]  
	DROP CONSTRAINT FK_form_q_group_quest
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [form_instance_question_group]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_instance_question_group]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form_instance_question_group]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form_instance_question_group does not exist in catalog!', 16, 1)
GO

IF object_id(N'form_instance_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_question_group] ADD 
	CONSTRAINT [FK_form_q_group_quest] FOREIGN KEY 
	(	
		[form_question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_question_group, or the related column: form_question_group_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_section_form_sec]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_section]  
	DROP CONSTRAINT FK_form_inst_section_form_sec
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [form_instance_section]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_instance_section]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form_instance_section]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form_instance_section does not exist in catalog!', 16, 1)
GO

IF object_id(N'form_instance_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_section] ADD 
	CONSTRAINT [FK_form_inst_section_form_sec] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_section, or the related column: form_section_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_question_tl_answer_set]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_question_tl_answer_set
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_quest_quest_group]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_quest_quest_group
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[form_question] 
	DROP CONSTRAINT [IX_form_question]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form_question]: 8
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[form_question]
	DROP COLUMN  [required] 
	ALTER TABLE [dbo].[form_question]
	DROP COLUMN  [style] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [external_question_number]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [question_label]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [question_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [answer_set_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_question]
		ALTER COLUMN  [alt_question_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_label] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[form_question]
	ALTER COLUMN [question_text] [varchar]  (255) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form_question does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question'), N'form_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question'), N'question_label', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [IX_form_question] UNIQUE NONCLUSTERED 
	(
		[form_code], [question_label]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_code, question_label do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_question_tl_answer_set] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: answer_set_name does not exist', 16, 1)
GO
		
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_quest_quest_group] FOREIGN KEY 
	(	
		[question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: form_question_group_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_q_group_quest]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_question_group]  
	DROP CONSTRAINT FK_form_q_group_quest
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_quest_quest_group]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_quest_quest_group
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_question_group_form_section]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question_group]  
	DROP CONSTRAINT FK_question_group_form_section
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[form_question_group] 
	DROP CONSTRAINT [PK_question_group]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form_question_group]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_question_group]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form_question_group]
		ALTER COLUMN  [external_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_question_group]
		ALTER COLUMN  [group_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form_question_group]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form_question_group does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_question_group_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_question_group'), N'form_section_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_question_group] ADD 
	CONSTRAINT [PK_question_group] PRIMARY KEY CLUSTERED 
	(
		[form_question_group_id], [form_code], [form_section_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_question_group_id, form_code, form_section_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'form_instance_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_question_group] ADD 
	CONSTRAINT [FK_form_q_group_quest] FOREIGN KEY 
	(	
		[form_question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_question_group, or the related column: form_question_group_id does not exist', 16, 1)
GO
		
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_question_group'), N'form_question_group_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_quest_quest_group] FOREIGN KEY 
	(	
		[question_group_id],
		[form_code],
		[form_section_id]
	) REFERENCES [dbo].[form_question_group] ( 
		[form_question_group_id],
		[form_code],
		[form_section_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: form_question_group_id does not exist', 16, 1)
GO
		
IF object_id(N'form_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question_group] ADD 
	CONSTRAINT [FK_question_group_form_section] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question_group, or the related column: form_section_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_instance_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_inst_section_form_sec]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_section]  
	DROP CONSTRAINT FK_form_inst_section_form_sec
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_question_group_form_section]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question_group]  
	DROP CONSTRAINT FK_question_group_form_section
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_section_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_section]  
	DROP CONSTRAINT FK_form_section_form
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[form_section] 
	DROP CONSTRAINT [PK_form_section]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [form_section]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[form_section]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[form_section]
		ALTER COLUMN  [section_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[form_section]
		ALTER COLUMN  [external_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[form_section]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: form_section does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_section'), N'form_section_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'form_section'), N'form_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[form_section]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[form_section] ADD 
	CONSTRAINT [PK_form_section] PRIMARY KEY CLUSTERED 
	(
		[form_section_id], [form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_section_id, form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'form_instance_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_instance_section] ADD 
	CONSTRAINT [FK_form_inst_section_form_sec] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_instance_section, or the related column: form_section_id does not exist', 16, 1)
GO
		
IF object_id(N'form_question_group') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form_section'), N'form_section_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question_group] ADD 
	CONSTRAINT [FK_question_group_form_section] FOREIGN KEY 
	(	
		[form_section_id],
		[form_code]
	) REFERENCES [dbo].[form_section] ( 
		[form_section_id],
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question_group, or the related column: form_section_id does not exist', 16, 1)
GO
		
IF object_id(N'form_section') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_section] ADD 
	CONSTRAINT [FK_form_section_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_section, or the related column: form_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[generic_note]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[generic_note]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[generic_note]
	(   
		[note_id] [int]  NOT NULL,
		[note_collection_id] [int]  NOT NULL,
		[topic] [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL,
		[added_date] [datetime]  NOT NULL,
		[update_date] [datetime]  NULL,
		[review_date] [datetime]  NULL,
		[author] [int]  NOT NULL,
		[updated_by] [int]  NULL,
		[reviewed_by] [int]  NULL,
		[note_text] [varchar]  (4000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'generic_note'), N'note_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[generic_note]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[generic_note] ADD 
	CONSTRAINT [PK_group_notes] PRIMARY KEY CLUSTERED 
	(
		[note_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_person_impairment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_cov_pers_impairment_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment]  
	DROP CONSTRAINT FK_cov_pers_impairment_code
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[impairment_restriction] 
	DROP CONSTRAINT [PK_impairment_restriction]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [impairment_restriction]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[impairment_restriction]
		ALTER COLUMN  [impairment_restriction_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[impairment_restriction]
		ALTER COLUMN  [impairment_text]  [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[impairment_restriction]
		ALTER COLUMN  [alt_impairment_text]  [varchar]  (500)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[impairment_restriction]
	ALTER COLUMN [impairment_restriction_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: impairment_restriction does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[impairment_restriction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[impairment_restriction] ADD 
	CONSTRAINT [PK_impairment_restriction] PRIMARY KEY CLUSTERED 
	(
		[impairment_restriction_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): impairment_restriction_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'coverage_person_impairment') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'impairment_restriction'), N'impairment_restriction_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_person_impairment] ADD 
	CONSTRAINT [FK_cov_pers_impairment_code] FOREIGN KEY 
	(	
		[impairment_restriction_code]
	) REFERENCES [dbo].[impairment_restriction] ( 
		[impairment_restriction_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_person_impairment, or the related column: impairment_restriction_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [insured_application_info].[IX_form_insured_birth_country] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [insured_application_info]: 52
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [airmiles_flag] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [airmiles] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [race] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [full_time_student] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [email_communication] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [statement_of_enrollment] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [signature] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [signature_date] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [ppo_joinder_name] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [ppo_joinder_signature] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [ppo_joinder_signature_date] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [translator_relationship] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [translator_signature] 
	ALTER TABLE [dbo].[insured_application_info]
	DROP COLUMN  [translator_signature_date] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [birth_country]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [residence_country]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [residence_state]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [drivers_license_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [drivers_license_country_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [drivers_license_state]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [bankruptcy_disposition]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [occupation]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [reason_for_weight_change]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [last_md_result]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [beneficiary_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [citizenship_country_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_addr]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_city]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_zip]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [visit_reason]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [findings]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [treatments]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [prior_consultation_detail]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [employer]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [employer_address]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [visa_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [job_duties]  [varchar]  (150)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [birth_state]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [best_day_to_call]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [best_time_to_call]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [systolic_bp_reading]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [diastolic_bp_reading]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [cholesterol_reading]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [issue_state]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [business_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [occupation_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_phone_areacode]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_phone_prefix]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_phone_suffix]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_application_info]
		ALTER COLUMN  [doctor_phone_extension]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: insured_application_info does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_form_insured_birth_country] ON [dbo].[insured_application_info]([birth_country]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [insured_benefits_person]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_benefits_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[insured_benefits_person]
		ALTER COLUMN  [role_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: insured_benefits_person does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_provider
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_provider_order]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_provider_order
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_tl_requirement]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_tl_requirement
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [insured_requirement].[IX_insured_requirement_23] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [insured_requirement].[ix_ins_req_prov_id] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [insured_requirement].[IX_insured_requirement_24] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [insured_requirement]: 9
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [requirement_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [closed_disposition]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [ordered_by]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [create_comment]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [provider]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [evidence_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [external_requirement_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [manual_or_automatic_entry]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[insured_requirement]
		ALTER COLUMN  [alt_create_comment]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: insured_requirement does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_insured_requirement_23] ON [dbo].[insured_requirement]([requirement_information_id], [requirement_code]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_ins_req_prov_id] ON [dbo].[insured_requirement]([provider_order_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_insured_requirement_24] ON [dbo].[insured_requirement]([requirement_code], [closed_disposition]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: provider does not exist', 16, 1)
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider_order'), N'provider_order_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_provider_order] FOREIGN KEY 
	(	
		[provider_order_id]
	) REFERENCES [dbo].[provider_order] ( 
		[provider_order_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: provider_order_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_tl_requirement] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: requirement_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[lab_comment] 
	DROP CONSTRAINT [PK_LAB_COMMENT]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [lab_comment]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[lab_comment]
		ALTER COLUMN  [lab_id_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_comment]
		ALTER COLUMN  [remark_id]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_comment]
		ALTER COLUMN  [comment_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_comment]
	ALTER COLUMN [remark_id] [char]  (4) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: lab_comment does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'remark_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_comment'), N'sequence_no', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[lab_comment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_comment] ADD 
	CONSTRAINT [PK_LAB_COMMENT] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id], [remark_id], [sequence_no]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id, remark_id, sequence_no do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_configuration]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[lab_configuration] 
	DROP CONSTRAINT [PK_LAB_CONFIGURATION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [lab_configuration]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_configuration]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[lab_configuration]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_configuration]
		ALTER COLUMN  [request_directory]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_configuration]
		ALTER COLUMN  [lab_company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[lab_configuration]
	ALTER COLUMN [company_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: lab_configuration does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_configuration'), N'company_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[lab_configuration]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_configuration] ADD 
	CONSTRAINT [PK_LAB_CONFIGURATION] PRIMARY KEY CLUSTERED 
	(
		[company_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [lab_header]: 38
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [lab_id_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [lab_type_id]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [last_food]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [last_food_time]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [agency_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [special_conditions]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [examiner]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [city]  [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [process_type]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [underwriter_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [barcode_number]  [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [last_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [first_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [middle_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ssn]  [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [sex]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ticket_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [company_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ins_type_life]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ins_type_health]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ins_type_disability]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ins_type_group]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [ins_type_individual]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [signature_present]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [policy_number]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [agent_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [agent_city]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [agent_state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [agent_zip]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [examiner_company_code]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [examiner_state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [special_status_indicator]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [applicant_address]  [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [applicant_zip]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [state_agent]  [char]  (14)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [time_collected]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_header]
		ALTER COLUMN  [referrence_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [lab_type_id] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [last_name] [char]  (25) NOT NULL
	ALTER TABLE [dbo].[lab_header]
	ALTER COLUMN [first_name] [char]  (25) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: lab_header does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_lab_resu_ref_9315_tl_ansi_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[lab_result]  
	DROP CONSTRAINT fk_lab_resu_ref_9315_tl_ansi_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[lab_result] 
	DROP CONSTRAINT [PK_LAB_RESULT]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [lab_result]: 6
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [lab_id_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [horl_code]  [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [indicator]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [result_value]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [high_low]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[lab_result]
		ALTER COLUMN  [range_text]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[lab_result]
	ALTER COLUMN [lab_id_number] [char]  (15) NOT NULL
	ALTER TABLE [dbo].[lab_result]
	ALTER COLUMN [horl_code] [char]  (8) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: lab_result does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_result'), N'requirement_information_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'lab_result'), N'horl_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [PK_LAB_RESULT] PRIMARY KEY CLUSTERED 
	(
		[requirement_information_id], [horl_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_information_id, horl_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'lab_result') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_ansi_code'), N'horl_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [fk_lab_resu_ref_9315_tl_ansi_] FOREIGN KEY 
	(	
		[horl_code]
	) REFERENCES [dbo].[tl_ansi_code] ( 
		[horl_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_result, or the related column: horl_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lifesuite_version]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[lifesuite_version] 
	DROP CONSTRAINT [PK_lifesuite_version]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [lifesuite_version]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lifesuite_version]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[lifesuite_version]
		ALTER COLUMN  [lifesuite_version]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[lifesuite_version]
	ALTER COLUMN [lifesuite_version] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: lifesuite_version does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'lifesuite_version'), N'lifesuite_version', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[lifesuite_version]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[lifesuite_version] ADD 
	CONSTRAINT [PK_lifesuite_version] PRIMARY KEY CLUSTERED 
	(
		[lifesuite_version]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): lifesuite_version do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_line_of_bus]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_line_of_bus
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[aus_user_limits]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_aus_user_limits_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_user_limits]  
	DROP CONSTRAINT FK_aus_user_limits_lob
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_plan_code_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_code]  
	DROP CONSTRAINT fk_plan_code_lob
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[line_of_business]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[line_of_business] 
	DROP CONSTRAINT [PK_line_of_business]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [line_of_business]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[line_of_business]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[line_of_business]
		ALTER COLUMN  [line_of_business_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[line_of_business]
		ALTER COLUMN  [name]  [char]  (120)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[line_of_business]
	ALTER COLUMN [line_of_business_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: line_of_business does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'line_of_business'), N'line_of_business_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[line_of_business]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[line_of_business] ADD 
	CONSTRAINT [PK_line_of_business] PRIMARY KEY CLUSTERED 
	(
		[line_of_business_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): line_of_business_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_line_of_bus] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
IF object_id(N'aus_user_limits') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[aus_user_limits] ADD 
	CONSTRAINT [FK_aus_user_limits_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: aus_user_limits, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_plan_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_code] ADD 
	CONSTRAINT [fk_plan_code_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ls_file]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[ls_file] 
	DROP CONSTRAINT [PK_LSFILE_NAME]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [ls_file]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ls_file]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ls_file]
		ALTER COLUMN  [file_name]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[ls_file]
		ALTER COLUMN  [file_type]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[ls_file]
	ALTER COLUMN [file_name] [varchar]  (255) NOT NULL
	ALTER TABLE [dbo].[ls_file]
	ALTER COLUMN [file_type] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: ls_file does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ls_file'), N'file_name', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ls_file'), N'file_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[ls_file]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ls_file] ADD 
	CONSTRAINT [PK_LSFILE_NAME] PRIMARY KEY CLUSTERED 
	(
		[file_name], [file_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): file_name, file_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [mib_code]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[mib_code]
	DROP COLUMN  [reported_by] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[mib_code]
		ALTER COLUMN  [field_id]  [varchar]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_code]
		ALTER COLUMN  [data_item]  [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: mib_code does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [mib_coding]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_coding]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[mib_coding]
		ALTER COLUMN  [mib_codes]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: mib_coding does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [mib_header]: 15
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mib_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [policy_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [place_of_birth]  [varchar]  (6)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [application_prefix]  [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [error_msg_text]  [varchar]  (60)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [rec_type]  [varchar]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [csy]  [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [dcode]  [varchar]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [batch_number]  [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [inq_number]  [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [inq_type]  [varchar]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [reply_type]  [varchar]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [last_name]  [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [first_name]  [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [middle_name]  [varchar]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mib_header]
		ALTER COLUMN  [occupation]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [policy_number] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [csy] [varchar]  (3) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [last_name] [varchar]  (25) NOT NULL
	ALTER TABLE [dbo].[mib_header]
	ALTER COLUMN [first_name] [varchar]  (25) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: mib_header does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [mvr_detail]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[mvr_detail]
		ALTER COLUMN  [record_type]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_detail]
		ALTER COLUMN  [data]  [char]  (80)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: mvr_detail does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [mvr_header]: 15
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mvr_header]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [license_number]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [soc_sec_no]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [license_status]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [license_class]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [restrictions]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [driver_information]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [last_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [first_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [middle_name]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [license_address]  [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [license_city_state]  [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [batch_number]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [batch_sequence]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[mvr_header]
		ALTER COLUMN  [report_status]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [last_name] [char]  (25) NOT NULL
	ALTER TABLE [dbo].[mvr_header]
	ALTER COLUMN [first_name] [char]  (25) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: mvr_header does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[note_collection]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[note_collection]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[note_collection]
	(   
		[note_collection_id] [int]  NOT NULL,
		[type_code] [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'note_collection'), N'note_collection_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[note_collection]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[note_collection] ADD 
	CONSTRAINT [PK_note_collection] PRIMARY KEY CLUSTERED 
	(
		[note_collection_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_collection_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[notes] 
	DROP CONSTRAINT [PK_NOTES]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [notes]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
    print 'WARNING: The text field ''note'' has changed, most likely due to collation. SQL does not allow the Alter of a text field.'
  
    print 'WARNING: The text field ''alt_note'' has changed, most likely due to collation. SQL does not allow the Alter of a text field.'
  
	-- Alter existing table columns 
	ALTER TABLE [dbo].[notes]
		ALTER COLUMN  [note_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[notes]
		ALTER COLUMN  [topic]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[notes]
		ALTER COLUMN  [visibility]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[notes]
		ALTER COLUMN  [email_to_list]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[notes]
		ALTER COLUMN  [alt_topic]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: notes does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'notes'), N'note_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'notes'), N'added_date', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[notes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[notes] ADD 
	CONSTRAINT [PK_NOTES] PRIMARY KEY CLUSTERED 
	(
		[note_id], [added_date]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_id, added_date do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [object_property]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[object_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[object_property]
		ALTER COLUMN  [name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[object_property]
		ALTER COLUMN  [value]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[object_property]
	ALTER COLUMN [name] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: object_property does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[occupation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[occupation] 
	DROP CONSTRAINT [PK_OCCUPATION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [occupation]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[occupation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[occupation]
		ALTER COLUMN  [occupation]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[occupation]
		ALTER COLUMN  [occupation_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[occupation]
	ALTER COLUMN [occupation] [varchar]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: occupation does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'occupation'), N'occupation', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[occupation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[occupation] ADD 
	CONSTRAINT [PK_OCCUPATION] PRIMARY KEY CLUSTERED 
	(
		[occupation]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): occupation do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [paramed]: 27
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[paramed]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [barcode_number]  [char]  (12)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [sex]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [last_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [first_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [middle_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [title]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [suffix]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [tax_id_no]  [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [agency_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [agency_name]  [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [agent_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [agent_name]  [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [extract_file_name]  [varchar]  (128)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [doctor_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [doctor_addr]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [doctor_city]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [doctor_state]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [doctor_zip]  [char]  (9)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [visit_reason]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [findings]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [treatments]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [prior_consultation_detail]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [weight_change_reason]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [exam_company_number]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [exam_company_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [examiner_number]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[paramed]
		ALTER COLUMN  [examiner_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: paramed does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [person].[IX_person_last_name] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [person].[ix_tax_id] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [person].[ix_client_id] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [person]: 23
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[person] 
	ADD  [note_collection_id]  [int]  NULL 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [last_name]  [char]  (150)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [first_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [middle_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [birth_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [title]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [suffix]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [tax_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [tax_type_id]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [sex]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [person_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [preferred_language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [email_address]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [marital_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [client_id]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [alt_email_address]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [preferred_contact_mode]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [class_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [field1]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [field2]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [field3]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [field4]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person]
		ALTER COLUMN  [field5]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: person does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_person_last_name] ON [dbo].[person]([last_name]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_tax_id] ON [dbo].[person]([tax_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_client_id] ON [dbo].[person]([client_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_person_a_ref_2023_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[person_address]  
	DROP CONSTRAINT fk_person_a_ref_2023_tl_count
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[person_address] 
	DROP CONSTRAINT [PK_PERSON_ADDRESS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [person_address]: 9
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[person_address]
	DROP COLUMN  [county] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [address_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [city]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [country_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [postal_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [country_state_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [address_line1]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [address_line2]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_address]
		ALTER COLUMN  [address_line3]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[person_address]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: person_address does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_address'), N'person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_address'), N'address_type_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [PK_PERSON_ADDRESS] PRIMARY KEY CLUSTERED 
	(
		[person_id], [address_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id, address_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'person_address') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [fk_person_a_ref_2023_tl_count] FOREIGN KEY 
	(	
		[country_state_id]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_address, or the related column: country_state_id does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [person_alias]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_alias]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[person_alias]
		ALTER COLUMN  [title]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_alias]
		ALTER COLUMN  [first_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_alias]
		ALTER COLUMN  [middle_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_alias]
		ALTER COLUMN  [last_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_alias]
		ALTER COLUMN  [suffix]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: person_alias does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[person_phone] 
	DROP CONSTRAINT [PK_PERSON_PHONE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [person_phone]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [phone_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [country_calling_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [area_code]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [prefix]  [char]  (3)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [suffix]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [extension]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[person_phone]
		ALTER COLUMN  [pin]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[person_phone]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: person_phone does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_phone'), N'person_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'person_phone'), N'phone_type_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[person_phone]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person_phone] ADD 
	CONSTRAINT [PK_PERSON_PHONE] PRIMARY KEY CLUSTERED 
	(
		[person_id], [phone_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id, phone_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_plan_benefit_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[plan_benefit]  
	DROP CONSTRAINT FK_plan_benefit_plan
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [plan_benefit].[IX_plan_benefit] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [plan_benefit]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[plan_benefit]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[plan_benefit]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[plan_benefit]
		ALTER COLUMN  [g_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[plan_benefit]
		ALTER COLUMN  [name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[plan_benefit]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[plan_benefit]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: plan_benefit does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_plan_benefit] ON [dbo].[plan_benefit]([language_code], [plan_code_id], [benefit_id], [g_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'plan_benefit') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[plan_benefit] ADD 
	CONSTRAINT [FK_plan_benefit_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: plan_benefit, or the related column: plan_code_id does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy].[policy_number_ak] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy].[ix_pol_stat_user] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy].[ix_pol_stat_code] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy].[ix_pol_case_grp] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy]: 56
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [case_clock_flag] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [tia_indicator] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [bank_transaction_number] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [bank_name_on_account] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [sales_director_code] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [sales_director_name] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [bank_trans_num_is_valid_flag] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [bank_routing_num_is_valid_flag] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [marketing_key_is_valid_flag] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [dcn] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [overall_premium] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [rate_up_amount] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [credit_card_verification_code] 
	ALTER TABLE [dbo].[policy]
	DROP COLUMN  [account_holder_name] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [policy_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [application_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [policy_status_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [policy_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [payment_mode_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [reinsurance_indicator]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [reinsurance_vendor_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [payment_method_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [reason_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [final_action_note]  [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [bank_rounting_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [bank_account_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [credit_card_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [credit_card_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [credit_card_expiration_year]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [credit_card_expiration_month]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [list_bill_location]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [list_bill_employee_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [marketing_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [case_group_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [association_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [tpa_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [amex_account]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [source_info]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [lead_number_id]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [distributor_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [alternate_case_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [cedent_policy_number]  [char]  (35)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [cedent_company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [cedent_fax_number]  [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [international_or_domestic]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [currency_code]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [preferred_language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [partner_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [application_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [bank_account_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [agent_staff_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [agent_team_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [ppo_network]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [product_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy]
		ALTER COLUMN  [trust_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[policy]
	ALTER COLUMN [policy_number] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: policy does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [policy_number_ak] ON [dbo].[policy]([policy_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_pol_stat_user] ON [dbo].[policy]([policy_status_code], [underwriter_id], [service_associate_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_pol_stat_code] ON [dbo].[policy]([policy_status_code]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_pol_case_grp] ON [dbo].[policy]([case_group_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy_admin_status]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_admin_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_admin_status]
		ALTER COLUMN  [policy_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_admin_status]
		ALTER COLUMN  [agent_status]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_admin_status does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_assignment]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_assignment]
		ALTER COLUMN  [assignment_role]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_assignment]
		ALTER COLUMN  [assign_date]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_assignment does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_C_REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_coverage]  
	DROP CONSTRAINT FK_POLICY_C_REFERENCE_TL_PLAN_
END	
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_coverage]: 13
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [death_benefit_option_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [purpose_of_coverage_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [coverage_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [indicator_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [coverage_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [premium_mode]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [investment_objective]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [flat_extra_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [temp_table_rating]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [temp_table_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [perm_table_rating]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_coverage]
		ALTER COLUMN  [perm_table_reason]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_coverage does not exist in catalog!', 16, 1)
GO

IF object_id(N'policy_coverage') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_coverage] ADD 
	CONSTRAINT [FK_POLICY_C_REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_coverage, or the related column: plan_code_id does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy_extract]: 6
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_extract]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [company_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [policy_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [will_update]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [life_pro_crc]  [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [nailba_100_crc]  [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_extract]
		ALTER COLUMN  [nailba_200_crc]  [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_extract does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_log]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_log]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_log]
		ALTER COLUMN  [log_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_log]
		ALTER COLUMN  [log_reason_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_log does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_person]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_person]
		ALTER COLUMN  [role_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person]
		ALTER COLUMN  [relationship_to_insured]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_person does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy_person_agent].[ix_agent_num2] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy_person_agent]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[policy_person_agent]
	DROP COLUMN  [signature] 
	ALTER TABLE [dbo].[policy_person_agent]
	DROP COLUMN  [signature_date] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_person_agent]
		ALTER COLUMN  [commission_option]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_agent]
		ALTER COLUMN  [market_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_agent]
		ALTER COLUMN  [agent_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_agent]
		ALTER COLUMN  [firm_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_agent]
		ALTER COLUMN  [level5_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_person_agent does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_agent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_agent_num2] ON [dbo].[policy_person_agent]([agent_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [policy_person_insured].[ix_pol_pers_ins_stat] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy_person_insured]: 8
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[policy_person_insured]
	DROP COLUMN  [applicant_type_id] 
	ALTER TABLE [dbo].[policy_person_insured]
	DROP COLUMN  [appeal_status] 
	ALTER TABLE [dbo].[policy_person_insured]
	DROP COLUMN  [rerate_status] 
	ALTER TABLE [dbo].[policy_person_insured]
	DROP COLUMN  [bmi] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_person_insured]
		ALTER COLUMN  [signed_state_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_insured]
		ALTER COLUMN  [applicant_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_insured]
		ALTER COLUMN  [retro_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_insured]
		ALTER COLUMN  [signed_country_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_person_insured does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_pol_pers_ins_stat] ON [dbo].[policy_person_insured]([applicant_status]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [policy_person_retro_info]: 6
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_retro_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [retro_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [company_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [action]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [rating]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [comments]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[policy_person_retro_info]
		ALTER COLUMN  [product]  [char]  (11)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_person_retro_info does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [policy_status_history]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_status_history]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[policy_status_history]
		ALTER COLUMN  [policy_status_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: policy_status_history does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_provider
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_tl_requirement_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_requirement]  
	DROP CONSTRAINT FK_tl_requirement_provider
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[provider] 
	DROP CONSTRAINT [PK_provider]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [provider]: 7
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [provider]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [provider_class]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [evidence_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [evidence_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [us_vendor]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [non_us_vendor]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[provider]
		ALTER COLUMN  [provider_type]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[provider]
	ALTER COLUMN [provider] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[provider]
	ALTER COLUMN [evidence_type] [char]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: provider does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'provider'), N'provider', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'provider'), N'evidence_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[provider]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[provider] ADD 
	CONSTRAINT [PK_provider] PRIMARY KEY CLUSTERED 
	(
		[provider], [evidence_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): provider, evidence_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: provider does not exist', 16, 1)
GO
		
IF object_id(N'tl_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [FK_tl_requirement_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_requirement, or the related column: provider does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [provider_order].[ix_tracking_number] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [provider_order]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[provider_order]
		ALTER COLUMN  [tracking_number]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[provider_order]
		ALTER COLUMN  [alternate_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: provider_order does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[provider_order]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_tracking_number] ON [dbo].[provider_order]([tracking_number]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [reinsurance_vendor]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[reinsurance_vendor]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[reinsurance_vendor]
		ALTER COLUMN  [reinsurance_vendor_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[reinsurance_vendor]
		ALTER COLUMN  [name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[reinsurance_vendor]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[reinsurance_vendor]
	ALTER COLUMN [reinsurance_vendor_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: reinsurance_vendor does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_related_pol_pers_insured]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[related_policies]  
	DROP CONSTRAINT FK_related_pol_pers_insured
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[related_policies] 
	DROP CONSTRAINT [PK_RELATED_POLICIES]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [related_policies]: 16
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[related_policies]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- drop existing table columns that don't exist in new schema
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [decision] 
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [bill_status] 
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [reinsurance_amount] 
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [reinsurance_type] 
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [person_id] 
	ALTER TABLE [dbo].[related_policies]
	DROP COLUMN  [termination_date] 
	-- Alter existing table columns 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [company]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [policy_number]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [comment_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [relationship]  [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [purpose_of_coverage]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [line_of_business]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [benefit_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [elimination_period]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[related_policies]
		ALTER COLUMN  [replacement_type]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: related_policies does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [requirement_info_request]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_info_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[requirement_info_request]
		ALTER COLUMN  [status]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: requirement_info_request does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [requirement_information]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_information]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[requirement_information]
		ALTER COLUMN  [status]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[requirement_information]
		ALTER COLUMN  [vendor_id]  [char]  (15)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[requirement_information]
		ALTER COLUMN  [manual_or_electronic_entry]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[requirement_information]
		ALTER COLUMN  [requirement_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: requirement_information does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_requirement_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match]  
	DROP CONSTRAINT FK_requirement_code
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[requirement_match] 
	DROP CONSTRAINT [PK_requirement_match]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [requirement_match]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[requirement_match]
		ALTER COLUMN  [requirement_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[requirement_match]
		ALTER COLUMN  [lab_specimen_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[requirement_match]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[requirement_match]
	ALTER COLUMN [lab_specimen_id] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: requirement_match does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_match'), N'requirement_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'requirement_match'), N'lab_specimen_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [PK_requirement_match] PRIMARY KEY CLUSTERED 
	(
		[requirement_code], [lab_specimen_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_code, lab_specimen_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'requirement_match') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [FK_requirement_code] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_match, or the related column: requirement_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_review_message]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_review_message
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [review_message].[ix_rvw_msg_type] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[review_message] 
	DROP CONSTRAINT [PK_REVIEW_MESSAGE]		

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [review_message].[IX_review_message_policy_rule] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [review_message].[ix_rvw_msg_user_role] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [review_message]: 8
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [message_type]  [char]  (1)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [message]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [origin_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [rule_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [review_message_comment]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [alt_message]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [alt_comment]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[review_message]
		ALTER COLUMN  [user_role_type]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: review_message does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_rvw_msg_type] ON [dbo].[review_message]([message_type], [user_role_type]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'review_message'), N'review_message_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[review_message] ADD 
	CONSTRAINT [PK_REVIEW_MESSAGE] PRIMARY KEY CLUSTERED 
	(
		[review_message_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): review_message_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_review_message_policy_rule] ON [dbo].[review_message]([policy_id], [rule_name]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[review_message]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_rvw_msg_user_role] ON [dbo].[review_message]([user_role_type]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'review_message'), N'review_message_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_review_message] FOREIGN KEY 
	(	
		[review_message_id]
	) REFERENCES [dbo].[review_message] ( 
		[review_message_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: review_message_id does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sequence_number]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[sequence_number] 
	DROP CONSTRAINT [pk_sequence_number]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [sequence_number]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sequence_number]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[sequence_number]
		ALTER COLUMN  [id]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[sequence_number]
		ALTER COLUMN  [prefix]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[sequence_number]
	ALTER COLUMN [id] [char]  (5) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: sequence_number does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'sequence_number'), N'id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[sequence_number]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[sequence_number] ADD 
	CONSTRAINT [pk_sequence_number] PRIMARY KEY CLUSTERED 
	(
		[id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [service_associate_range].[IX_service_associate_range] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[service_associate_range] 
	DROP CONSTRAINT [PK_service_associate_range]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [service_associate_range]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[service_associate_range]
		ALTER COLUMN  [service_associate_login_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[service_associate_range]
		ALTER COLUMN  [from_string]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[service_associate_range]
		ALTER COLUMN  [to_string]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [service_associate_login_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [from_string] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[service_associate_range]
	ALTER COLUMN [to_string] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: service_associate_range does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_service_associate_range] ON [dbo].[service_associate_range]([from_string], [to_string]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'service_associate_range'), N'service_associate_login_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'service_associate_range'), N'from_string', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[service_associate_range]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[service_associate_range] ADD 
	CONSTRAINT [PK_service_associate_range] PRIMARY KEY CLUSTERED 
	(
		[service_associate_login_id], [from_string]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): service_associate_login_id, from_string do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[subgroup]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[subgroup]
	(   
		[sub_group_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[person_id] [int]  NOT NULL,
		[subgroup_id] [int]  NOT NULL,
		[is_using_company_address] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL,
		[expiration_date] [datetime]  NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'sub_group_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [IX_subgroup_company] UNIQUE NONCLUSTERED 
	(
		[company_code], [sub_group_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, sub_group_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'person_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [IX_subgroup_person] UNIQUE NONCLUSTERED 
	(
		[person_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'subgroup'), N'subgroup_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[subgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [PK_subgroup] PRIMARY KEY CLUSTERED 
	(
		[subgroup_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subgroup_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [system_search_info]: 8
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[system_search_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [system_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [policy_number]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [cedent_company]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [action]  [char]  (25)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [rating]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [smoker]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [policy_status]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[system_search_info]
		ALTER COLUMN  [uw_basis]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: system_search_info does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [ta_band_level]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_band_level]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ta_band_level]
		ALTER COLUMN  [value_from]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_band_level]
		ALTER COLUMN  [value_to]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: ta_band_level does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [ta_point_allocation]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_point_allocation]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ta_point_allocation]
		ALTER COLUMN  [rate_class]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_point_allocation]
		ALTER COLUMN  [smoking_rate_class]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_point_allocation]
		ALTER COLUMN  [review_message]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: ta_point_allocation does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_UNDERWRI_REF_5297_TA_POINT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[underwriting_detail]  
	DROP CONSTRAINT FK_UNDERWRI_REF_5297_TA_POINT
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[ta_point_rule] 
	DROP CONSTRAINT [PK_TA_POINT_RULE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [ta_point_rule]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ta_point_rule]
		ALTER COLUMN  [rule_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[ta_point_rule]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: ta_point_rule does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_point_rule'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'ta_point_rule'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[ta_point_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[ta_point_rule] ADD 
	CONSTRAINT [PK_TA_POINT_RULE] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'underwriting_detail') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_point_rule'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[underwriting_detail] ADD 
	CONSTRAINT [FK_UNDERWRI_REF_5297_TA_POINT] FOREIGN KEY 
	(	
		[rulebook_id],
		[rule_name]
	) REFERENCES [dbo].[ta_point_rule] ( 
		[rulebook_id],
		[rule_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: underwriting_detail, or the related column: rulebook_id does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [ta_rate_table_class]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_rate_table_class]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ta_rate_table_class]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rate_table_class]
		ALTER COLUMN  [smoking_class]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rate_table_class]
		ALTER COLUMN  [comment_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rate_table_class]
		ALTER COLUMN  [alt_description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: ta_rate_table_class does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [ta_rule_option]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ta_rule_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[ta_rule_option]
		ALTER COLUMN  [review_message]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rule_option]
		ALTER COLUMN  [comment_text]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rule_option]
		ALTER COLUMN  [requirement_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rule_option]
		ALTER COLUMN  [rate_class]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[ta_rule_option]
		ALTER COLUMN  [rate_class_smoking]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: ta_rule_option does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [te_band]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_band]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[te_band]
		ALTER COLUMN  [based_on]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: te_band does not exist in catalog!', 16, 1)
GO

-- COUNT OF ALTERED COLUMNS IN TABLE [te_case_assignment]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_case_assignment]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[te_case_assignment]
		ALTER COLUMN  [criteria_from]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[te_case_assignment]
		ALTER COLUMN  [criteria_to]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: te_case_assignment does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[te_rule] 
	DROP CONSTRAINT [AK_IX_RULE_NAME_TE_RULE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [te_rule]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[te_rule]
		ALTER COLUMN  [rule_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[te_rule]
		ALTER COLUMN  [description]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[te_rule]
		ALTER COLUMN  [rule_text]  [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[te_rule]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: te_rule does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rule'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rule'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[te_rule]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rule] ADD 
	CONSTRAINT [AK_IX_RULE_NAME_TE_RULE] UNIQUE NONCLUSTERED 
	(
		[rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [te_rulebook]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
    print 'WARNING: The text field ''rulebook_script'' has changed, most likely due to collation. SQL does not allow the Alter of a text field.'
  
	-- Alter existing table columns 
	ALTER TABLE [dbo].[te_rulebook]
		ALTER COLUMN  [rulebook_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[te_rulebook]
		ALTER COLUMN  [description]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[te_rulebook]
		ALTER COLUMN  [association_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[te_rulebook]
	ALTER COLUMN [rulebook_name] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: te_rulebook does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_te_rulebook_form_form]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[te_rulebook_form]  
	DROP CONSTRAINT FK_te_rulebook_form_form
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[te_rulebook_form] 
	DROP CONSTRAINT [PK_te_rulebook_form]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [te_rulebook_form]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[te_rulebook_form]
		ALTER COLUMN  [form_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[te_rulebook_form]
	ALTER COLUMN [form_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: te_rulebook_form does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rulebook_form'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'te_rulebook_form'), N'form_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[te_rulebook_form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [PK_te_rulebook_form] PRIMARY KEY CLUSTERED 
	(
		[rulebook_id], [form_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): rulebook_id, form_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'te_rulebook_form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'form'), N'form_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[te_rulebook_form] ADD 
	CONSTRAINT [FK_te_rulebook_form_form] FOREIGN KEY 
	(	
		[form_code]
	) REFERENCES [dbo].[form] ( 
		[form_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: te_rulebook_form, or the related column: form_code does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [team]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[team]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[team]
		ALTER COLUMN  [team_name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[team]
		ALTER COLUMN  [description]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: team does not exist in catalog!', 16, 1)
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_acord_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_acord_codes] 
	DROP CONSTRAINT [PK_acord_codes_valuelist]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_acord_codes]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_acord_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_acord_codes]
		ALTER COLUMN  [code_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_acord_codes]
		ALTER COLUMN  [code_value]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_acord_codes]
		ALTER COLUMN  [external_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_acord_codes]
	ALTER COLUMN [code_type] [char]  (50) NOT NULL
	ALTER TABLE [dbo].[tl_acord_codes]
	ALTER COLUMN [code_value] [char]  (100) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_acord_codes does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_acord_codes'), N'code_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_acord_codes'), N'code_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_acord_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_acord_codes] ADD 
	CONSTRAINT [PK_acord_codes_valuelist] PRIMARY KEY CLUSTERED 
	(
		[code_type], [code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code_type, code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_ADDRE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_ADDRE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_address_type] 
	DROP CONSTRAINT [PK_TL_ADDRESS_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_address_type]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_address_type]
		ALTER COLUMN  [address_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_address_type]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_address_type]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_address_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type'), N'address_type_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type] ADD 
	CONSTRAINT [PK_TL_ADDRESS_TYPE] PRIMARY KEY CLUSTERED 
	(
		[address_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): address_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_address_type'), N'address_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_ADDRE] FOREIGN KEY 
	(	
		[address_type_code]
	) REFERENCES [dbo].[tl_address_type] ( 
		[address_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: address_type_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_ADDRE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_ADDRE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_address_type_description] 
	DROP CONSTRAINT [PK_TL_ADDRESS_TYPE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_address_type_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_address_type_description]
		ALTER COLUMN  [address_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_address_type_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_address_type_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_address_type_description]
	ALTER COLUMN [address_type_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_address_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_address_type_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type_description'), N'address_type_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_address_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [PK_TL_ADDRESS_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[address_type_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): address_type_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_address_type'), N'address_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_ADDRE] FOREIGN KEY 
	(	
		[address_type_code]
	) REFERENCES [dbo].[tl_address_type] ( 
		[address_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: address_type_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lab_result]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_lab_resu_ref_9315_tl_ansi_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[lab_result]  
	DROP CONSTRAINT fk_lab_resu_ref_9315_tl_ansi_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_ansi_code] 
	DROP CONSTRAINT [PK_TL_ANSI_CODE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_ansi_code]: 13
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [horl_code]  [char]  (8)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [lab_specimen_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [ansi]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [lis]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [lnrm]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [capsco]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [cna]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [low_male]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [high_male]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [low_female]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [high_female]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_ansi_code]
		ALTER COLUMN  [unit]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_ansi_code]
	ALTER COLUMN [horl_code] [char]  (8) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_ansi_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_ansi_code'), N'horl_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_ansi_code] ADD 
	CONSTRAINT [PK_TL_ANSI_CODE] PRIMARY KEY CLUSTERED 
	(
		[horl_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): horl_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'lab_result') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_ansi_code'), N'horl_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[lab_result] ADD 
	CONSTRAINT [fk_lab_resu_ref_9315_tl_ansi_] FOREIGN KEY 
	(	
		[horl_code]
	) REFERENCES [dbo].[tl_ansi_code] ( 
		[horl_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: lab_result, or the related column: horl_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ANSWE_REFERENCE_TL_ANSWE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_answer_set_answers]  
	DROP CONSTRAINT FK_TL_ANSWE_REFERENCE_TL_ANSWE
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form_question]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_question_tl_answer_set]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question]  
	DROP CONSTRAINT FK_form_question_tl_answer_set
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_answer_set] 
	DROP CONSTRAINT [PK_TL_ANSWER_SET]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_answer_set]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_answer_set]
		ALTER COLUMN  [answer_set_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_answer_set]
		ALTER COLUMN  [description]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_answer_set]
	ALTER COLUMN [answer_set_name] [varchar]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_answer_set does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set'), N'answer_set_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_answer_set] ADD 
	CONSTRAINT [PK_TL_ANSWER_SET] PRIMARY KEY CLUSTERED 
	(
		[answer_set_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): answer_set_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_answer_set_answers') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_answer_set_answers] ADD 
	CONSTRAINT [FK_TL_ANSWE_REFERENCE_TL_ANSWE] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_answer_set_answers, or the related column: answer_set_name does not exist', 16, 1)
GO
		
IF object_id(N'form_question') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form_question] ADD 
	CONSTRAINT [FK_form_question_tl_answer_set] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form_question, or the related column: answer_set_name does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ANSWE_REFERENCE_TL_ANSWE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_answer_set_answers]  
	DROP CONSTRAINT FK_TL_ANSWE_REFERENCE_TL_ANSWE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_answer_set_answers] 
	DROP CONSTRAINT [PK_TL_ANSWER_SET_ANSWERS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_answer_set_answers]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_answer_set_answers]
		ALTER COLUMN  [answer_set_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_answer_set_answers]
		ALTER COLUMN  [answer_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_answer_set_answers]
		ALTER COLUMN  [alt_answer_text]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_answer_set_answers]
	ALTER COLUMN [answer_set_name] [varchar]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_answer_set_answers does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set_answers'), N'sequence_number', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_answer_set_answers'), N'answer_set_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_answer_set_answers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_answer_set_answers] ADD 
	CONSTRAINT [PK_TL_ANSWER_SET_ANSWERS] PRIMARY KEY CLUSTERED 
	(
		[sequence_number], [answer_set_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): sequence_number, answer_set_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_answer_set_answers') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_answer_set'), N'answer_set_name', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_answer_set_answers] ADD 
	CONSTRAINT [FK_TL_ANSWE_REFERENCE_TL_ANSWE] FOREIGN KEY 
	(	
		[answer_set_name]
	) REFERENCES [dbo].[tl_answer_set] ( 
		[answer_set_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_answer_set_answers, or the related column: answer_set_name does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_applicant_status]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_applicant_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_applicant_status]
		ALTER COLUMN  [applicant_status_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_applicant_status]
		ALTER COLUMN  [description]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_applicant_status]
	ALTER COLUMN [applicant_status_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_applicant_status does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_BENEF]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_BENEF
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_beneficiary_type] 
	DROP CONSTRAINT [PK_TL_BENEFICIARY_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_beneficiary_type]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_beneficiary_type]
		ALTER COLUMN  [beneficiary_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_beneficiary_type]
	ALTER COLUMN [beneficiary_type] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_beneficiary_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type'), N'beneficiary_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type] ADD 
	CONSTRAINT [PK_TL_BENEFICIARY_TYPE] PRIMARY KEY CLUSTERED 
	(
		[beneficiary_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): beneficiary_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_beneficiary_type'), N'beneficiary_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_BENEF] FOREIGN KEY 
	(	
		[beneficiary_type]
	) REFERENCES [dbo].[tl_beneficiary_type] ( 
		[beneficiary_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: beneficiary_type does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_BENEF]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_BENEF
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] 
	DROP CONSTRAINT [PK_TL_BENEFICIARY_TYPE_DESCRIP]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_beneficiary_type_desc]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
		ALTER COLUMN  [beneficiary_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
	ALTER COLUMN [beneficiary_type] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_beneficiary_type_desc does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type_desc'), N'beneficiary_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_beneficiary_type_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [PK_TL_BENEFICIARY_TYPE_DESCRIP] PRIMARY KEY CLUSTERED 
	(
		[beneficiary_type], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): beneficiary_type, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_beneficiary_type'), N'beneficiary_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_BENEF] FOREIGN KEY 
	(	
		[beneficiary_type]
	) REFERENCES [dbo].[tl_beneficiary_type] ( 
		[beneficiary_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: beneficiary_type does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_benefit_type]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_benefit_type]
		ALTER COLUMN  [name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_benefit_type does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_benefit_type_description]  
	DROP CONSTRAINT FK_TL_BENEF_REF_TL_LANGU2
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_benefit_type_description] 
	DROP CONSTRAINT [PK_TL_BENEFIT_TYPE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_benefit_type_description]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_benefit_type_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_benefit_type_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_benefit_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_benefit_type_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_benefit_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_benefit_type_description'), N'benefit_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [PK_TL_BENEFIT_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[language_code], [benefit_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, benefit_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_benefit_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [FK_TL_BENEF_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_benefit_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_code] 
	DROP CONSTRAINT [pk_code_valuelist]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_code]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [code_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [code_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [code_value]  [varchar]  (1000)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_code]
		ALTER COLUMN  [external_code]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_type] [char]  (50) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_id] [char]  (30) NOT NULL
	ALTER TABLE [dbo].[tl_code]
	ALTER COLUMN [code_value] [varchar]  (1000) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_code'), N'code_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_code] ADD 
	CONSTRAINT [pk_code_valuelist] PRIMARY KEY CLUSTERED 
	(
		[language_code], [code_type], [code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, code_type, code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_COUNT_REF_9601_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_country_state]  
	DROP CONSTRAINT FK_TL_COUNT_REF_9601_TL_COUNT
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REFERENCE_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REFERENCE_TL_COUNT
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_REF_14466_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT FK_form_REF_14466_TL_COUNT
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1059_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1059_tl_count
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1047_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1047_tl_count
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_ppi_sci_REF_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_ppi_sci_REF_TL_COUNT
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_country] 
	DROP CONSTRAINT [PK_TL_COUNTRY]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_country]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_country]
		ALTER COLUMN  [country_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_country]
		ALTER COLUMN  [country_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_country]
		ALTER COLUMN  [country_name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_country]
		ALTER COLUMN  [mib_country]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_country]
		ALTER COLUMN  [alt_country_name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_country]
	ALTER COLUMN [country_id] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_country does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country'), N'country_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_country]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country] ADD 
	CONSTRAINT [PK_TL_COUNTRY] PRIMARY KEY CLUSTERED 
	(
		[country_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_country_state') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [FK_TL_COUNT_REF_9601_TL_COUNT] FOREIGN KEY 
	(	
		[country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_country_state, or the related column: country_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REFERENCE_TL_COUNT] FOREIGN KEY 
	(	
		[citizenship_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [FK_form_REF_14466_TL_COUNT] FOREIGN KEY 
	(	
		[drivers_license_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1059_tl_count] FOREIGN KEY 
	(	
		[birth_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1047_tl_count] FOREIGN KEY 
	(	
		[residence_country]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_id does not exist', 16, 1)
GO
		
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_ppi_sci_REF_TL_COUNT] FOREIGN KEY 
	(	
		[signed_country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_person_insured]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_INSURED_REF_14420_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_person_insured]  
	DROP CONSTRAINT FK_INSURED_REF_14420_TL_COUNT
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[person_address]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_person_a_ref_2023_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[person_address]  
	DROP CONSTRAINT fk_person_a_ref_2023_tl_count
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1055_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1055_tl_count
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_application_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_form_ref_1051_tl_count]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info]  
	DROP CONSTRAINT fk_form_ref_1051_tl_count
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_COUNT_REF_9601_TL_COUNT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_country_state]  
	DROP CONSTRAINT FK_TL_COUNT_REF_9601_TL_COUNT
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_country_state] 
	DROP CONSTRAINT [PK_TL_COUNTRY_STATE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_country_state]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_country_state]
		ALTER COLUMN  [country_state_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_country_state]
		ALTER COLUMN  [country_id]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_country_state]
		ALTER COLUMN  [state_code]  [char]  (5)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_country_state]
		ALTER COLUMN  [state_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_country_state]
		ALTER COLUMN  [alt_state_name]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [country_state_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [country_id] [char]  (30) NOT NULL
	ALTER TABLE [dbo].[tl_country_state]
	ALTER COLUMN [state_code] [char]  (5) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_country_state does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_country_state'), N'country_state_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_country_state]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [PK_TL_COUNTRY_STATE] PRIMARY KEY CLUSTERED 
	(
		[country_state_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): country_state_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'policy_person_insured') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_person_insured] ADD 
	CONSTRAINT [FK_INSURED_REF_14420_TL_COUNT] FOREIGN KEY 
	(	
		[signed_state_id]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_person_insured, or the related column: country_state_id does not exist', 16, 1)
GO
		
IF object_id(N'person_address') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[person_address] ADD 
	CONSTRAINT [fk_person_a_ref_2023_tl_count] FOREIGN KEY 
	(	
		[country_state_id]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person_address, or the related column: country_state_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1055_tl_count] FOREIGN KEY 
	(	
		[drivers_license_state]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_state_id does not exist', 16, 1)
GO
		
IF object_id(N'insured_application_info') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country_state'), N'country_state_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_application_info] ADD 
	CONSTRAINT [fk_form_ref_1051_tl_count] FOREIGN KEY 
	(	
		[residence_state]
	) REFERENCES [dbo].[tl_country_state] ( 
		[country_state_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_application_info, or the related column: country_state_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_country_state') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_country'), N'country_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_country_state] ADD 
	CONSTRAINT [FK_TL_COUNT_REF_9601_TL_COUNT] FOREIGN KEY 
	(	
		[country_id]
	) REFERENCES [dbo].[tl_country] ( 
		[country_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_country_state, or the related column: country_id does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_indicator_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_coverage_indicator_code] 
	DROP CONSTRAINT [PK_TL_COVERAGE_INDICATOR_CODE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_coverage_indicator_code]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_indicator_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_coverage_indicator_code]
		ALTER COLUMN  [indicator_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_coverage_indicator_code]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_coverage_indicator_code]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_coverage_indicator_code]
	ALTER COLUMN [indicator_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_coverage_indicator_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_coverage_indicator_code'), N'indicator_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_indicator_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_coverage_indicator_code] ADD 
	CONSTRAINT [PK_TL_COVERAGE_INDICATOR_CODE] PRIMARY KEY CLUSTERED 
	(
		[indicator_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): indicator_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_coverage_type] 
	DROP CONSTRAINT [PK_TL_COVERAGE_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_coverage_type]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_coverage_type]
		ALTER COLUMN  [coverage_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_coverage_type]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_coverage_type]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_coverage_type]
	ALTER COLUMN [coverage_type] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_coverage_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_coverage_type'), N'coverage_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_coverage_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_coverage_type] ADD 
	CONSTRAINT [PK_TL_COVERAGE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[coverage_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): coverage_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_DEATH]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_DEATH
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_death_benefit_option] 
	DROP CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_death_benefit_option]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_death_benefit_option]
		ALTER COLUMN  [death_benefit_option_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_death_benefit_option]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_death_benefit_option]
	ALTER COLUMN [death_benefit_option_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_death_benefit_option does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option'), N'death_benefit_option_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option] ADD 
	CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION] PRIMARY KEY CLUSTERED 
	(
		[death_benefit_option_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): death_benefit_option_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_death_benefit_option'), N'death_benefit_option_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_DEATH] FOREIGN KEY 
	(	
		[death_benefit_option_code]
	) REFERENCES [dbo].[tl_death_benefit_option] ( 
		[death_benefit_option_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: death_benefit_option_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_DEATH]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_DEATH
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] 
	DROP CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION_DES]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_death_benefit_option_desc]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
		ALTER COLUMN  [death_benefit_option_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
	ALTER COLUMN [death_benefit_option_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_death_benefit_option_desc does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option_desc'), N'death_benefit_option_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_death_benefit_option_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [PK_TL_DEATH_BENEFIT_OPTION_DES] PRIMARY KEY CLUSTERED 
	(
		[death_benefit_option_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): death_benefit_option_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_death_benefit_option'), N'death_benefit_option_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_DEATH] FOREIGN KEY 
	(	
		[death_benefit_option_code]
	) REFERENCES [dbo].[tl_death_benefit_option] ( 
		[death_benefit_option_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: death_benefit_option_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_distributor_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_distributor_codes] 
	DROP CONSTRAINT [PK_distributor]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_distributor_codes]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_distributor_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_distributor_codes]
		ALTER COLUMN  [distributor_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_distributor_codes]
		ALTER COLUMN  [distributor_description]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_distributor_codes]
	ALTER COLUMN [distributor_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_distributor_codes]
	ALTER COLUMN [distributor_description] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_distributor_codes does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_distributor_codes'), N'distributor_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_distributor_codes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_distributor_codes] ADD 
	CONSTRAINT [PK_distributor] PRIMARY KEY CLUSTERED 
	(
		[distributor_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): distributor_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_extended_property] 
	DROP CONSTRAINT [PK_TL_EXTENDED_PROPERTY]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_extended_property]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_extended_property]
		ALTER COLUMN  [property_name]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_extended_property]
		ALTER COLUMN  [description]  [varchar]  (255)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_extended_property]
	ALTER COLUMN [property_name] [varchar]  (255) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_extended_property does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_extended_property'), N'property_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_extended_property]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_extended_property] ADD 
	CONSTRAINT [PK_TL_EXTENDED_PROPERTY] PRIMARY KEY CLUSTERED 
	(
		[property_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): property_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_family_history_relationship]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_family_history_relationship] 
	DROP CONSTRAINT [PK_TL_FAMILY_HISTORY_RELATIONS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_family_history_relationship]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_family_history_relationship]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_family_history_relationship]
		ALTER COLUMN  [famhist_relationship_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_family_history_relationship]
	ALTER COLUMN [famhist_relationship_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_family_history_relationship does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_family_history_relationship'), N'famhist_relationship_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_family_history_relationship]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_family_history_relationship] ADD 
	CONSTRAINT [PK_TL_FAMILY_HISTORY_RELATIONS] PRIMARY KEY CLUSTERED 
	(
		[famhist_relationship_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): famhist_relationship_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_final_action_reason]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_final_action_reason] 
	DROP CONSTRAINT [PK_TL_FINAL_ACTION_REASON]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_final_action_reason]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_final_action_reason]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_final_action_reason]
		ALTER COLUMN  [reason_status]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_final_action_reason]
		ALTER COLUMN  [reason_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_final_action_reason]
		ALTER COLUMN  [alt_reason_text]  [varchar]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_final_action_reason]
		ALTER COLUMN  [reason_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_final_action_reason]
	ALTER COLUMN [reason_status] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_final_action_reason]
	ALTER COLUMN [reason_text] [varchar]  (100) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_final_action_reason does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_final_action_reason'), N'reason_text', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_final_action_reason]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_final_action_reason] ADD 
	CONSTRAINT [PK_TL_FINAL_ACTION_REASON] PRIMARY KEY CLUSTERED 
	(
		[reason_text]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): reason_text do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[form]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_form_tl_form_type]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[form]  
	DROP CONSTRAINT FK_form_tl_form_type
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_form_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_form_type] 
	DROP CONSTRAINT [PK_tl_form_type]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_form_type]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_form_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_form_type]
		ALTER COLUMN  [form_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_form_type]
		ALTER COLUMN  [form_name]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_form_type]
		ALTER COLUMN  [form_desc]  [char]  (250)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_form_type]
		ALTER COLUMN  [external_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_form_type]
	ALTER COLUMN [form_type] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_form_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_form_type'), N'form_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_form_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_form_type] ADD 
	CONSTRAINT [PK_tl_form_type] PRIMARY KEY CLUSTERED 
	(
		[form_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): form_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'form') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_form_type'), N'form_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[form] ADD 
	CONSTRAINT [FK_form_tl_form_type] FOREIGN KEY 
	(	
		[form_type]
	) REFERENCES [dbo].[tl_form_type] ( 
		[form_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: form, or the related column: form_type does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_lab_request] 
	DROP CONSTRAINT [PK_TL_LAB_REQUEST]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_lab_request]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_lab_request]
		ALTER COLUMN  [request_code]  [varchar]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_lab_request]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_lab_request]
	ALTER COLUMN [request_code] [varchar]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_lab_request does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_lab_request'), N'request_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_request]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_lab_request] ADD 
	CONSTRAINT [PK_TL_LAB_REQUEST] PRIMARY KEY CLUSTERED 
	(
		[request_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): request_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_lab_specimen_id]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match]  
	DROP CONSTRAINT FK_lab_specimen_id
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_ansi_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_tl_ansi__ref_10810_tl_lab_s]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_ansi_code]  
	DROP CONSTRAINT fk_tl_ansi__ref_10810_tl_lab_s
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_specimen]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_lab_specimen] 
	DROP CONSTRAINT [PK_TL_LAB_SPECIMEN]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_lab_specimen]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_specimen]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_lab_specimen]
		ALTER COLUMN  [lab_specimin_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_lab_specimen]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_lab_specimen]
	ALTER COLUMN [lab_specimin_id] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_lab_specimen does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_lab_specimen]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_lab_specimen] ADD 
	CONSTRAINT [PK_TL_LAB_SPECIMEN] PRIMARY KEY CLUSTERED 
	(
		[lab_specimin_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): lab_specimin_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'requirement_match') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [FK_lab_specimen_id] FOREIGN KEY 
	(	
		[lab_specimen_id]
	) REFERENCES [dbo].[tl_lab_specimen] ( 
		[lab_specimin_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_match, or the related column: lab_specimin_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_ansi_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_lab_specimen'), N'lab_specimin_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_ansi_code] ADD 
	CONSTRAINT [fk_tl_ansi__ref_10810_tl_lab_s] FOREIGN KEY 
	(	
		[lab_specimen_id]
	) REFERENCES [dbo].[tl_lab_specimen] ( 
		[lab_specimin_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_ansi_code, or the related column: lab_specimin_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_LANGU2
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_benefit_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_benefit_type_description]  
	DROP CONSTRAINT FK_TL_BENEF_REF_TL_LANGU2
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_beneficiary_type_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_BENEF_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc]  
	DROP CONSTRAINT FK_TL_BENEF_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_death_benefit_option_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_DEATH_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc]  
	DROP CONSTRAINT FK_TL_DEATH_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_LANGU2
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_address_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_ADDRE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description]  
	DROP CONSTRAINT FK_TL_ADDRE_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_LANGU
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_language]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_language] 
	DROP CONSTRAINT [PK_TL_LANGUAGE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_language]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_language]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_language]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_language]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_language]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_language]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_language does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_language'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_language]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_language] ADD 
	CONSTRAINT [PK_TL_LANGUAGE] PRIMARY KEY CLUSTERED 
	(
		[language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_benefit_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_benefit_type_description] ADD 
	CONSTRAINT [FK_TL_BENEF_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_benefit_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_beneficiary_type_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_beneficiary_type_desc] ADD 
	CONSTRAINT [FK_TL_BENEF_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_beneficiary_type_desc, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_death_benefit_option_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_death_benefit_option_desc] ADD 
	CONSTRAINT [FK_TL_DEATH_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_death_benefit_option_desc, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_address_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_address_type_description] ADD 
	CONSTRAINT [FK_TL_ADDRE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_address_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_marital_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_marital_status] 
	DROP CONSTRAINT [PK_tl_marital_status]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_marital_status]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_marital_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_marital_status]
		ALTER COLUMN  [marital_status_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_marital_status]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_marital_status]
		ALTER COLUMN  [external_code]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_marital_status]
	ALTER COLUMN [marital_status_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_marital_status does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_marital_status'), N'marital_status_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_marital_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_marital_status] ADD 
	CONSTRAINT [PK_tl_marital_status] PRIMARY KEY CLUSTERED 
	(
		[marital_status_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): marital_status_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_NOTE_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_NOTE_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_note_type] 
	DROP CONSTRAINT [PK_TL_NOTE_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_note_type]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_note_type]
		ALTER COLUMN  [note_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_note_type]
	ALTER COLUMN [note_type] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_note_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type'), N'note_type', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type] ADD 
	CONSTRAINT [PK_TL_NOTE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[note_type]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_type do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_note_type'), N'note_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_NOTE_] FOREIGN KEY 
	(	
		[note_type]
	) REFERENCES [dbo].[tl_note_type] ( 
		[note_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: note_type does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_LANGU
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_NOTE__REFERENCE_TL_NOTE_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description]  
	DROP CONSTRAINT FK_TL_NOTE__REFERENCE_TL_NOTE_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_note_type_description] 
	DROP CONSTRAINT [PK_TL_NOTE_TYPE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_note_type_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_note_type_description]
		ALTER COLUMN  [note_type]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_note_type_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_note_type_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_note_type_description]
	ALTER COLUMN [note_type] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_note_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_note_type_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type_description'), N'note_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_note_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_note_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [PK_TL_NOTE_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[note_type], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): note_type, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_note_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_note_type'), N'note_type', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_note_type_description] ADD 
	CONSTRAINT [FK_TL_NOTE__REFERENCE_TL_NOTE_] FOREIGN KEY 
	(	
		[note_type]
	) REFERENCES [dbo].[tl_note_type] ( 
		[note_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_note_type_description, or the related column: note_type does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_person_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_person_type] 
	DROP CONSTRAINT [PK_TL_PERSON_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_person_type]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_person_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_person_type]
		ALTER COLUMN  [person_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_person_type]
		ALTER COLUMN  [description]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_person_type]
	ALTER COLUMN [person_type_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_person_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_person_type'), N'person_type_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_person_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_person_type] ADD 
	CONSTRAINT [PK_TL_PERSON_TYPE] PRIMARY KEY CLUSTERED 
	(
		[person_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): person_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_PHONE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_PHONE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_phone_type] 
	DROP CONSTRAINT [PK_TL_PHONE_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_phone_type]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_phone_type]
		ALTER COLUMN  [phone_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_phone_type]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_phone_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type'), N'phone_type_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type] ADD 
	CONSTRAINT [PK_TL_PHONE_TYPE] PRIMARY KEY CLUSTERED 
	(
		[phone_type_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): phone_type_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_phone_type'), N'phone_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_PHONE] FOREIGN KEY 
	(	
		[phone_type_code]
	) REFERENCES [dbo].[tl_phone_type] ( 
		[phone_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: phone_type_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_PHONE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_PHONE
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PHONE_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description]  
	DROP CONSTRAINT FK_TL_PHONE_REFERENCE_TL_LANGU
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_phone_type_description] 
	DROP CONSTRAINT [PK_TL_PHONE_TYPE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_phone_type_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_phone_type_description]
		ALTER COLUMN  [phone_type_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_phone_type_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_phone_type_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_phone_type_description]
	ALTER COLUMN [phone_type_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_phone_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_phone_type_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type_description'), N'phone_type_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_phone_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_phone_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [PK_TL_PHONE_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[phone_type_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): phone_type_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_phone_type'), N'phone_type_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_PHONE] FOREIGN KEY 
	(	
		[phone_type_code]
	) REFERENCES [dbo].[tl_phone_type] ( 
		[phone_type_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: phone_type_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_phone_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_phone_type_description] ADD 
	CONSTRAINT [FK_TL_PHONE_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_phone_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[policy_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_POLICY_C_REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_coverage]  
	DROP CONSTRAINT FK_POLICY_C_REFERENCE_TL_PLAN_
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PLAN_OPTION_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_option]  
	DROP CONSTRAINT FK_TL_PLAN_OPTION_PLAN_CODE
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[elimination_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_elimination_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[elimination_period]  
	DROP CONSTRAINT FK_elimination_period_plan
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[benefit_period]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_benefit_period_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[benefit_period]  
	DROP CONSTRAINT FK_benefit_period_plan
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[employer_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_EMPLOYER_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[employer_plan]  
	DROP CONSTRAINT FK_EMPLOYER_PLAN_CODE
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[fk_plan_code_lob]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_code]  
	DROP CONSTRAINT fk_plan_code_lob
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_PLAN__REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_plan_code_rulebook]  
	DROP CONSTRAINT FK_TR_PLAN__REFERENCE_TL_PLAN_
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_plan
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[plan_benefit]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_plan_benefit_plan]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[plan_benefit]  
	DROP CONSTRAINT FK_plan_benefit_plan
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_plan_code] 
	DROP CONSTRAINT [PK_TL_PLAN_CODE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_plan_code]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_plan_code]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_plan_code]
		ALTER COLUMN  [description]  [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_plan_code]
		ALTER COLUMN  [line_of_business_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_plan_code]
		ALTER COLUMN  [alt_lang]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_plan_code]
		ALTER COLUMN  [alt_description]  [varchar]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_plan_code]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_plan_code does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_code'), N'plan_code_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_code] ADD 
	CONSTRAINT [PK_TL_PLAN_CODE] PRIMARY KEY CLUSTERED 
	(
		[plan_code_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): plan_code_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'policy_coverage') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[policy_coverage] ADD 
	CONSTRAINT [FK_POLICY_C_REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: policy_coverage, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_plan_option') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_option] ADD 
	CONSTRAINT [FK_TL_PLAN_OPTION_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_option, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'elimination_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[elimination_period] ADD 
	CONSTRAINT [FK_elimination_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: elimination_period, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'benefit_period') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[benefit_period] ADD 
	CONSTRAINT [FK_benefit_period_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: benefit_period, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'employer_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[employer_plan] ADD 
	CONSTRAINT [FK_EMPLOYER_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: employer_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_plan_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'line_of_business'), N'line_of_business_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_code] ADD 
	CONSTRAINT [fk_plan_code_lob] FOREIGN KEY 
	(	
		[line_of_business_code]
	) REFERENCES [dbo].[line_of_business] ( 
		[line_of_business_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_code, or the related column: line_of_business_code does not exist', 16, 1)
GO
		
IF object_id(N'tr_plan_code_rulebook') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_plan_code_rulebook] ADD 
	CONSTRAINT [FK_TR_PLAN__REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_plan_code_rulebook, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: plan_code_id does not exist', 16, 1)
GO
		
IF object_id(N'plan_benefit') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[plan_benefit] ADD 
	CONSTRAINT [FK_plan_benefit_plan] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: plan_benefit, or the related column: plan_code_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PLAN_OPTION_PLAN_CODE]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_option]  
	DROP CONSTRAINT FK_TL_PLAN_OPTION_PLAN_CODE
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_plan_option] 
	DROP CONSTRAINT [PK_tl_plan_option]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_plan_option]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_plan_option]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_plan_option]
		ALTER COLUMN  [option_type]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_plan_option]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_plan_option]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [option_type] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_plan_option]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_plan_option does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'language_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'option_type', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'plan_code_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_plan_option'), N'sequence_number', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_plan_option]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_plan_option] ADD 
	CONSTRAINT [PK_tl_plan_option] PRIMARY KEY CLUSTERED 
	(
		[language_code], [option_type], [plan_code_id], [sequence_number]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): language_code, option_type, plan_code_id, sequence_number do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_plan_option') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_plan_option] ADD 
	CONSTRAINT [FK_TL_PLAN_OPTION_PLAN_CODE] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_plan_option, or the related column: plan_code_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_POLIC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_POLIC
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_policy_role] 
	DROP CONSTRAINT [PK_TL_POLICY_ROLE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_policy_role]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_policy_role]
		ALTER COLUMN  [code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_policy_role]
	ALTER COLUMN [code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_policy_role does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role'), N'code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role] ADD 
	CONSTRAINT [PK_TL_POLICY_ROLE] PRIMARY KEY CLUSTERED 
	(
		[code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_role'), N'code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_POLIC] FOREIGN KEY 
	(	
		[code]
	) REFERENCES [dbo].[tl_policy_role] ( 
		[code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_POLIC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_POLIC
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description]  
	DROP CONSTRAINT FK_TL_POLIC_REFERENCE_TL_LANGU
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_policy_role_description] 
	DROP CONSTRAINT [PK_TL_POLICY_ROLE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_policy_role_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_policy_role_description]
		ALTER COLUMN  [code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_policy_role_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_policy_role_description]
		ALTER COLUMN  [description]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_policy_role_description]
	ALTER COLUMN [code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_policy_role_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_policy_role_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role_description'), N'code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_role_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_role_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [PK_TL_POLICY_ROLE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_role'), N'code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_POLIC] FOREIGN KEY 
	(	
		[code]
	) REFERENCES [dbo].[tl_policy_role] ( 
		[code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: code does not exist', 16, 1)
GO
		
IF object_id(N'tl_policy_role_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_role_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_role_description, or the related column: language_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_POLIC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_POLIC2
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_policy_status] 
	DROP CONSTRAINT [PK_TL_POLICY_STATUS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_policy_status]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_policy_status]
		ALTER COLUMN  [policy_status_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_policy_status]
		ALTER COLUMN  [short_code]  [char]  (2)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_policy_status]
	ALTER COLUMN [policy_status_code] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_policy_status does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status'), N'policy_status_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status] ADD 
	CONSTRAINT [PK_TL_POLICY_STATUS] PRIMARY KEY CLUSTERED 
	(
		[policy_status_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_status_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_status'), N'policy_status_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_POLIC2] FOREIGN KEY 
	(	
		[policy_status_code]
	) REFERENCES [dbo].[tl_policy_status] ( 
		[policy_status_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: policy_status_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_POLIC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_POLIC2
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_POLIC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description]  
	DROP CONSTRAINT FK_TL_POLIC_REF_TL_LANGU2
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_policy_status_description] 
	DROP CONSTRAINT [PK_TL_POLICY_STATUS_DESCRIPTIO]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_policy_status_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_policy_status_description]
		ALTER COLUMN  [policy_status_code]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_policy_status_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_policy_status_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_policy_status_description]
	ALTER COLUMN [policy_status_code] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_policy_status_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_policy_status_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status_description'), N'policy_status_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_policy_status_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_policy_status_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [PK_TL_POLICY_STATUS_DESCRIPTIO] PRIMARY KEY CLUSTERED 
	(
		[policy_status_code], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): policy_status_code, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_policy_status'), N'policy_status_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_POLIC2] FOREIGN KEY 
	(	
		[policy_status_code]
	) REFERENCES [dbo].[tl_policy_status] ( 
		[policy_status_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: policy_status_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_policy_status_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_policy_status_description] ADD 
	CONSTRAINT [FK_TL_POLIC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_policy_status_description, or the related column: language_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_PURPO]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_PURPO
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_purpose_of_coverage] 
	DROP CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_purpose_of_coverage]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_purpose_of_coverage]
		ALTER COLUMN  [purpose_of_coverage_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_purpose_of_coverage]
	ALTER COLUMN [purpose_of_coverage_id] [char]  (20) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_purpose_of_coverage does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage'), N'purpose_of_coverage_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage] ADD 
	CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE] PRIMARY KEY CLUSTERED 
	(
		[purpose_of_coverage_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): purpose_of_coverage_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_purpose_of_coverage'), N'purpose_of_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_PURPO] FOREIGN KEY 
	(	
		[purpose_of_coverage_id]
	) REFERENCES [dbo].[tl_purpose_of_coverage] ( 
		[purpose_of_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: purpose_of_coverage_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_PURPO]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_PURPO
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_PURPO_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]  
	DROP CONSTRAINT FK_TL_PURPO_REFERENCE_TL_LANGU
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] 
	DROP CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE_DESC]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_purpose_of_coverage_desc]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
		ALTER COLUMN  [purpose_of_coverage_id]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
	ALTER COLUMN [purpose_of_coverage_id] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_purpose_of_coverage_desc does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage_desc'), N'purpose_of_coverage_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_purpose_of_coverage_desc'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_purpose_of_coverage_desc]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [PK_TL_PURPOSE_OF_COVERAGE_DESC] PRIMARY KEY CLUSTERED 
	(
		[purpose_of_coverage_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): purpose_of_coverage_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_purpose_of_coverage'), N'purpose_of_coverage_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_PURPO] FOREIGN KEY 
	(	
		[purpose_of_coverage_id]
	) REFERENCES [dbo].[tl_purpose_of_coverage] ( 
		[purpose_of_coverage_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: purpose_of_coverage_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_purpose_of_coverage_desc') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_purpose_of_coverage_desc] ADD 
	CONSTRAINT [FK_TL_PURPO_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_purpose_of_coverage_desc, or the related column: language_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_tl_requirement_provider]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_requirement]  
	DROP CONSTRAINT FK_tl_requirement_provider
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[requirement_match]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_requirement_code]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match]  
	DROP CONSTRAINT FK_requirement_code
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_GROUP_REF_1197_TL_REQUI]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_group_requirements]  
	DROP CONSTRAINT FK_TR_GROUP_REF_1197_TL_REQUI
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[insured_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_insured_req_tl_requirement]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement]  
	DROP CONSTRAINT FK_insured_req_tl_requirement
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_requirement] 
	DROP CONSTRAINT [PK_TL_REQUIREMENT]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_requirement]: 9
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [requirement_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [requirement_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [requirement_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [default_ordered_by]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [external_requirement_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [provider]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [evidence_type]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [alt_lang]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement]
		ALTER COLUMN  [alt_name]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_requirement]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_requirement does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement'), N'requirement_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [PK_TL_REQUIREMENT] PRIMARY KEY CLUSTERED 
	(
		[requirement_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'provider'), N'provider', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_requirement] ADD 
	CONSTRAINT [FK_tl_requirement_provider] FOREIGN KEY 
	(	
		[provider],
		[evidence_type]
	) REFERENCES [dbo].[provider] ( 
		[provider],
		[evidence_type]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_requirement, or the related column: provider does not exist', 16, 1)
GO
		
IF object_id(N'requirement_match') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[requirement_match] ADD 
	CONSTRAINT [FK_requirement_code] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: requirement_match, or the related column: requirement_code does not exist', 16, 1)
GO
		
IF object_id(N'tr_group_requirements') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [FK_TR_GROUP_REF_1197_TL_REQUI] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_group_requirements, or the related column: requirement_code does not exist', 16, 1)
GO
		
IF object_id(N'insured_requirement') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[insured_requirement] ADD 
	CONSTRAINT [FK_insured_req_tl_requirement] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: insured_requirement, or the related column: requirement_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_requirement_group] 
	DROP CONSTRAINT [unique_requirement_group_name]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_requirement_group]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_requirement_group]
		ALTER COLUMN  [name]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_requirement_group]
		ALTER COLUMN  [description]  [char]  (254)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_requirement_group does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement_group'), N'name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement_group] ADD 
	CONSTRAINT [unique_requirement_group_name] UNIQUE NONCLUSTERED 
	(
		[name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_requirement_type] 
	DROP CONSTRAINT [PK_TL_REQUIREMENT_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_requirement_type]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_requirement_type]
		ALTER COLUMN  [requirement_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_requirement_type]
		ALTER COLUMN  [description]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_requirement_type]
	ALTER COLUMN [requirement_type_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_requirement_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_requirement_type'), N'requirement_type_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_requirement_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_requirement_type] ADD 
	CONSTRAINT [PK_TL_REQUIREMENT_TYPE] PRIMARY KEY CLUSTERED 
	(
		[requirement_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_source_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_source_info] 
	DROP CONSTRAINT [PK_source_info]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_source_info]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_source_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_source_info]
		ALTER COLUMN  [source_info]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_source_info]
		ALTER COLUMN  [source_description]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_source_info]
		ALTER COLUMN  [partner_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_source_info]
	ALTER COLUMN [source_info] [char]  (20) NOT NULL
	ALTER TABLE [dbo].[tl_source_info]
	ALTER COLUMN [source_description] [char]  (30) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_source_info does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_source_info'), N'source_info', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_source_info]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_source_info] ADD 
	CONSTRAINT [PK_source_info] PRIMARY KEY CLUSTERED 
	(
		[source_info]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): source_info do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[coverage_subaccounts]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_COVERAGE_REFERENCE_TL_SUBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_subaccounts]  
	DROP CONSTRAINT FK_COVERAGE_REFERENCE_TL_SUBAC
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_subaccount]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_subaccount] 
	DROP CONSTRAINT [PK_TL_SUBACCOUNT]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_subaccount]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_subaccount]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_subaccount]
		ALTER COLUMN  [subaccount_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_subaccount]
		ALTER COLUMN  [full_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tl_subaccount]
		ALTER COLUMN  [product_symbol]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_subaccount]
	ALTER COLUMN [subaccount_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_subaccount does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_subaccount'), N'subaccount_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_subaccount]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_subaccount] ADD 
	CONSTRAINT [PK_TL_SUBACCOUNT] PRIMARY KEY CLUSTERED 
	(
		[subaccount_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): subaccount_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'coverage_subaccounts') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_subaccount'), N'subaccount_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[coverage_subaccounts] ADD 
	CONSTRAINT [FK_COVERAGE_REFERENCE_TL_SUBAC] FOREIGN KEY 
	(	
		[subaccount_code]
	) REFERENCES [dbo].[tl_subaccount] ( 
		[subaccount_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: coverage_subaccounts, or the related column: subaccount_code does not exist', 16, 1)
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tax_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_tax_type] 
	DROP CONSTRAINT [PK_TL_TAX_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_tax_type]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tax_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_tax_type]
		ALTER COLUMN  [tax_type_id]  [char]  (4)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tax_type]
		ALTER COLUMN  [description]  [varchar]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_tax_type]
	ALTER COLUMN [tax_type_id] [char]  (4) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_tax_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tax_type'), N'tax_type_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_tax_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tax_type] ADD 
	CONSTRAINT [PK_TL_TAX_TYPE] PRIMARY KEY CLUSTERED 
	(
		[tax_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tax_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_TOBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_TOBAC
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_tobacco_type] 
	DROP CONSTRAINT [PK_TL_TOBACCO_TYPE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_tobacco_type]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_tobacco_type]
		ALTER COLUMN  [tobacco_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_type]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_tobacco_type]
	ALTER COLUMN [tobacco_type_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_tobacco_type does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type'), N'tobacco_type_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type] ADD 
	CONSTRAINT [PK_TL_TOBACCO_TYPE] PRIMARY KEY CLUSTERED 
	(
		[tobacco_type_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_type_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_type'), N'tobacco_type_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_TOBAC] FOREIGN KEY 
	(	
		[tobacco_type_id]
	) REFERENCES [dbo].[tl_tobacco_type] ( 
		[tobacco_type_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: tobacco_type_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_TOBAC]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_TOBAC
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REFERENCE_TL_LANGU]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REFERENCE_TL_LANGU
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_tobacco_type_description] 
	DROP CONSTRAINT [PK_TL_TOBACCO_TYPE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_tobacco_type_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_tobacco_type_description]
		ALTER COLUMN  [tobacco_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_type_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_type_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_tobacco_type_description]
	ALTER COLUMN [tobacco_type_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_tobacco_type_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_tobacco_type_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type_description'), N'tobacco_type_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_type_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_type_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [PK_TL_TOBACCO_TYPE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[tobacco_type_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_type_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_type'), N'tobacco_type_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_TOBAC] FOREIGN KEY 
	(	
		[tobacco_type_id]
	) REFERENCES [dbo].[tl_tobacco_type] ( 
		[tobacco_type_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: tobacco_type_id does not exist', 16, 1)
GO
		
IF object_id(N'tl_tobacco_type_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_type_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REFERENCE_TL_LANGU] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_type_description, or the related column: language_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_TOBAC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_TOBAC2
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_tobacco_use] 
	DROP CONSTRAINT [PK_TL_TOBACCO_USE]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_tobacco_use]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_tobacco_use]
		ALTER COLUMN  [tobacco_use_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_use]
		ALTER COLUMN  [external_code]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_tobacco_use]
	ALTER COLUMN [tobacco_use_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_tobacco_use does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use'), N'tobacco_use_id', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use] ADD 
	CONSTRAINT [PK_TL_TOBACCO_USE] PRIMARY KEY CLUSTERED 
	(
		[tobacco_use_id]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_use_id do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_use'), N'tobacco_use_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_TOBAC2] FOREIGN KEY 
	(	
		[tobacco_use_id]
	) REFERENCES [dbo].[tl_tobacco_use] ( 
		[tobacco_use_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: tobacco_use_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_LANGU2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_LANGU2
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TL_TOBAC_REF_TL_TOBAC2]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description]  
	DROP CONSTRAINT FK_TL_TOBAC_REF_TL_TOBAC2
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tl_tobacco_use_description] 
	DROP CONSTRAINT [PK_TL_TOBACCO_USE_DESCRIPTION]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tl_tobacco_use_description]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tl_tobacco_use_description]
		ALTER COLUMN  [tobacco_use_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_use_description]
		ALTER COLUMN  [language_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tl_tobacco_use_description]
		ALTER COLUMN  [description]  [varchar]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tl_tobacco_use_description]
	ALTER COLUMN [tobacco_use_id] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tl_tobacco_use_description]
	ALTER COLUMN [language_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tl_tobacco_use_description does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use_description'), N'tobacco_use_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tl_tobacco_use_description'), N'language_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tl_tobacco_use_description]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [PK_TL_TOBACCO_USE_DESCRIPTION] PRIMARY KEY CLUSTERED 
	(
		[tobacco_use_id], [language_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tobacco_use_id, language_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_language'), N'language_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_LANGU2] FOREIGN KEY 
	(	
		[language_code]
	) REFERENCES [dbo].[tl_language] ( 
		[language_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: language_code does not exist', 16, 1)
GO
		
IF object_id(N'tl_tobacco_use_description') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_tobacco_use'), N'tobacco_use_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tl_tobacco_use_description] ADD 
	CONSTRAINT [FK_TL_TOBAC_REF_TL_TOBAC2] FOREIGN KEY 
	(	
		[tobacco_use_id]
	) REFERENCES [dbo].[tl_tobacco_use] ( 
		[tobacco_use_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tl_tobacco_use_description, or the related column: tobacco_use_id does not exist', 16, 1)
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tobacco]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tobacco]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tobacco]
		ALTER COLUMN  [tobacco_use_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tobacco]
		ALTER COLUMN  [tobacco_type_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: tobacco does not exist in catalog!', 16, 1)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_tpa
END	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[billing_code]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_billing_code_tpa]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code]  
	DROP CONSTRAINT FK_billing_code_tpa
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [tpa].[IX_tpa_acronym] 

END
GO
		
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tpa] 
	DROP CONSTRAINT [PK_tpa]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tpa]: 4
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tpa]
		ALTER COLUMN  [tpa_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tpa]
		ALTER COLUMN  [tpa_short_name]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tpa]
		ALTER COLUMN  [contact_last_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[tpa]
		ALTER COLUMN  [contact_first_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tpa]
	ALTER COLUMN [tpa_code] [char]  (10) NOT NULL
	ALTER TABLE [dbo].[tpa]
	ALTER COLUMN [tpa_short_name] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tpa does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE UNIQUE INDEX [IX_tpa_acronym] ON [dbo].[tpa]([tpa_short_name]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tpa'), N'tpa_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tpa]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tpa] ADD 
	CONSTRAINT [PK_tpa] PRIMARY KEY CLUSTERED 
	(
		[tpa_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): tpa_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: tpa_code does not exist', 16, 1)
GO
		
IF object_id(N'billing_code') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tpa'), N'tpa_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[billing_code] ADD 
	CONSTRAINT [FK_billing_code_tpa] FOREIGN KEY 
	(	
		[tpa_code]
	) REFERENCES [dbo].[tpa] ( 
		[tpa_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: billing_code, or the related column: tpa_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_GROUP_REF_1197_TL_REQUI]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_group_requirements]  
	DROP CONSTRAINT FK_TR_GROUP_REF_1197_TL_REQUI
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[tr_group_requirements] 
	DROP CONSTRAINT [PK_TR_GROUP_REQUIREMENTS]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tr_group_requirements]: 1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tr_group_requirements]
		ALTER COLUMN  [requirement_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tr_group_requirements]
	ALTER COLUMN [requirement_code] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tr_group_requirements does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_group_requirements'), N'requirement_group_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'tr_group_requirements'), N'requirement_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[tr_group_requirements]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [PK_TR_GROUP_REQUIREMENTS] PRIMARY KEY CLUSTERED 
	(
		[requirement_group_id], [requirement_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): requirement_group_id, requirement_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'tr_group_requirements') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_requirement'), N'requirement_code', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_group_requirements] ADD 
	CONSTRAINT [FK_TR_GROUP_REF_1197_TL_REQUI] FOREIGN KEY 
	(	
		[requirement_code]
	) REFERENCES [dbo].[tl_requirement] ( 
		[requirement_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_group_requirements, or the related column: requirement_code does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_TR_PLAN__REFERENCE_TL_PLAN_]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_plan_code_rulebook]  
	DROP CONSTRAINT FK_TR_PLAN__REFERENCE_TL_PLAN_
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	DROP INDEX [tr_plan_code_rulebook].[ix_plan_code_rulebook] 

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [tr_plan_code_rulebook]: 2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[tr_plan_code_rulebook]
		ALTER COLUMN  [plan_code_id]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[tr_plan_code_rulebook]
		ALTER COLUMN  [association_code]  [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[tr_plan_code_rulebook]
	ALTER COLUMN [plan_code_id] [char]  (10) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: tr_plan_code_rulebook does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[tr_plan_code_rulebook]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_plan_code_rulebook] ON [dbo].[tr_plan_code_rulebook]([plan_code_id], [rulebook_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
IF object_id(N'tr_plan_code_rulebook') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'tl_plan_code'), N'plan_code_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[tr_plan_code_rulebook] ADD 
	CONSTRAINT [FK_TR_PLAN__REFERENCE_TL_PLAN_] FOREIGN KEY 
	(	
		[plan_code_id]
	) REFERENCES [dbo].[tl_plan_code] ( 
		[plan_code_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: tr_plan_code_rulebook, or the related column: plan_code_id does not exist', 16, 1)
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_UNDERWRI_REF_5297_TA_POINT]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
-- drop existing References and re-add later to prevent issues with dependant columns
	ALTER TABLE [dbo].[underwriting_detail]  
	DROP CONSTRAINT FK_UNDERWRI_REF_5297_TA_POINT
END	
GO

		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
-- drop existing indexes to re-add later to prevent issues with dependant columns
		
	ALTER TABLE [dbo].[underwriting_detail] 
	DROP CONSTRAINT [PK_UNDERWRITING_DETAIL]		

END
GO
		
-- COUNT OF ALTERED COLUMNS IN TABLE [underwriting_detail]: 5
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- Alter existing table columns 
	ALTER TABLE [dbo].[underwriting_detail]
		ALTER COLUMN  [rule_name]  [char]  (50)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL 
	ALTER TABLE [dbo].[underwriting_detail]
		ALTER COLUMN  [based_on]  [char]  (100)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[underwriting_detail]
		ALTER COLUMN  [result_text]  [char]  (20)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[underwriting_detail]
		ALTER COLUMN  [run_status]  [char]  (30)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	ALTER TABLE [dbo].[underwriting_detail]
		ALTER COLUMN  [review_message_comment]  [varchar]  (2000)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
--2nd pass thru after 'Alter' table columns to handle those columns having UDDTs 
	ALTER TABLE [dbo].[underwriting_detail]
	ALTER COLUMN [rule_name] [char]  (50) NOT NULL
	
END
ELSE
	RAISERROR ('Error applying table changes: underwriting_detail does not exist in catalog!', 16, 1)
GO

		
-- re-add dropped existing indexes previously dropped to prevent issues with dependant columns		
		
IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'insured_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'rulebook_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'underwriting_detail'), N'rule_name', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[underwriting_detail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[underwriting_detail] ADD 
	CONSTRAINT [PK_UNDERWRITING_DETAIL] PRIMARY KEY CLUSTERED 
	(
		[insured_id], [rulebook_id], [rule_name]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): insured_id, rulebook_id, rule_name do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF object_id(N'underwriting_detail') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'ta_point_rule'), N'rulebook_id', 'AllowsNull') ) IS NOT NULL
BEGIN
-- re-add existing References that were previously dropped to prevent issues with dependant columns
	ALTER TABLE [dbo].[underwriting_detail] ADD 
	CONSTRAINT [FK_UNDERWRI_REF_5297_TA_POINT] FOREIGN KEY 
	(	
		[rulebook_id],
		[rule_name]
	) REFERENCES [dbo].[ta_point_rule] ( 
		[rulebook_id],
		[rule_name]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: underwriting_detail, or the related column: rulebook_id does not exist', 16, 1)
GO
		
-- add new FK Constraints to Table
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'note_collection'), N'note_collection_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_note_collection] FOREIGN KEY 
	(	
		[note_collection_id]
	) REFERENCES [dbo].[note_collection] ( 
		[note_collection_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: note_collection_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'person') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'note_collection'), N'note_collection_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[person] ADD 
	CONSTRAINT [FK_person_note_collection] FOREIGN KEY 
	(	
		[note_collection_id]
	) REFERENCES [dbo].[note_collection] ( 
		[note_collection_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: person, or the related column: note_collection_id does not exist', 16, 1)
GO
	
-- add new FK Constraints to Table
IF object_id(N'subgroup') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'person'), N'person_id', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[subgroup] ADD 
	CONSTRAINT [FK_subgroup_person] FOREIGN KEY 
	(	
		[person_id]
	) REFERENCES [dbo].[person] ( 
		[person_id]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: subgroup, or the related column: person_id does not exist', 16, 1)
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			

ALTER VIEW agent_policy_proxy_view as
select
	pa.agent_number,
	p.policy_id,
	p.team_id,
	(select team_name from team where team_id = p.team_id) as team_name,
	p.policy_number,
	p.policy_status_code,
	p.policy_status_date,
	p.company_code,
	p.priority,
	p.underwriter_id,
	p.case_group_id,
	p.service_associate_id,
	(select rtrim(last_name) from aus_user_view sa where sa.user_id = p.service_associate_id) as service_associate_last_name,
	(select rtrim(first_name) from aus_user_view sa where sa.user_id = p.service_associate_id) as service_associate_first_name,
	p.alternate_case_id,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where
		pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.policy_person_id,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	ppi.underwriting_amount as insured_underwriting_amount,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.tax_id as insured_tax_id,
	i.client_id as insured_client_id,
	(select rtrim (u.last_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_last_name,
	(select rtrim (u.first_name) from aus_user au, person u where au.user_id = p.underwriter_id and au.person_id = u.person_id) as underwriter_first_name,
	p.receive_date,
	p.added_date,
	p.application_number,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	policy_person_agent pa,	
	policy_person ppa,
	person i
where
	pa.policy_person_id = ppa.policy_person_id and		
	ppa.policy_id = p.policy_id and
	p.policy_id = pp.policy_id and
	pp.policy_person_id = ppi.policy_person_id and
	pp.person_id = i.person_id and 
	pa.agent_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[association_plan_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view association_plan_subgroup as
select distinct association_code, sub_group_code from association_plan

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			-- for some reason I had to drop the note_collection_id
-- field from this view to avoid an error in the code when it
-- walked thru the fields
ALTER VIEW aus_user_view as
select
person.person_id,
person.party_id,
person.last_name,
person.first_name,
person.middle_name,
person.birth_name,
person.title,
person.suffix,
person.tax_id,
person.tax_type_id,
person.birth_date,
person.sex,
person.person_type_id,
person.preferred_language_code,
person.email_address,
person.marital_status,
person.client_id,
person.alt_email_address,
person.preferred_contact_mode,
person.class_type,
person.field1,
person.field2,
person.field3,
person.field4,
person.field5,
au.user_id,
au.login_id,
au.password,
au.is_active,
au.level_of_authority,
au.is_underwriter,
au.restrict_to_teams,
au.role_id,
au.is_service_associate,
au.job_title,
au.account_locked,
au.account_locked_date,
au.bad_login_attempt_count,
au.last_bad_login_attempt_date,
au.must_change_password,
au.last_password_change_date,
au.is_agent,
au.agent_number,
au.is_agency,
au.agency_number,
au.deleted,
au.use_single_sign_on
from
person,
aus_user au
where
au.person_id = person.person_id and
(au.deleted is null or au.deleted = 0)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW codes_view2 as
select 'en-us' as language_code, 'active_association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
where (expiration_date > CURRENT_TIMESTAMP or expiration_date is NULL) and association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'active_association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)
union
select 'en-us' as language_code, 'association' as code_type, association_code as code_id, name as code_value, cast(expiration_date as char(30)) as external_code from association
where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select 'en-us' as language_code, 'association' as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code from company c, person p
where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW [dbo].[company_view] AS
 SELECT
 	  dbo.person.person_id
 	, dbo.person.party_id
 	, dbo.person.last_name
 	, dbo.person.first_name
 	, dbo.person.middle_name
 	, dbo.person.birth_name
 	, dbo.person.title
 	, dbo.person.suffix
 	, dbo.person.tax_id
 	, dbo.person.tax_type_id
 	, dbo.person.birth_date
 	, dbo.person.sex
 	, dbo.person.person_type_id
 	, dbo.person.preferred_language_code
 	, dbo.person.email_address
 	, dbo.person.marital_status
 	, dbo.person.client_id
 	, dbo.person.alt_email_address
 	, dbo.person.preferred_contact_mode
 	, dbo.person.class_type
 	, dbo.person.field1
 	, dbo.person.field2
 	, dbo.person.field3
 	, dbo.person.field4
 	, dbo.person.field5
 	, dbo.person.note_collection_id
 	, dbo.company.company_code
 	, dbo.company.allow_aus_approval_flag
 	, dbo.company.correspondence_directory
 	, dbo.company.full_time_employee_count
 	, dbo.company.percent_eligible_employees
 	, dbo.company.percent_eligible_dependants
 	, dbo.company.current_cobra_indicator
 	, dbo.company.expiration_date
 	, dbo.company.region_code
 	, dbo.company.tpa_code
 	, dbo.company.carrier_code
 FROM         dbo.person, dbo.company 
 WHERE dbo.person.person_id = dbo.company.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[customer_lab_report_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[customer_lab_report_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
CREATE VIEW customer_lab_report_view as
 select 
   r.lab_id_number,
   r.requirement_information_id,
   r.horl_code,
   c.[description],
   r.result_value,
   ISNULL((case when h.sex = 'm' then low_male else low_female end),'') as [low],
   ISNULL((case when h.sex = 'm' then high_male else high_female end),'') as [high],
   (case when 
 	(case when h.sex = 'm' then low_male else low_female end) = 'negative' AND
 	r.result_value <> 'NEG' AND 
         ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
 	len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
    then r.result_value else 
         case when
 	   ISNUMERIC(r.result_value)=1 AND
 	   ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 	   CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
 	   CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
 	   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
         then r.result_value else 
 	   case when
 		r.result_value = 'NVG' OR 
 		(case when h.sex = 'm' then low_male else low_female end) IS NULL AND
 		(case when h.sex = 'm' then high_male else high_female end) IS NULL
 	   then 'NVG' else 
               case when
 	         NOT ISNUMERIC(r.result_value)=1 AND r.result_value <> 'NEG' AND
 	         NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	         (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	         ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
 	      then r.result_value else 
 	         case when
 		    ISNUMERIC(r.result_value)=1 AND
 		    NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      	    (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 		    ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 		    CONVERT(decimal(10,5), r.result_value) NOT BETWEEN 
 		    0.0 AND 
 		    CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
 	         then r.result_value else
 		    case when r.result_value <> 'NEG' AND r.result_value <> 'POS' AND NOT ISNUMERIC(r.result_value)=1
 		    then 'N/A' else '' end
 		 end
 	      end
 	   end
 	end
    end) as [abnormal],
   (case when 
 	(case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	r.result_value = 'NEG' AND 
         ((case when h.sex = 'm' then high_male else high_female end) IS NULL OR
 	len(ltrim(rtrim((case when h.sex = 'm' then high_male else high_female end)))) = 0)
    then r.result_value else 
         case when
 	   ISNUMERIC(r.result_value)=1 AND
 	   ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 	   CONVERT(decimal(10,5), r.result_value) BETWEEN 
 	   CONVERT(decimal(10,5), (case when h.sex = 'm' then low_male else low_female end)) AND 
 	   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
         then r.result_value else 
            case when
 	      NOT ISNUMERIC(r.result_value)=1 AND r.result_value = 'NEG' AND
 	      NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 	      ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 
 	   then r.result_value else 
 	        case when
 		   ISNUMERIC(r.result_value)=1 AND
 		   NOT ISNUMERIC(case when h.sex = 'm' then low_male else low_female end)=1 AND
 	      	   (case when h.sex = 'm' then low_male else LOW_female end) = 'negative' AND
 		   ISNUMERIC(case when h.sex = 'm' then high_male else high_female end)=1 AND 
 		   CONVERT(decimal(10,5), r.result_value) BETWEEN 
 		   0.0 AND 
 		   CONVERT(decimal(10,5), (case when h.sex = 'm' then high_male else high_female end))
 	        then r.result_value else '' end
            end
 	end
   end) as [normal],
   ISNULL(r.range_text, '') AS range_text
 from dbo.lab_result as r, dbo.lab_header as h, dbo.tl_ansi_code as c
 where 
   r.lab_id_number = h.lab_id_number and 
   r.requirement_information_id = h.requirement_information_id and
   c.horl_code = r.horl_code 

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			/* Copyright (c) 2002 VerticalPoint.  All rights reserved. */
ALTER VIEW data_mart_address as
select distinct
	p.person_id,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id) as residence_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as residence_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id) as business_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as business_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BUSINESS')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as business_country_name,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_city,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_postal_code,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_address_line3,
	(select pa.country_id from person_address pa
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id) as billing_country_code,
	(select cs.state_name from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_name,
	(select cs.state_code from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and cs.country_state_id = pa.country_state_id) as billing_state_code,
	(select c.country_name from person_address pa, tl_country c
	 where (pa.address_type_code = 'BILLING')
	 and pa.person_id = p.person_id
	 and c.country_id = pa.country_id) as billing_country_name
from
	person p

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW diary_activity_proxy_view as
select
	n.author as user_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.topic,
	p.team_id
from
	policy p,
	policy_person pp,
	person i,
	notes n
where
	n.diary_date is not NULL and
	(n.note_type='Req' or n.note_type='Refer' or n.note_type='Review') and
	p.policy_id = pp.policy_id and
	pp.person_id = i.person_id and
	pp.policy_person_id = n.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW form_data_proxy_view AS
select
	fi.requirement_information_id,
	0 as team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id,
	fi.form_data
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id
union all
select
	fi.requirement_information_id,
	tu.team_id,
	fi.form_code,
	fi.case_number,
	fi.last_name,
	fi.first_name,
	fi.middle_name,
	fi.title,
	fi.suffix,
	fi.birthdate,
	fi.sex,
	fi.tax_id_no,
	fi.policy_person_id,
	fi.added_by,
	u.last_name as user_last_name,
	u.first_name as user_first_name,
	fi.updated_by,
	ri.create_date,
	ri.expiration_date,
	ri.requirement_type_id,
	fi.form_data
from
	requirement_information ri,
	form_instance fi,
	aus_user au,
	person u,
	tr_user_team tu
where
	fi.requirement_information_id = ri.requirement_information_id and
	fi.added_by = au.user_id and
	au.person_id = u.person_id and
	tu.user_id = fi.added_by

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW form_question_proxy_view as
select
	grp.form_question_group_id,
	grp.form_code,
	grp.form_section_id,
	grp.display_sequence,
	grp.group_name,
	q.question_id,
	q.sequence_number,
	q.question_label,
	q.question_text,
	q.question_type,
	q.data_type,
	q.answer_set_name,
	q.min_size,
	q.max_size,
	q.external_question_number,
	q.alt_question_text
from
	form_question_group grp,
	form_question q
where
	grp.form_question_group_id = q.question_group_id and
	grp.form_code = q.form_code and
	grp.form_section_id = q.form_section_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW insured as
select
policy_person.policy_id,
person.*,
policy_person_insured.*,
policy_person.role_id,
policy_person.relationship_to_insured
from
person, policy_person, policy_person_insured
where
policy_person_insured.policy_person_id = policy_person.policy_person_id and
policy_person.role_id = 'insured' and
policy_person.person_id = person.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW insured_cov_beneficiary_view as
select
	coverage_person.policy_coverage_id,
	coverage_person.role_id,
	coverage_person.relationship_to_insured_code,
	coverage_person_beneficiary.*,
	person.*
from
	coverage_person_beneficiary,
	coverage_person,
	person
where
	(coverage_person.role_id = 'primarybeneficiary' or
	coverage_person.role_id = 'contigbeneficiary') and
	person.person_id = coverage_person.person_id and
	coverage_person_beneficiary.coverage_person_id = coverage_person.coverage_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW insured_coverages_view as
select
	pc.policy_coverage_id,
	pc.policy_id,
	pc.plan_code_id,
	pc.death_benefit_option_code,
	pc.purpose_of_coverage_id,
	pc.coverage_type,
	pc.indicator_code,
	pc.amount,
	pc.premium_mode,
	pc.investment_objective,
	pc.pref_date_of_withdrawl,
	pc.planned_premium,
	pc.initial_planned_premium,
	pc.equivalent_age,
	pc.can_take_final_action_flag,
	pc.dividend_option,
	pc.approved_amount,
	pc.benefit_amount_basis,
	pc.modal_premium_amount,
	cp.person_id,
	cp.role_id,
	cp.relationship_to_insured_code,
	cpi.*
from
	policy_coverage pc,
	coverage_person cp,
	coverage_person_insured cpi
where
	cpi.coverage_person_id = cp.coverage_person_id and
	cp.policy_coverage_id = pc.policy_coverage_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_active_association]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_active_association]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_active_association as
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
from association a, association_plan ap where (a.expiration_date > CURRENT_TIMESTAMP or a.expiration_date is NULL) and
a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'active_association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
from company c, person p, association_plan ap where c.company_code = ap.association_code and
c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP') and (p.field1 > CURRENT_TIMESTAMP or p.field1 is NULL)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_active_plan_code_by_assoc]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_active_plan_code_by_assoc]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_active_plan_code_by_assoc as
select distinct 'en-us' as language_code, 'active_plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and
pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_active_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_active_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_active_plan_gnum as
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
from tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code
union
select distinct 'en-us' as language_code, 'active_plan_gnum_' +  lower(rtrim(ltrim(ap.association_code))) + '_' +  lower(rtrim(lb.line_of_business_code) ) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.plan_code_id as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where (ap.expiration_date > CURRENT_TIMESTAMP or
ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_all_companies]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_all_companies]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_all_companies as
select 'en-us' as language_code, 'all_companies' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_association]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_association]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_association as
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, a.association_code as code_id, a.name as code_value, cast(a.expiration_date as char(30)) as external_code
from association a, association_plan ap where a.association_code = ap.association_code and a.association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
union
select distinct 'en-us' as language_code, 'association_' + lower(ap.tpa_code) as code_type, c.company_code as code_id, p.last_name as code_value, p.field1 as external_code
from company c, person p, association_plan ap where c.company_code = ap.association_code and c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_association_plan_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_association_plan_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view [dbo].[lv_association_plan_subgroup] as
select distinct 
    'en-us' as language_code, 
    'association_subgroup_' + lower(ap.association_code) as code_type, 
    ltrim(rtrim(ap.association_code)) + ltrim(rtrim(ap.sub_group_code)) as code_id, 
    ap.sub_group_code as code_value, 
    '' as external_code
from company c, person p, association_plan ap 
where 
    c.company_code = ap.association_code and 
    c.person_id = p.person_id and 
    (p.class_type = 'ASSN' or p.class_type = 'GRP')


GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_bene_period_by_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_bene_period_by_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_bene_period_by_plan_gnum as
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is null
union
select language_code, 'benefitperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from benefit_period where g_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_benefit_by_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_benefit_by_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_benefit_by_plan_gnum as
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is null
union
select language_code, 'benefit_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from plan_benefit where g_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_elim_period_by_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_elim_period_by_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_elim_period_by_plan_gnum as
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is null
union
select language_code, 'eliminationperiod_' + lower(rtrim(ltrim(plan_code_id))) + '_' + lower(rtrim(ltrim(g_number))) as code_type, period_id as code_id, period as code_value, '' as external_code from elimination_period where g_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_gnum_by_assoc]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_gnum_by_assoc]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_gnum_by_assoc as
select distinct 'en-us' as language_code, 'g_number_' + lower(rtrim(association_code)) as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan where g_number is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_plan_code_by_assoc]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_plan_code_by_assoc]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_plan_code_by_assoc as
select distinct 'en-us' as language_code, 'plan_code_' + lower(ap.association_code) as code_type, pc.plan_code_id as code_id, rtrim(pc.plan_code_id) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_plan_gnum as
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id
union
select distinct 'en-us' as language_code, 'plan_gnum_' + lower(rtrim(lb.line_of_business_code) + '_' + ap.association_code) as code_type, rtrim(pc.plan_code_id) + '_' + ap.g_number as code_id,
rtrim(pc.plan_code_id) + '/' + rtrim(ap.g_number) + ' - ' + pc.description as code_value, pc.line_of_business_code as external_code
from line_of_business lb, tl_plan_code pc, association_plan ap where pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_plan_options]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_plan_options]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_plan_options as
select language_code, lower('plan_' + rtrim(option_type) + '_' + rtrim(plan_code_id)) as code_type, cast(sequence_number as char(30)) as code_id, description as code_value, '' as external_code from tl_plan_option

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_ppo_trust_state]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_ppo_trust_state]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_ppo_trust_state as
select distinct 'en-us' as language_code, 'ppo_trust_state_' + lower(rtrim(t.company_code)) + '_' + lower(rtrim(pa.country_state_id)) as code_type,
cast(p.person_id as char(30)) as code_id, p.last_name as code_value, cast(c.expiration_date as char(30)) as external_code
from company c, person p, person_address pa, party_relation pr, company t where p.person_id = c.person_id and p.class_type = 'PPO' and
pa.person_id = p.person_id and pr.parent_id = p.person_id and t.person_id = pr.person_id and c.expiration_date = (select min(expiration_date)
from company, person_address where company_code = c.company_code and company.person_id = person_address.person_id and person_address.country_state_id = pa.country_state_id
and expiration_date > CURRENT_TIMESTAMP)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_product_by_assoc_gnum_lob]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_product_by_assoc_gnum_lob]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_product_by_assoc_gnum_lob as
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '_' + rtrim(ap.g_number) + '_' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_code
from association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code and ap.g_number is not null
union
select distinct 'en-us' as language_code, 'active_product_' + lower(rtrim(ap.association_code) + '__' + lb.line_of_business_code) as code_type, pc.plan_code_id as code_id, rtrim( pc.plan_code_id ) + '-' + pc.description as code_value, '' as external_codefrom association_plan ap, line_of_business lb, tl_plan_code pc where (ap.expiration_date > CURRENT_TIMESTAMP or ap.expiration_date is NULL) and pc.plan_code_id = ap.plan_code_id and lb.line_of_business_code = pc.line_of_business_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_sectioned_plan_gnum]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_sectioned_plan_gnum]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_sectioned_plan_gnum as
select distinct 'en-us' as language_code, ('plan_gnum_' + SUBSTRING(ap.g_number,1,6) + '_' + SUBSTRING(ap.g_number,8,4)  + '_' + SUBSTRING(ap.g_number,13,4)) as code_type,
ap.plan_code_id as code_id, pc.description as code_value, pc.line_of_business_code as external_code from association_plan ap, tl_plan_code pc
where len(ap.g_number) >= 16 and ap.plan_code_id = pc.plan_code_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_subgroup]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_subgroup]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_subgroup
as
select distinct 
      'en-us'                             as language_code
    , 'subgroup_' + lower(c.company_code) as code_type
    , cast(s.subgroup_id as char(10))     as code_id
    , p.last_name                         as code_value
    , cast(p.person_id as char(10))       as external_code
from company c, subgroup s, person p
where 
        s.company_code = c.company_code
    and p.person_id    = s.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[lv_trust_state]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[lv_trust_state]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view lv_trust_state as
select distinct 'en-us' as language_code, 'trust_state_' + lower(rtrim(c.company_code)) as code_type, pa.country_state_id as code_id,
(select state_name from tl_country_state where country_state_id = pa.country_state_id) as code_value, '' as external_code
from company c, person p, person_address pa, party_relation pr,company ppo where p.person_id = c.person_id and
p.class_type = 'Trust' and pr.person_id = p.person_id and ppo.person_id = pr.parent_id and pa.person_id = ppo.person_id and
ppo.expiration_date > CURRENT_TIMESTAMP

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[notes_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[notes_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE view notes_view
as
select
xref.note_collection_id,
xref.type_code,
notes.note_id,
notes.topic,
notes.added_date,
notes.update_date,
notes.review_date,
notes.author,
notes.updated_by,
notes.reviewed_by,
notes.note_text
from note_collection as xref, generic_note as notes
where xref.note_collection_id = notes.note_collection_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW policy_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	p.underwriter_id,
	p.team_id,
	p.service_associate_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code,
	p.employer_id,
	p.alternate_case_id,
	p.source_info,
	p.distributor_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW recent_cases_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	p.underwriter_id,
	p.team_id,
	p.service_associate_id,
	p.tpa_code,
	rc.user_id,
	rc.date_time as access_date_time,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	aus_user_recent_files rc
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	rc.policy_id = p.policy_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW referral_proxy_view as
select
	n.note_id,
	n.diary_date,
	p.policy_id,
	p.policy_number,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	n.author as author_id,
	n.refer_to_user_id as referred_to_id,
	n.topic,
	p.team_id
from
	notes n,
	policy_person pp,
	policy p,
	person i
where
	n.refer_to_user_id > 0 and
	n.policy_person_id = pp.policy_person_id and
	pp.policy_id = p.policy_id and
	pp.person_id = i.person_id and
	n.diary_date is not null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[repl_person]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[repl_person]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view repl_person as 
select * from person where (person_type_id is null or person_type_id != 'Person') and person_id not in
(
select person_id from aus_user
union
select person_id from policy_person
union
select person_id from coverage_person
union
select person_id from coverage_benefits_party
)

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW requirement_proxy_view as
select
	t.requirement_name,
	t.alt_lang,
	t.alt_name,
	t.default_ordered_by,
	ir.requirement_code,
	t.requirement_type_id,
	t.requirement_category,
	ir.followup_date,
	ir.closed_date,
	ir.received_date,
	ir.ordered_date,
	ir.ordered_by,
	p.policy_id,
	p.policy_number,
	p.policy_status_code,
	p.underwriter_id,
	p.service_associate_id,
	ir.insured_requirement_id,
	ir.closed_disposition,
	ir.requirement_information_id,
	ir.last_followup_date,
	ir.provider,
	ir.evidence_type,
	pp.policy_person_id,
	i.party_id,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.birth_date,
	i.tax_id,
	p.team_id,
	ir.manual_or_automatic_entry,
	ir.new_business_until_closed,
	ir.provider_order_id,
	ir.create_comment
from
	policy p,
	policy_person pp,
	person i,
	insured_requirement ir,
	tl_requirement t
where
	p.policy_id = pp.policy_id AND
	pp.person_id = i.person_id AND
	pp.policy_person_id = ir.policy_person_id AND
	ir.requirement_code = t.requirement_code

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW review_message_proxy_view as
select
	p.policy_id,
	p.policy_number,
	rtrim(per.last_name) as applicant_last_name,
	rtrim(per.first_name) as applicant_first_name,
	rm.message_type,
	rm.origin_code,
	SUBSTRING(rm.message, 1, 50) as review_message_text,
	p.service_associate_id,
	rm.user_role_type
from
	review_message rm,
	policy p,
	policy_person pp,
	person per
where
	p.policy_id = rm.policy_id and
	pp.policy_person_id = rm.policy_person_id and
	pp.person_id = per.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[rp_inproc_applicants]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[rp_inproc_applicants]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
create view rp_inproc_applicants as
select
	p.company_code,
	p.team_id,
	p.service_associate_id,
	p.association_code,
	cp.last_name as group_name,
	cpi.g_number,
	p.policy_number as case_number,
	p.receive_date,
	i.first_name as applicant_first_name,
	i.last_name as applicant_last_name,
	p.underwriter_id,
	(ltrim(rtrim(uw.last_name) + ', ' + rtrim(uw.first_name))) as assigned_underwriter
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	coverage_person_insured cpi,
	company c,
	person cp,
	aus_user au,
	person uw
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	cpi.policy_person_id = ppi.policy_person_id and
	i.person_id = pp.person_id and
	p.association_code = c.company_code and
	cp.person_id = c.person_id and
	au.user_id = p.underwriter_id and
	uw.person_id = au.person_id and
	ppi.applicant_status = 'IP'

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			/* Copyright (c) 2002 VerticalPoint.  All rights reserved. */
ALTER VIEW rulebook_proxy_view as
	select
		rb.association_code,
		rb.effective_date,
		rb.rulebook_id,
		rb.rulebook_name,
		rb.description,
		rb.is_active,
		rb.added_date,
		rb.added_by,
		rb.update_date,
		rb.updated_by,
		rb.type
	from
		te_rulebook rb

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[subgroup_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[subgroup_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			CREATE VIEW [dbo].[subgroup_view]
AS
select 
    person.person_id
    , person.party_id
    , person.last_name
    , person.first_name
    , person.middle_name
    , person.birth_name
    , person.title
    , person.suffix
    , person.tax_id
    , person.tax_type_id
    , person.birth_date
    , person.sex
    , person.person_type_id
    , person.preferred_language_code
    , person.email_address
    , person.marital_status
    , person.client_id
    , person.alt_email_address
    , person.preferred_contact_mode
    , 'SUBGROUP' as class_type
    , person.field1
    , person.field2
    , person.field3
    , person.field4
    , person.field5
    , person.note_collection_id
    , subgroup.company_code
    , company.allow_aus_approval_flag
    , company.correspondence_directory
    , company.full_time_employee_count
    , company.percent_eligible_employees
    , company.percent_eligible_dependants
    , company.current_cobra_indicator
    , subgroup.expiration_date
    , company.region_code
    , company.tpa_code
    , company.carrier_code
    , subgroup.sub_group_code
    , subgroup.subgroup_id
    , subgroup.is_using_company_address
from company, subgroup, person
where 
        subgroup.company_code = company.company_code
    and person.person_id = subgroup.person_id


GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_gnum_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[association_gnum_view]
END
GO

			if ( OBJECT_ID(N'tpa_view') IS NULL OR OBJECT_ID(N'tpa_view') IS NULL  )
	BEGIN
		RAISERROR ('Required view object dependency is missing, unable to create view', 16, 1)
	END

 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			create view association_gnum_view as
select distinct
	SUBSTRING(ap.g_number,1,6) as key_id, 
	ap.association_code,
	p.last_name as association_name,
	ap.tpa_code,
	tpa.last_name as tpa_name
from
	association_plan ap,
	company c,
	person p,
	tpa_view tpa
where
	ap.g_number is not null and
	ap.association_code = c.company_code and
	c.person_id = p.person_id and
	tpa.tpa_code = ap.tpa_code
union
select distinct
	SUBSTRING(ap.g_number,1,6) as key_id, 
	ap.association_code,
	p.last_name as association_name,
	ap.tpa_code,
	'' as tpa_name
from
	association_plan ap,
	company c,
	person p
where
	ap.g_number is not null and
	ap.association_code = c.company_code and
	c.person_id = p.person_id and
	ap.tpa_code is null

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW reviewer_proxy_view as
select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
	p.policy_status_code,
	p.policy_status_date,
	p.case_group_id,
	p.association_code,
	ppi.applicant_status as applicant_status_short,
	ppi.applicant_status_date,
	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
	ppi.is_member,
	ppi.adverse_history,
	pp.policy_person_id,
	pp.relationship_to_insured,
	i.title as insured_title,
	i.last_name as insured_last_name,
	i.middle_name as insured_middle_name,
	i.first_name as insured_first_name,
	i.suffix as insured_suffix,
	i.tax_id as insured_tax_id,
	i.birth_date as insured_birth_date,
	i.client_id as insured_client_id,
	ppi.underwriting_amount as insured_underwriting_amount,
	p.application_date,
	p.application_number,
	p.added_date,
	p.receive_date,
	ppi.reopen_date,
	(select top 1 final_action_date from insured_coverages_view where policy_person_id = ppi.policy_person_id) as final_disposition_date,
	p.underwriter_id,
	p.team_id,
	p.service_associate_id,
	p.tpa_code,
	p.cedent_policy_number,
	p.cedent_company_code,
	p.cedent_underwriter_id,
	p.cedent_contact_id,
	p.cedent_date_sent,
	p.international_or_domestic,
	p.idb_flag,
	p.currency_code
from
	policy p,
	policy_person pp,
	policy_person_insured ppi,
	person i,
	team t
where
	pp.policy_id = p.policy_id and
	ppi.policy_person_id = pp.policy_person_id and
	i.person_id = pp.person_id and
	ppi.primary_reference_id is null and
	ppi.applicant_status not in ('NA', 'NB', 'PE', 'PM', 'FA', 'HD', 'IP') and
	ppi.policy_person_id in (select policy_person_id from insured_requirement where policy_person_id = ppi.policy_person_id and requirement_code = 'TBRVWD' and (closed_disposition is null or closed_disposition in ('O', 'OR', 'H')))

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW cases_to_issue_view as
    select
	p.company_code,
	p.policy_id,
	p.policy_number,
	p.priority,
 	p.policy_status_code,
 	p.policy_status_date,
 	p.case_group_id,
 	p.association_code,
 	ppi.applicant_status as applicant_status_short,
 	ppi.applicant_status_date,
 	(select top 1 pc.plan_code_id from policy_coverage pc, coverage_person cp where pc.policy_coverage_id = cp.policy_coverage_id and cp.person_id = pp.person_id) as primary_plan_code,
 	ppi.is_member,
 	ppi.adverse_history,
 	pp.policy_person_id,
 	pp.relationship_to_insured,
 	i.party_id,
 	i.title as insured_title,
 	i.last_name as insured_last_name,
 	i.middle_name as insured_middle_name,
 	i.first_name as insured_first_name,
 	i.suffix as insured_suffix,
 	i.tax_id as insured_tax_id,
 	i.birth_date as insured_birth_date,
 	i.client_id as insured_client_id,
 	ppi.underwriting_amount as insured_underwriting_amount,
 	p.application_date,
	p.application_number,
 	p.added_date,
 	p.receive_date,
 	ppi.reopen_date,
 	p.underwriter_id,
 	p.team_id,
 	p.service_associate_id,
 	p.tpa_code,
 	p.cedent_policy_number,
 	p.cedent_company_code,
 	p.cedent_underwriter_id,
 	p.cedent_contact_id,
 	p.cedent_date_sent,
 	p.international_or_domestic,
 	p.idb_flag,
 	p.currency_code,
 	p.employer_id,
 	ir.open_pi_req,
 	rvw.unchk_rvw_count as uw_rm_count
    from
	ins_open_post_issue_req_count ir,
 	policy p,
 	policy_person pp,
	policy_person_insured ppi,
 	person i,
 	unchecked_rvw_msg_count rvw
    where
 	ir.policy_person_id = pp.policy_person_id and
 	pp.policy_id = p.policy_id and
 	p.policy_status_code = 'Closed' and
 	ppi.policy_person_id = pp.policy_person_id and
 	i.person_id = pp.person_id and
 	ppi.applicant_status = 'AP' and
 	rvw.policy_person_id =* pp.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW codes_view as
select 'en-us' as language_code, 'mib_country' as code_type, country_id as code_id, country_name as code_value, mib_country as external_code from tl_country
union
select lang.code_value as language_code, 'mib_country' as code_type, country_id as code_id, alt_country_name as code_value, mib_country as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'policy_type' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is not null
union
select 'en-us' as language_code, 'policy_type' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, policy_type as code_value, '' as external_code from billing_code where g_number is null
union
select 'en-us' as language_code, 'billing_code' as code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) + '_' + rtrim(g_number) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is not null and g_number != ''
union
select 'en-us' as language_code, 'billing_code' AS code_type, rtrim(tpa_code) + '_' + rtrim(line_of_business_code) as code_id, us_billing_code as code_value, non_us_billing_code as external_code from billing_code where g_number is null or g_number = ''
union
select 'en-us' as language_code, 'country' as code_type, country_id as code_id, country_name as code_value, country_code as external_code from tl_country
union
select lang.code_value as language_code, 'country' as code_type, country_id as code_id, alt_country_name as code_value, country_code as external_code from tl_country, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_country_name is not null and rtrim(alt_country_name) <> ''
union
select 'en-us' as language_code, 'lab_request' as code_type, request_code as code_id, description as code_value, '' as external_code from tl_lab_request
union
select 'en-us' as language_code, 'lab_specimen' as code_type, lab_specimin_id as code_id, description as code_value, '' as external_code from tl_lab_specimen
union
select 'en-us' as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + description as code_value, line_of_business_code as external_code from tl_plan_code
union
select alt_lang as language_code, 'plan_code' as code_type, plan_code_id as code_id, plan_code_id + ' - ' + alt_description as code_value, line_of_business_code as external_code from tl_plan_code where alt_lang is not null and alt_lang <> 'en-us'
union
select 'en-us' as language_code, 'requirement_group' as code_type, cast(requirement_group_id as char(30)) as code_id, name as code_value, '' as external_code from tl_requirement_group
union
select 'en-us' as language_code, 'subaccount' as code_type, subaccount_code as code_id, full_name as code_value, '' as external_code from tl_subaccount
union
select 'en-us' as language_code, 'country_state' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state
union
select lang.code_value as language_code, 'country_state' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_usa' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'USA'
union
select lang.code_value as language_code, 'country_state_usa' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'USA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'country_state_canada' as code_type, country_state_id as code_id, state_name as code_value, state_code as external_code from tl_country_state where country_id = 'CANADA'
union
select lang.code_value as language_code, 'country_state_canada' as code_type, country_state_id as code_id, alt_state_name as code_value, state_code as external_code from tl_country_state, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and country_id = 'CANADA' and alt_state_name is not null and rtrim(alt_state_name) <> ''
union
select 'en-us' as language_code, 'ansi_code' as code_type, horl_code as code_id, description as code_value, ansi as external_code from tl_ansi_code
union
select 'en-us' as language_code, 'agency' as code_type, cast(agency.person_id as char(30)) as code_id, person.last_name as code_value, agency.agency_number as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'agent' as code_type, cast(agent.person_id as char(30)) as code_id, person.last_name as code_value, agent.agent_number as external_code from agent, person where person.person_id = agent.person_id
union
select 'en-us' as language_code, 'agent_name' as code_type, (rtrim(agent_number) + '_' + cast(person.person_id as char(12))) as code_id, person.last_name as code_value, person.first_name as external_code from agent, person where agent_number is not null and person.person_id = agent.person_id
union
select 'en-us' as language_code, 'company' as code_type, company.company_code as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select 'en-us' as language_code, 'company_name' as code_type, person.last_name as code_id, company.company_code  + ' - ' + person.last_name as code_value, person.tax_id as external_code from company, person where person.person_id = company.person_id and (class_type is null or class_type = 'Carrier')
union
select alt_lang as language_code, 'requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null
union
select 'en-us' as language_code, 'requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is null or alt_lang <> 'en-us'
union
select alt_lang as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, alt_name as code_value, external_requirement_code as external_code from tl_requirement where alt_lang is not null and requirement_category = 0
union
select 'en-us' as language_code, 'post_issue_requirement' as code_type, requirement_code as code_id, requirement_name as code_value, external_requirement_code as external_code from tl_requirement where (alt_lang is null or alt_lang <> 'en-us') and requirement_category = 0
union
select 'en-us' as language_code, code_type as code_type, cast(code_id as char(30)) as code_id, code_value as code_value, external_code as external_code from tl_acord_codes where code_type <> 'AUS Gender Type'
union
select 'en-us' as language_code, code_type as code_type, cast(external_code as char(30)) as code_id, code_value as code_value, cast(code_id as char(30)) as external_code from tl_acord_codes where code_type = 'AUS Gender Type'
union
select distinct 'en-us' as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, 'final_action_disposition' as code_type, reason_status as code_id, reason_status as code_value, reason_status as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where (lang.code_value is not null and lang.code_value <> '')
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null and (select code_id from tl_code where code_type = 'applicant_status' and code_value = reason_status) is not null
union
select distinct 'en-us' as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason
union
select distinct lang.code_value as language_code, lower( 'final_action_reason_' + reason_status ) as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_reason_text is not null
union
select distinct 'en-us' as language_code, 'final_action_reason' as code_type, reason_text as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason where reason_code is not null
union
select distinct lang.code_value as language_code, 'final_action_reason' as code_type, alt_reason_text  as code_id, reason_status as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and reason_code is not null and alt_reason_text is not null
union
select language_code, code_type, code_id, code_value, external_code from tl_code where code_type <> 'CaseOne'
union
select language_code, code_type, upper(code_id), code_value, external_code from tl_code where code_type = 'CaseOne'
union
select 'en-us' as language_code, 'tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_tpa' as code_type, lower(t.tpa_code) as code_id, p.last_name as code_value, cast(p.person_id as char(30)) as external_code from tpa t, person p
where t.person_id = p.person_id and (t.expiration_date > CURRENT_TIMESTAMP or t.expiration_date is NULL)
union
select 'en-us' as language_code, 'line_of_business' as code_type, line_of_business_code as code_id, name as code_value, line_of_business_code as external_code from line_of_business
union
select 'en-us' as language_code, 'association_code' as code_type, association_code as code_id, association_code as code_value, cast(expiration_date as char(30)) as external_code from association
union
select 'en-us' as language_code, 'lifesuite_version' as code_type, 'version' as code_id, lifesuite_version as code_value, '' as external_code from lifesuite_version
union
select 'en-us' as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, impairment_text as code_value, '' as external_code from impairment_restriction
union
select lang.code_value as language_code, 'impairment_restriction' as code_type, impairment_restriction_code as code_id, alt_impairment_text as code_value, '' as external_code from impairment_restriction, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where lang.code_value is not null and alt_impairment_text is not null and rtrim(alt_impairment_text) <> ''
union
select 'en-us' as language_code, 'provider' as code_type, rtrim(provider) + '_' + rtrim(evidence_type) as code_id, us_vendor as code_value, non_us_vendor as external_code from provider
union
select distinct 'en-us' as language_code, 'g_number' as code_type, g_number as code_id, g_number as code_value, '' as external_code from association_plan
union
select 'en-us' as language_code, 'agency_number' as code_type, agency.agency_number as code_id, agency.agency_number + ' - ' + person.last_name as code_value, '' as external_code from agency, person where person.person_id = agency.person_id
union
select 'en-us' as language_code, 'Answer Set ' + rtrim(tl_answer_set_answers.answer_set_name) as code_type, rtrim(cast(tl_answer_set_answers.sequence_number as char(30))) as code_id,
rtrim(tl_answer_set_answers.answer_text) as code_value, rtrim(tl_answer_set_answers.alt_answer_text) as external_code from tl_answer_set_answers
union
select 'en-us' as language_code, 'rulebook' as code_type, cast(rulebook_id as char(30)) as code_id, rulebook_name, description as external_code from rulebook_proxy_view where type is null or type = 0
union
select 'en-us' as language_code, lower(code_type), code_id, code_value, external_code from rulebook_rate_class
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, external_code as code_id, code_id as code_value, '' as external_code from tl_code where code_type = 'source_info_codes' and external_code is not null and rtrim(external_code) <> ''
union
select 'en-us' as language_code, 'CedentCompany' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'CedentCompany'
union
select 'en-us' as language_code, 'CedentUnderwriter_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentUnderwriter'
union
select 'en-us' as language_code, 'CedentContact_' + lower(company_code) as code_type, cast(p2.person_id as char(30)) as code_id, rtrim (p2.last_name) + ',' + rtrim (p2.first_name) as code_value, '' as external_code from company c, person p, party_relation pr, person p2 where c.person_id = p.person_id and p.class_type = 'CedentCompany' and p.person_id = pr.parent_id and pr.person_id = p2.person_id and p2.class_type = 'CedentContact'
union
select 'en-us' as language_code, 'Reinsurer' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'Reinsurer'
union
select 'en-us' as language_code, 'active_retro_company_ob' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroOBCompany'
union
select 'en-us' as language_code, 'active_retro_company_retro' as code_type, company_code as code_id, last_name as code_value, '' as external_code from company c, person p where c.person_id = p.person_id and p.class_type = 'RetroCompany'
union
select 'en-us' as language_code, 'cedent_fax' as code_type, company_code as code_id, area_code + prefix + ph.suffix as code_value, extension as external_code from company c, person p, person_phone ph where c.person_id = p.person_id and p.person_id = ph.person_id and p.class_type = 'CedentCompany' and lower(ph.phone_type_code) = 'fax'
union
select 'en-us' as language_code, 'coverage_indicator' as code_type, indicator_code as code_id, description as code_value, external_code from tl_coverage_indicator_code
union
select 'en-us' as language_code, 'address_type' as code_type, address_type_code as code_id, external_code as code_value, external_code from tl_address_type
union
select 'en-us' as language_code, 'benefit_type' as code_type, cast(benefit_id as char(30)) as code_id, name as code_value, '' as external_code from tl_benefit_type
union
select 'en-us' as language_code, 'reinsurance_vendor' as code_type, reinsurance_vendor_code as code_id, name as code_value, external_code from reinsurance_vendor
union
select 'en-us' as language_code, 'coverage_type' as code_type, coverage_type as code_id, description as code_value, external_code from tl_coverage_type
union
select 'en-us' as language_code, 'death_benefit_option' as code_type, death_benefit_option_code as code_id, external_code as code_value, external_code from tl_death_benefit_option
union
select 'en-us' as language_code, 'death_benefit_option_description' as code_type, death_benefit_option_code as code_id, description as code_value, '' as external_code from tl_death_benefit_option_desc
union
select 'en-us' as language_code, 'extended_property' as code_type, property_name as code_id, description as code_value, '' as external_code from tl_extended_property
union
select 'en-us' as language_code, 'language' as code_type, language_code as code_id, description as code_value, external_code from tl_language
union
select 'en-us' as language_code, 'marital_status' as code_type, marital_status_code as code_id, description as code_value, external_code from tl_marital_status
union
select 'en-us' as language_code, 'person_type' as code_type, person_type_id as code_id, description as code_value, '' as external_code from tl_person_type
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'requirement_type' as code_type, requirement_type_id as code_id, description as code_value, '' as external_code from tl_requirement_type
union
select 'en-us' as language_code, 'tax_type' as code_type, tax_type_id as code_id, description as code_value, '' as external_code from tl_tax_type
union
select 'en-us' as language_code, 'tobacco_type' as code_type, tobacco_type_id as code_id, external_code as code_value, external_code from tl_tobacco_type
union
select 'en-us' as language_code, 'tobacco_use' as code_type, tobacco_use_id as code_id, external_code as code_value, external_code from tl_tobacco_use
union
select 'en-us' as language_code, 'address_type_description' as code_type, address_type_code as code_id, description as code_value, '' as external_code from tl_address_type_description
union
select 'en-us' as language_code, 'beneficiary_type' as code_type, beneficiary_type as code_id, description as code_value, '' as external_code from tl_beneficiary_type_desc
union
select 'en-us' as language_code, 'benefit_type_description' as code_type, cast(benefit_id as char(30)) as code_id, description as code_value, '' as external_code from tl_benefit_type_description
union
select 'en-us' as language_code, 'note_type' as code_type, note_type as code_id, description as code_value, '' as external_code from tl_note_type_description
union
select 'en-us' as language_code, 'phone_type' as code_type, phone_type_code as code_id, description as code_value, '' as external_code from tl_phone_type_description
union
select 'en-us' as language_code, 'policy_role' as code_type, code as code_id, description as code_value, '' as external_code from tl_policy_role_description
union
select 'en-us' as language_code, 'purpose_of_coverage' as code_type, purpose_of_coverage_id as code_id, description as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'tobacco_type_description' as code_type, tobacco_type_id as code_id, description as code_value, '' as external_code from tl_tobacco_type_description
union
select 'en-us' as language_code, 'tobacco_use_description' as code_type, tobacco_use_id as code_id, description as code_value, '' as external_code from tl_tobacco_use_description
union
select 'en-us' as language_code, 'family_history_relationship' as code_type, famhist_relationship_code as code_id, famhist_relationship_code as code_value, famhist_relationship_code as external_code from tl_family_history_relationship
union
select 'en-us' as language_code, 'occupation' as code_type, occupation as code_id, occupation as code_value, occupation_code as external_code from occupation
union
select 'en-us' as language_code, 'source_info_codes' as code_type, source_info as code_id, source_description as code_value, partner_id as external_code from tl_source_info
union
select 'en-us' as language_code, 'distributor_codes' as code_type, distributor_code as code_id, distributor_description as code_value, '' as external_code from tl_distributor_codes
union
select 'en-us' as language_code, 'source_partner_codes' as code_type, partner_id as code_id, source_info as code_value, '' as external_code from tl_source_info where partner_id is not null and rtrim(partner_id) <> ''
union
select 'en-us' as language_code, 'PurposeOfCoverage' as code_type, lower(description) as code_id, purpose_of_coverage_id as code_value, '' as external_code from tl_purpose_of_coverage_desc
union
select 'en-us' as language_code, 'policy_status' as code_type, short_code as code_id, policy_status_code as code_value, '' as external_code from tl_policy_status
union
select 'en-us' as language_code, 'PolicyStatus' as code_type, policy_status_code as code_id, description as code_value, '' as external_code from tl_policy_status_description
union
select distinct 'en-us' as language_code, 'table_rating_reason' as code_type, reason_text as code_id, reason_text as code_value, reason_code as external_code from tl_final_action_reason where reason_status = 'Table Rating'
union
select distinct lang.code_value as language_code, 'table_rating_reason' as code_type, reason_text as code_id, alt_reason_text as code_value, reason_code as external_code from tl_final_action_reason, (select * from tl_code where code_type = 'System' and code_id = 'AltLanguage') lang where reason_status = 'Table Rating'and lang.code_value is not null and alt_reason_text is not null
union
select 'en-us' as language_code, 'tpa_name' as code_type, t.tpa_code as code_id, p.last_name as code_value, t.tpa_short_name as external_code from tpa t, person p where t.person_id = p.person_id
union
select 'en-us' as language_code, 'active_aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'aus_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where  aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'aus_users_basic' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is null or aus_user.is_agent = 0) and (aus_user.is_agency is null or aus_user.is_agency = 0)
union
select 'en-us' as language_code, 'active_underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.is_active<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'underwriter' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value, rtrim(aus_user.login_id) as external_code from aus_user, person where aus_user.is_underwriter<>0 and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'active_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (D)' as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is not null and aus_user.deleted <> 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) + ' (I)' as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is null or aus_user.is_active = 0)
union
select 'en-us' as language_code, 'service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where (aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and
aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0)
union
select 'en-us' as language_code, 'underwriter_and_service_associate' as code_type, cast(aus_user.user_id as char(30)) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
rtrim(aus_user.login_id) as external_code from aus_user, person where ((aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) or
(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0)) and aus_user.person_id = person.person_id and (aus_user.deleted is null or aus_user.deleted = 0)
union
select 'en-us' as language_code, 'active_team' as code_type, cast(team_id as char(30)) as code_id, team_name as code_value, '' as external_code from team where (is_active is not null and is_active <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (D)' as code_value, '' as external_code from team where (deleted is not null and deleted <> 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) + ' (I)' as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is null or is_active = 0)
union
select 'en-us' as language_code, 'team' as code_type, cast(team_id as char(30)) as code_id, rtrim(team_name) as code_value, '' as external_code from team where (deleted is null or deleted = 0) and (is_active is not null and is_active <> 0)
union
select 'en-us' as language_code, 'active_login_cm' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_service_associate is not null and aus_user.is_service_associate <> 0) and aus_user.person_id = person.person_id
union
select 'en-us' as language_code, 'active_login_uw' as code_type, rtrim(aus_user.login_id) as code_id, rtrim(person.last_name) + ', ' + rtrim(person.first_name) as code_value,
cast(aus_user.user_id as char(30)) as external_code from aus_user, person where (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_active is not null and aus_user.is_active <> 0) and
(aus_user.is_underwriter is not null and aus_user.is_underwriter <> 0) and aus_user.person_id = person.person_id
union
select language_code, 'issue_request_' + code_type as code_type, code_id, code_value, external_code from tl_code where code_type in (select code_id from tl_code where language_code = 'en-us' and code_type = 'AmendmentType')
union
select 'en-us' as language_code, 'employer' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Employer')
union
select 'en-us' as language_code, 'agent_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agent_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agent is not null and aus_user.is_agent <> 0)
union
select 'en-us' as language_code, 'agency_users' as code_type, cast(aus_user.user_id as char(30)) as code_id, aus_user.agency_number as code_value, rtrim(aus_user.login_id) as external_code from aus_user where aus_user.is_active<>0 and (aus_user.deleted is null or aus_user.deleted = 0) and (aus_user.is_agency is not null and aus_user.is_agency <> 0)
union
select 'en-us' as language_code, 'trust' as code_type, company.company_code as code_id, person.last_name as code_value, cast(company.person_id as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'Trust')
union
select 'en-us' as language_code, 'ppo' as code_type, cast(company.person_id as char(30)) as code_id, person.last_name as code_value, cast(company.expiration_date as char(30)) as external_code from company, person where person.person_id = company.person_id and (class_type = 'PPO')

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW rp_admin_all_applicants as
select
	p.company_code,
	(select assoc.association_name from
		(select association_code, name as association_name from association where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
		 union
		 select c.company_code as association_code ,p.last_name as association_name from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')) assoc
	 where p.association_code = assoc.association_code) as association_name,
	cpi.g_number,
	p.policy_number as case_number,
	p.alternate_case_id as alternate_case_number,
	p.receive_date,
	p.service_associate_id,
	i.last_name as applicant_last_name,
	i.first_name as applicant_first_name,
	i.sex as gender,
	ppi.applicant_status as applicant_status_code,
	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = ppi.applicant_status) as applicant_status,
	ppi.applicant_status_date,
	pc.amount as amount_applied_for,
	i.birth_date,
	(select pa.address_line1 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line1,
	(select pa.address_line2 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line2,
	(select pa.address_line3 from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_address_line3,
	(select pa.city from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_city,
	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id
	 and cs.country_state_id = pa.country_state_id) as residence_state,
	(select pa.postal_code from person_address pa
	 where (pa.address_type_code = 'RESIDENCE')
	 and pa.person_id = i.person_id) as residence_postal_code,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'HOME'
	 and ph.person_id = i.person_id) as home_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'WORK'
	 and ph.person_id = i.person_id) as work_phone_suffix,
	(select ph.area_code from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_area_code,
	(select ph.prefix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_prefix,
	(select ph.suffix from person_phone ph
	 where ph.phone_type_code = 'CELL'
	 and ph.person_id = i.person_id) as cell_phone_suffix,
	i.email_address,
	cpi.final_action_date,
	(select
		rtrim(ps.last_name) + ', ' + rtrim(ps.first_name)
	 from
	 	person ps, aus_user u
	 where
		u.person_id = ps.person_id and u.user_id = cpi.final_action_by_id
	) as final_action_by,
	cpi.reason_text as final_action_reason,
	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = cpi.coverage_status) and reason_text = cpi.reason_text) as reason_code,
	pc.plan_code_id,
	(select description from tl_plan_code where plan_code_id = pc.plan_code_id) as plan_code_description,
	pc.planned_premium,
	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
	cpi.web_quoted_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_quoted) as applied_for_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_approved) as system_recommended_rate_class,
	(select
		description
	 from
		ta_rate_table_class
	 where
		rulebook_id = 
			(select top 1 rulebook_id from rulebook_view where plan_code_id = pc.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = cpi.rate_class_issued) as rate_class_approved,
	pc.approved_amount as issued_amount,
	pc.perm_table_rating as table_rating,
	pc.perm_flat_extra_amount as flat_extra_amount,
	p.cwa_amount,
	ap.income,
	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
	ap.occupation,
	p.lead_number_id as aggregator_lead_number,
	p.source_info,
	p.distributor_code,
	p.underwriter_id,
	(select
		rtrim(uw.last_name) + ', ' + rtrim(uw.first_name)
	 from
	 	aus_user_view uw
	 where
		uw.user_id = p.underwriter_id
	) as underwriter_name,
	(select
		rtrim(sa.last_name) + ', ' + rtrim(sa.first_name)
	 from
	 	aus_user_view sa
	 where
		sa.user_id = p.service_associate_id
	) as service_associate_name,
	(select
		tm.team_name
	 from
		team tm
	 where
		tm.team_id = p.team_id
	) as team_name,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
	p.team_id
from
	policy p,
	policy_person_insured ppi,
	person i,
	insured_application_info ap,
	coverage_person_insured cpi,
	coverage_person cp,
	policy_coverage pc
where
	cpi.coverage_person_id = cp.coverage_person_id and
	cp.policy_coverage_id = pc.policy_coverage_id and
	cp.person_id = i.person_id and
	pc.policy_id = p.policy_id and
	ppi.policy_person_id = cpi.policy_person_id and
	ap.policy_person_id = ppi.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW rp_all_applicants as select
 	p.company_code,
 	(select assoc.association_name from
 		(select association_code, name as association_name from association where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
 		 union
 		 select c.company_code as association_code ,p.last_name as association_name from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')) assoc
 	 where p.association_code = assoc.association_code) as association_name,
 	icv.g_number,
 	i.client_id,
 	p.policy_number as case_number,
 	p.alternate_case_id as alternate_case_number,
 	p.receive_date,
 	p.service_associate_id,
 	i.last_name as applicant_last_name,
 	i.first_name as applicant_first_name,
 	i.tax_id as applicant_ssn,
 	(select TOP 1 ps.tax_id from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_ssn,
 	i.sex as gender,
 	i.applicant_status as applicant_status_code,
 	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
 	i.applicant_status_date,
 	icv.amount as amount_applied_for,
 	i.birth_date,
 	(select pa.country_state_id from person_address pa
 	 where pa.address_type_code = 'RESIDENCE'
 	 and pa.person_id = i.person_id) as residence_state_id,
 	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
 	 where (pa.address_type_code = 'RESIDENCE')
 	 and pa.person_id = i.person_id
 	 and cs.country_state_id = pa.country_state_id) as residence_state,
 	icv.final_action_date,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
 	) as final_action_by,
 	icv.reason_text as final_action_reason,
 	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = icv.coverage_status) and reason_text = icv.reason_text) as reason_code, 	icv.plan_code_id,
 	(select description from tl_plan_code where plan_code_id = icv.plan_code_id) as plan_code_description,
 -- 	icv.planned_premium,
 -- 	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
 -- 	icv.web_quoted_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_quoted) as applied_for_ rate_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_approved) as system_rec ommended_rate_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_issued) as rate_class_a pproved,
 	icv.approved_amount as issued_amount,
 	(SELECT TOP 1 effective_date FROM coverage_person_insured as cpi where cpi.policy_person_id = icv.policy_person_id) as effective_date,
 	(SELECT top 1 ltrim(rtrim(p.last_name)) from coverage_person_reinsurer as cpr 
 		inner join company as c on cpr.company_code = c.company_code 
 		inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id 
 		inner join policy_person as pp on pp.person_id = cp.person_id 
 		inner join person as p on p.person_id = c.person_id 
 		where pp.policy_person_id = icv.policy_person_id) as reinsurer_name,
 	(SELECT top 1 cpr.reinsurance_amount FROM coverage_person_reinsurer as cpr inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id inner join policy_person as pp on pp.person_id = cp.person_id where pp.policy_person_id = icv.policy_person_id) as reinsurance_amount,
 	icv.perm_table_rating as table_rating,
 	icv.perm_flat_extra_amount as flat_extra_amount,
 -- 	p.cwa_amount,
 	ap.income,
 	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
 	ap.occupation,
 -- 	p.lead_number_id as aggregator_lead_number,
 -- 	p.source_info,
 -- 	p.distributor_code,
 	p.underwriter_id,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.underwriter_id
 	) as underwriter_name,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.service_associate_id
 	) as service_associate_name,
 	(select
 		tm.team_name
 	 from
 		team tm
 	 where
 		tm.team_id = p.team_id
 	) as team_name,
 -- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
 -- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
 -- 	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
 	p.team_id
 from
 	policy p,
 	insured i,
 	application_info_view ap,
 	insured_coverages_view icv
 where
 	i.policy_id = p.policy_id and
 	ap.policy_person_id = i.policy_person_id and
 	i.policy_person_id = icv.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
ALTER VIEW policy_proxy_view_uw_rm_count as
select
 pp.*,
 rvw.unchk_rvw_count as uw_rm_count
from
 policy_proxy_view pp,
 unchecked_rvw_msg_count rvw
where
 rvw.policy_person_id =* pp.policy_person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
	    
DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	