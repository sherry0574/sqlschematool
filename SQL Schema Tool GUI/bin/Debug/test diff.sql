
-- DB Name: C:\Documents and Settings\llewis.VPI\My Documents\My Projects\SQL Schema Tool\SQL Schema Tool GUI\bin\Debug\test diff.sql
-- Output Date: 7/25/2007
-- Output Time: 7:03 PM
-- AutoGenerated SQL: using the SQL Schema Tool.

/*
When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time 
error, the entire transaction is terminated and rolled back. When OFF, only the 
Transact-SQL statement that raised the error is rolled back and the transaction 
continues processing. Compile errors, such as syntax errors, are not affected by 
SET XACT_ABORT.
*/

SET QUOTED_IDENTIFIER ON
SET XACT_ABORT ON
BEGIN TRANSACTION T1 WITH MARK 'Apply Diffgram SQL'
	
-- drop original FK Constraints on table, if they exists
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[generic_note]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_generic_note_note_collection]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN	
	ALTER TABLE [dbo].[generic_note]  
	DROP CONSTRAINT FK_generic_note_note_collection
END	
GO
		
-- drop new FK Constraints on table, these should not exist, but just to be sure...
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FK_association_plan_sub_group]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
BEGIN
	ALTER TABLE [dbo].[association_plan]  
	DROP CONSTRAINT FK_association_plan_sub_group
END
GO
	
-- COUNT OF ALTERED COLUMNS IN TABLE [association_plan]: 3
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[association_plan]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	
	-- add new table columns
	ALTER TABLE [dbo].[association_plan] 
	ADD [company_group_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		[sub_group_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL ,
		[class_group_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NULL 
	
END
ELSE
	RAISERROR ('Error applying table changes: association_plan does not exist in catalog!', 16, 1)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[company]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [ix_company_code] ON [dbo].[company]([company_code]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sub_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	DROP TABLE [dbo].[sub_group]
END
GO
	
IF (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
	CREATE TABLE [dbo].[sub_group]
	(   
		[company_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[plan_code_id] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[sub_group_code] [char]  (10)  COLLATE SQL_Latin1_General_CP1_CI_AI NOT NULL,
		[person_id] [int]  NOT NULL
	)   ON [PRIMARY] 
ELSE
	RAISERROR ('You will have to manually add the filegroup PRIMARY to the SQL DB or edit this SQL script to set the FileGroups to PRIMARY', 16, 1)
RETURN
GO


IF (  (SELECT COLUMNPROPERTY( OBJECT_ID(N'sub_group'), N'company_code', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'sub_group'), N'plan_code_id', 'AllowsNull')) IS NOT NULL  AND   (SELECT COLUMNPROPERTY( OBJECT_ID(N'sub_group'), N'sub_group_code', 'AllowsNull')) IS NOT NULL   ) AND EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[dbo].[sub_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[sub_group] ADD 
	CONSTRAINT [PK_sub_group] PRIMARY KEY NONCLUSTERED 
	(
		[company_code], [plan_code_id], [sub_group_code]
	)  ON [PRIMARY] 
END
ELSE
	RAISERROR ('Constraint column(s): company_code, plan_code_id, sub_group_code do(es) not exist, or Table or File Group does not exist.  Check for other errors.', 16, 1)
GO
		
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sub_group]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) AND (SELECT FILEGROUP_ID('PRIMARY')) IS NOT NULL
BEGIN		
	CREATE  INDEX [IX_sub_group_person_id] ON [dbo].[sub_group]([person_id]) ON [PRIMARY]
END	
ELSE
	RAISERROR ('Table or File Group does not exist.  Check for other errors that caused the table to not be created.', 16, 1)
	
GO
		
-- add new FK Constraints to Table
IF object_id(N'association_plan') IS NOT NULL AND (SELECT COLUMNPROPERTY( object_id(N'sub_group'), N'company_code', 'AllowsNull') ) IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[association_plan] ADD 
	CONSTRAINT [FK_association_plan_sub_group] FOREIGN KEY 
	(	
		[association_code],
		[plan_code_id],
		[sub_group_code]
	) REFERENCES [dbo].[sub_group] ( 
		[company_code],
		[plan_code_id],
		[sub_group_code]
	)
END
ELSE
	RAISERROR ('Constraint referenced table: association_plan, or the related column: company_code does not exist', 16, 1)
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			-- for some reason I had to drop the note_collection_id 
 -- field from this view to avoid an error in the code when it
 -- walked thru the fields
  ALTER VIEW aus_user_view as select
 	person.person_id,
 	person.party_id,
 	person.last_name,
 	person.first_name,
 	person.middle_name,
 	person.birth_name,
 	person.title,
 	person.suffix,
 	person.tax_id,
 	person.tax_type_id,
 	person.birth_date,
 	person.sex,
 	person.person_type_id,
 	person.preferred_language_code,
 	person.email_address,
 	person.marital_status,
 	person.client_id,
 	person.alt_email_address,
 	person.preferred_contact_mode,
 	person.class_type,
 	person.field1,
 	person.field2,
 	person.field3,
 	person.field4,
 	person.field5,
 	au.user_id,
 	au.login_id,
 	au.password,
 	au.is_active,
 	au.level_of_authority,
 	au.is_underwriter,
 	au.restrict_to_teams,
 	au.role_id,
 	au.is_service_associate,
 	au.job_title,
 	au.account_locked,
 	au.account_locked_date,
 	au.bad_login_attempt_count,
 	au.last_bad_login_attempt_date,
 	au.must_change_password,
 	au.last_password_change_date,
 	au.is_agent,
 	au.agent_number,
 	au.is_agency,
 	au.agency_number,
 	au.deleted,
 	au.use_single_sign_on
 from
 	person,
 	aus_user au
 where
 	au.person_id = person.person_id and
 	(au.deleted is null or au.deleted = 0)
  
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW dbo.company_view AS
 SELECT
 	  dbo.person.person_id
 	, dbo.person.party_id
 	, dbo.person.last_name
 	, dbo.person.first_name
 	, dbo.person.middle_name
 	, dbo.person.birth_name
 	, dbo.person.title
 	, dbo.person.suffix
 	, dbo.person.tax_id
 	, dbo.person.tax_type_id
 	, dbo.person.birth_date
 	, dbo.person.sex
 	, dbo.person.person_type_id
 	, dbo.person.preferred_language_code
 	, dbo.person.email_address
 	, dbo.person.marital_status
 	, dbo.person.client_id
 	, dbo.person.alt_email_address
 	, dbo.person.preferred_contact_mode
 	, dbo.person.class_type
 	, dbo.person.field1
 	, dbo.person.field2
 	, dbo.person.field3
 	, dbo.person.field4
 	, dbo.person.field5
 	, dbo.person.note_collection_id
 	, dbo.company.company_code
 	, dbo.company.allow_aus_approval_flag
 	, dbo.company.correspondence_directory
 	, dbo.company.full_time_employee_count
 	, dbo.company.percent_eligible_employees
 	, dbo.company.percent_eligible_dependants
 	, dbo.company.current_cobra_indicator
 	, dbo.company.expiration_date
 	, dbo.company.region_code
 	, dbo.company.tpa_code
 	, dbo.company.carrier_code
 FROM         dbo.person, dbo.company 
 WHERE dbo.person.person_id = dbo.company.person_id
   
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sub_group_view]') and OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
	DROP VIEW [dbo].[sub_group_view]
END
GO

			 
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			
CREATE  VIEW dbo.sub_group_view
AS
select distinct
    person.person_id
    , person.party_id
    , person.last_name
    , person.first_name
    , person.middle_name
    , person.birth_name
    , person.title
    , person.suffix
    , person.tax_id
    , person.tax_type_id
    , person.birth_date
    , person.sex
    , person.person_type_id
    , person.preferred_language_code
    , person.email_address
    , person.marital_status
    , person.client_id
    , person.alt_email_address
    , person.preferred_contact_mode
    , 'SUBGROUP' as class_type
    , person.field1
    , person.field2
    , person.field3
    , person.field4
    , person.field5
    , person.note_collection_id
    , company.company_code
    , company.allow_aus_approval_flag
    , company.correspondence_directory
    , company.full_time_employee_count
    , company.percent_eligible_employees
    , company.percent_eligible_dependants
    , company.current_cobra_indicator
    , company.expiration_date
    , company.region_code
    , company.tpa_code
    , company.carrier_code
    , sub_group.plan_code_id
    , sub_group.sub_group_code
from company, sub_group, person
where 
    company.company_code = sub_group.company_code
    and person.person_id = sub_group.person_id

GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
SET QUOTED_IDENTIFIER, ANSI_NULLS ON 
GO

			ALTER VIEW rp_all_applicants as select
 	p.company_code,
 	(select assoc.association_name from
 		(select association_code, name as association_name from association where association_code not in (select c.company_code from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP'))
 		 union
 		 select c.company_code as association_code ,p.last_name as association_name from company c, person p where c.person_id = p.person_id and (p.class_type = 'ASSN' or p.class_type = 'GRP')) assoc
 	 where p.association_code = assoc.association_code) as association_name,
 	icv.g_number,
 	i.client_id,
 	p.policy_number as case_number,
 	p.alternate_case_id as alternate_case_number,
 	p.receive_date,
 	p.service_associate_id,
 	i.last_name as applicant_last_name,
 	i.first_name as applicant_first_name,
 	i.tax_id as applicant_ssn,
 	(select TOP 1 ps.tax_id from person ps, policy_person pp where ps.person_id = pp.person_id and pp.role_id = 'owner' and pp.policy_id = i.policy_id) as member_ssn,
 	i.sex as gender,
 	i.applicant_status as applicant_status_code,
 	(select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = i.applicant_status) as applicant_status,
 	i.applicant_status_date,
 	icv.amount as amount_applied_for,
 	i.birth_date,
 	(select pa.country_state_id from person_address pa
 	 where pa.address_type_code = 'RESIDENCE'
 	 and pa.person_id = i.person_id) as residence_state_id,
 	(select ltrim(rtrim(cs.state_name)) + ' (' + ltrim(rtrim(cs.state_code)) + ')' from person_address pa, tl_country_state cs
 	 where (pa.address_type_code = 'RESIDENCE')
 	 and pa.person_id = i.person_id
 	 and cs.country_state_id = pa.country_state_id) as residence_state,
 	icv.final_action_date,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = icv.final_action_by_id
 	) as final_action_by,
 	icv.reason_text as final_action_reason,
 	(select reason_code from tl_final_action_reason where reason_status = (select code_value from tl_code where language_code = 'en-us' and code_type = 'applicant_status' and code_id = icv.coverage_status) and reason_text = icv.reason_text) as reason_code,
 	icv.plan_code_id,
 	(select description from tl_plan_code where plan_code_id = icv.plan_code_id) as plan_code_description,
 -- 	icv.planned_premium,
 -- 	(select code_value from tl_acord_codes where code_type = 'Payment Mode' and code_id = p.payment_mode_code) as premium_mode,
 -- 	icv.web_quoted_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_quoted) as applied_for_ rate_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_approved) as system_rec ommended_rate_class,
 -- 	(select
 -- 		description
 -- 	 from
 -- 		ta_rate_table_class
 -- 	 where
 -- 		rulebook_id =
 -- 			(select top 1 rulebook_id from rulebook_view where plan_code_id = icv.plan_code_id and ((association_code = p.association_code) or (p.association_code is null)) and (type = 0 or type is null)) and sequence_no = icv.rate_class_issued) as rate_class_a pproved,
 	icv.approved_amount as issued_amount,
 	(SELECT TOP 1 effective_date FROM coverage_person_insured as cpi where cpi.policy_person_id = icv.policy_person_id) as effective_date,
 	(SELECT top 1 ltrim(rtrim(p.last_name)) from coverage_person_reinsurer as cpr 
 		inner join company as c on cpr.company_code = c.company_code 
 		inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id 
 		inner join policy_person as pp on pp.person_id = cp.person_id 
 		inner join person as p on p.person_id = c.person_id 
 		where pp.policy_person_id = icv.policy_person_id) as reinsurer_name,
 	(SELECT top 1 cpr.reinsurance_amount FROM coverage_person_reinsurer as cpr inner join coverage_person as cp on cpr.coverage_person_id = cp.coverage_person_id inner join policy_person as pp on pp.person_id = cp.person_id where pp.policy_person_id = icv.p olicy_person_id) as reinsurance_amount,
 	icv.perm_table_rating as table_rating,
 	icv.perm_flat_extra_amount as flat_extra_amount,
 -- 	p.cwa_amount,
 	ap.income,
 	(select tobacco_use_id from tobacco where requirement_information_id = ap.requirement_information_id) as smoker_status,
 	ap.occupation,
 -- 	p.lead_number_id as aggregator_lead_number,
 -- 	p.source_info,
 -- 	p.distributor_code,
 	p.underwriter_id,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.underwriter_id
 	) as underwriter_name,
 	(select
 		ltrim(rtrim(ps.last_name) + ', ' + rtrim(ps.first_name))
 	 from
 	 	person ps, aus_user u
 	 where
 		u.person_id = ps.person_id and u.user_id = p.service_associate_id
 	) as service_associate_name,
 	(select
 		tm.team_name
 	 from
 		team tm
 	 where
 		tm.team_id = p.team_id
 	) as team_name,
 -- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id) as agent_1_number,
 -- 	(select top 1 agent_number from agent_view where policy_id = p.policy_id and agent_number not in (select agent_number from agent_view where policy_id = p.policy_id)) as agent_2_number,
 -- 	(select top 1 agency_number from agency_view where policy_id = p.policy_id) as bga_agency_number,
 	p.team_id
 from
 	policy p,
 	insured i,
 	application_info_view ap,
 	insured_coverages_view icv
 where
 	i.policy_id = p.policy_id and
 	ap.policy_person_id = i.policy_person_id and
 	i.policy_person_id = icv.policy_person_id
  
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS OFF
GO
	
	    
DECLARE @ERR int

SET @ERR = @@ERROR
IF @@TRANCOUNT > 0
BEGIN
	IF @ERR > 0
		ROLLBACK TRANSACTION
	ELSE
		COMMIT TRANSACTION T1
END
SET XACT_ABORT OFF
	